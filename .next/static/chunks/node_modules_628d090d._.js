(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([
  typeof document === "object" ? document.currentScript : undefined,
  {
    "[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          function _interop_require_default(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }
          exports._ = _interop_require_default;
        }
      },
    "[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          function _getRequireWildcardCache(nodeInterop) {
            if (typeof WeakMap !== "function") return null;
            var cacheBabelInterop = new WeakMap();
            var cacheNodeInterop = new WeakMap();
            return (_getRequireWildcardCache = function (nodeInterop) {
              return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
            })(nodeInterop);
          }
          function _interop_require_wildcard(obj, nodeInterop) {
            if (!nodeInterop && obj && obj.__esModule) return obj;
            if (
              obj === null ||
              (typeof obj !== "object" && typeof obj !== "function")
            )
              return {
                default: obj,
              };
            var cache = _getRequireWildcardCache(nodeInterop);
            if (cache && cache.has(obj)) return cache.get(obj);
            var newObj = {
              __proto__: null,
            };
            var hasPropertyDescriptor =
              Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var key in obj) {
              if (
                key !== "default" &&
                Object.prototype.hasOwnProperty.call(obj, key)
              ) {
                var desc = hasPropertyDescriptor
                  ? Object.getOwnPropertyDescriptor(obj, key)
                  : null;
                if (desc && (desc.get || desc.set))
                  Object.defineProperty(newObj, key, desc);
                else newObj[key] = obj[key];
              }
            }
            newObj.default = obj;
            if (cache) cache.set(obj, newObj);
            return newObj;
          }
          exports._ = _interop_require_wildcard;
        }
      },
    "[project]/node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          function _class_private_field_loose_base(receiver, privateKey) {
            if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
              throw new TypeError(
                "attempted to use private field on non-instance",
              );
            }
            return receiver;
          }
          exports._ = _class_private_field_loose_base;
        }
      },
    "[project]/node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          var id = 0;
          function _class_private_field_loose_key(name) {
            return "__private_" + id++ + "_" + name;
          }
          exports._ = _class_private_field_loose_key;
        }
      },
    "[project]/node_modules/@swc/helpers/cjs/_tagged_template_literal_loose.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          function _tagged_template_literal_loose(strings, raw) {
            if (!raw) raw = strings.slice(0);
            strings.raw = raw;
            return strings;
          }
          exports._ = _tagged_template_literal_loose;
        }
      },
    "[project]/node_modules/react/cjs/react.development.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          /**
           * @license React
           * react.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          "production" !== ("TURBOPACK compile-time value", "development") &&
            (function () {
              function defineDeprecationWarning(methodName, info) {
                Object.defineProperty(Component.prototype, methodName, {
                  get: function () {
                    console.warn(
                      "%s(...) is deprecated in plain JavaScript React classes. %s",
                      info[0],
                      info[1],
                    );
                  },
                });
              }
              function getIteratorFn(maybeIterable) {
                if (null === maybeIterable || "object" !== typeof maybeIterable)
                  return null;
                maybeIterable =
                  (MAYBE_ITERATOR_SYMBOL &&
                    maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                  maybeIterable["@@iterator"];
                return "function" === typeof maybeIterable
                  ? maybeIterable
                  : null;
              }
              function warnNoop(publicInstance, callerName) {
                publicInstance =
                  ((publicInstance = publicInstance.constructor) &&
                    (publicInstance.displayName || publicInstance.name)) ||
                  "ReactClass";
                var warningKey = publicInstance + "." + callerName;
                didWarnStateUpdateForUnmountedComponent[warningKey] ||
                  (console.error(
                    "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
                    callerName,
                    publicInstance,
                  ),
                  (didWarnStateUpdateForUnmountedComponent[warningKey] = !0));
              }
              function Component(props, context, updater) {
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue;
              }
              function ComponentDummy() {}
              function PureComponent(props, context, updater) {
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue;
              }
              function testStringCoercion(value) {
                return "" + value;
              }
              function checkKeyStringCoercion(value) {
                try {
                  testStringCoercion(value);
                  var JSCompiler_inline_result = !1;
                } catch (e) {
                  JSCompiler_inline_result = !0;
                }
                if (JSCompiler_inline_result) {
                  JSCompiler_inline_result = console;
                  var JSCompiler_temp_const = JSCompiler_inline_result.error;
                  var JSCompiler_inline_result$jscomp$0 =
                    ("function" === typeof Symbol &&
                      Symbol.toStringTag &&
                      value[Symbol.toStringTag]) ||
                    value.constructor.name ||
                    "Object";
                  JSCompiler_temp_const.call(
                    JSCompiler_inline_result,
                    "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
                    JSCompiler_inline_result$jscomp$0,
                  );
                  return testStringCoercion(value);
                }
              }
              function getComponentNameFromType(type) {
                if (null == type) return null;
                if ("function" === typeof type)
                  return type.$$typeof === REACT_CLIENT_REFERENCE
                    ? null
                    : type.displayName || type.name || null;
                if ("string" === typeof type) return type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return "Fragment";
                  case REACT_PROFILER_TYPE:
                    return "Profiler";
                  case REACT_STRICT_MODE_TYPE:
                    return "StrictMode";
                  case REACT_SUSPENSE_TYPE:
                    return "Suspense";
                  case REACT_SUSPENSE_LIST_TYPE:
                    return "SuspenseList";
                  case REACT_ACTIVITY_TYPE:
                    return "Activity";
                }
                if ("object" === typeof type)
                  switch (
                    ("number" === typeof type.tag &&
                      console.error(
                        "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.",
                      ),
                    type.$$typeof)
                  ) {
                    case REACT_PORTAL_TYPE:
                      return "Portal";
                    case REACT_CONTEXT_TYPE:
                      return (type.displayName || "Context") + ".Provider";
                    case REACT_CONSUMER_TYPE:
                      return (
                        (type._context.displayName || "Context") + ".Consumer"
                      );
                    case REACT_FORWARD_REF_TYPE:
                      var innerType = type.render;
                      type = type.displayName;
                      type ||
                        ((type = innerType.displayName || innerType.name || ""),
                        (type =
                          "" !== type
                            ? "ForwardRef(" + type + ")"
                            : "ForwardRef"));
                      return type;
                    case REACT_MEMO_TYPE:
                      return (
                        (innerType = type.displayName || null),
                        null !== innerType
                          ? innerType
                          : getComponentNameFromType(type.type) || "Memo"
                      );
                    case REACT_LAZY_TYPE:
                      innerType = type._payload;
                      type = type._init;
                      try {
                        return getComponentNameFromType(type(innerType));
                      } catch (x) {}
                  }
                return null;
              }
              function getTaskName(type) {
                if (type === REACT_FRAGMENT_TYPE) return "<>";
                if (
                  "object" === typeof type &&
                  null !== type &&
                  type.$$typeof === REACT_LAZY_TYPE
                )
                  return "<...>";
                try {
                  var name = getComponentNameFromType(type);
                  return name ? "<" + name + ">" : "<...>";
                } catch (x) {
                  return "<...>";
                }
              }
              function getOwner() {
                var dispatcher = ReactSharedInternals.A;
                return null === dispatcher ? null : dispatcher.getOwner();
              }
              function UnknownOwner() {
                return Error("react-stack-top-frame");
              }
              function hasValidKey(config) {
                if (hasOwnProperty.call(config, "key")) {
                  var getter = Object.getOwnPropertyDescriptor(
                    config,
                    "key",
                  ).get;
                  if (getter && getter.isReactWarning) return !1;
                }
                return void 0 !== config.key;
              }
              function defineKeyPropWarningGetter(props, displayName) {
                function warnAboutAccessingKey() {
                  specialPropKeyWarningShown ||
                    ((specialPropKeyWarningShown = !0),
                    console.error(
                      "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
                      displayName,
                    ));
                }
                warnAboutAccessingKey.isReactWarning = !0;
                Object.defineProperty(props, "key", {
                  get: warnAboutAccessingKey,
                  configurable: !0,
                });
              }
              function elementRefGetterWithDeprecationWarning() {
                var componentName = getComponentNameFromType(this.type);
                didWarnAboutElementRef[componentName] ||
                  ((didWarnAboutElementRef[componentName] = !0),
                  console.error(
                    "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.",
                  ));
                componentName = this.props.ref;
                return void 0 !== componentName ? componentName : null;
              }
              function ReactElement(
                type,
                key,
                self,
                source,
                owner,
                props,
                debugStack,
                debugTask,
              ) {
                self = props.ref;
                type = {
                  $$typeof: REACT_ELEMENT_TYPE,
                  type: type,
                  key: key,
                  props: props,
                  _owner: owner,
                };
                null !== (void 0 !== self ? self : null)
                  ? Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      get: elementRefGetterWithDeprecationWarning,
                    })
                  : Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      value: null,
                    });
                type._store = {};
                Object.defineProperty(type._store, "validated", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: 0,
                });
                Object.defineProperty(type, "_debugInfo", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: null,
                });
                Object.defineProperty(type, "_debugStack", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugStack,
                });
                Object.defineProperty(type, "_debugTask", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugTask,
                });
                Object.freeze &&
                  (Object.freeze(type.props), Object.freeze(type));
                return type;
              }
              function cloneAndReplaceKey(oldElement, newKey) {
                newKey = ReactElement(
                  oldElement.type,
                  newKey,
                  void 0,
                  void 0,
                  oldElement._owner,
                  oldElement.props,
                  oldElement._debugStack,
                  oldElement._debugTask,
                );
                oldElement._store &&
                  (newKey._store.validated = oldElement._store.validated);
                return newKey;
              }
              function isValidElement(object) {
                return (
                  "object" === typeof object &&
                  null !== object &&
                  object.$$typeof === REACT_ELEMENT_TYPE
                );
              }
              function escape(key) {
                var escaperLookup = {
                  "=": "=0",
                  ":": "=2",
                };
                return (
                  "$" +
                  key.replace(/[=:]/g, function (match) {
                    return escaperLookup[match];
                  })
                );
              }
              function getElementKey(element, index) {
                return "object" === typeof element &&
                  null !== element &&
                  null != element.key
                  ? (checkKeyStringCoercion(element.key),
                    escape("" + element.key))
                  : index.toString(36);
              }
              function noop$1() {}
              function resolveThenable(thenable) {
                switch (thenable.status) {
                  case "fulfilled":
                    return thenable.value;
                  case "rejected":
                    throw thenable.reason;
                  default:
                    switch (
                      ("string" === typeof thenable.status
                        ? thenable.then(noop$1, noop$1)
                        : ((thenable.status = "pending"),
                          thenable.then(
                            function (fulfilledValue) {
                              "pending" === thenable.status &&
                                ((thenable.status = "fulfilled"),
                                (thenable.value = fulfilledValue));
                            },
                            function (error) {
                              "pending" === thenable.status &&
                                ((thenable.status = "rejected"),
                                (thenable.reason = error));
                            },
                          )),
                      thenable.status)
                    ) {
                      case "fulfilled":
                        return thenable.value;
                      case "rejected":
                        throw thenable.reason;
                    }
                }
                throw thenable;
              }
              function mapIntoArray(
                children,
                array,
                escapedPrefix,
                nameSoFar,
                callback,
              ) {
                var type = typeof children;
                if ("undefined" === type || "boolean" === type) children = null;
                var invokeCallback = !1;
                if (null === children) invokeCallback = !0;
                else
                  switch (type) {
                    case "bigint":
                    case "string":
                    case "number":
                      invokeCallback = !0;
                      break;
                    case "object":
                      switch (children.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                          invokeCallback = !0;
                          break;
                        case REACT_LAZY_TYPE:
                          return (
                            (invokeCallback = children._init),
                            mapIntoArray(
                              invokeCallback(children._payload),
                              array,
                              escapedPrefix,
                              nameSoFar,
                              callback,
                            )
                          );
                      }
                  }
                if (invokeCallback) {
                  invokeCallback = children;
                  callback = callback(invokeCallback);
                  var childKey =
                    "" === nameSoFar
                      ? "." + getElementKey(invokeCallback, 0)
                      : nameSoFar;
                  isArrayImpl(callback)
                    ? ((escapedPrefix = ""),
                      null != childKey &&
                        (escapedPrefix =
                          childKey.replace(userProvidedKeyEscapeRegex, "$&/") +
                          "/"),
                      mapIntoArray(
                        callback,
                        array,
                        escapedPrefix,
                        "",
                        function (c) {
                          return c;
                        },
                      ))
                    : null != callback &&
                      (isValidElement(callback) &&
                        (null != callback.key &&
                          ((invokeCallback &&
                            invokeCallback.key === callback.key) ||
                            checkKeyStringCoercion(callback.key)),
                        (escapedPrefix = cloneAndReplaceKey(
                          callback,
                          escapedPrefix +
                            (null == callback.key ||
                            (invokeCallback &&
                              invokeCallback.key === callback.key)
                              ? ""
                              : ("" + callback.key).replace(
                                  userProvidedKeyEscapeRegex,
                                  "$&/",
                                ) + "/") +
                            childKey,
                        )),
                        "" !== nameSoFar &&
                          null != invokeCallback &&
                          isValidElement(invokeCallback) &&
                          null == invokeCallback.key &&
                          invokeCallback._store &&
                          !invokeCallback._store.validated &&
                          (escapedPrefix._store.validated = 2),
                        (callback = escapedPrefix)),
                      array.push(callback));
                  return 1;
                }
                invokeCallback = 0;
                childKey = "" === nameSoFar ? "." : nameSoFar + ":";
                if (isArrayImpl(children))
                  for (var i = 0; i < children.length; i++)
                    (nameSoFar = children[i]),
                      (type = childKey + getElementKey(nameSoFar, i)),
                      (invokeCallback += mapIntoArray(
                        nameSoFar,
                        array,
                        escapedPrefix,
                        type,
                        callback,
                      ));
                else if (
                  ((i = getIteratorFn(children)), "function" === typeof i)
                )
                  for (
                    i === children.entries &&
                      (didWarnAboutMaps ||
                        console.warn(
                          "Using Maps as children is not supported. Use an array of keyed ReactElements instead.",
                        ),
                      (didWarnAboutMaps = !0)),
                      children = i.call(children),
                      i = 0;
                    !(nameSoFar = children.next()).done;

                  )
                    (nameSoFar = nameSoFar.value),
                      (type = childKey + getElementKey(nameSoFar, i++)),
                      (invokeCallback += mapIntoArray(
                        nameSoFar,
                        array,
                        escapedPrefix,
                        type,
                        callback,
                      ));
                else if ("object" === type) {
                  if ("function" === typeof children.then)
                    return mapIntoArray(
                      resolveThenable(children),
                      array,
                      escapedPrefix,
                      nameSoFar,
                      callback,
                    );
                  array = String(children);
                  throw Error(
                    "Objects are not valid as a React child (found: " +
                      ("[object Object]" === array
                        ? "object with keys {" +
                          Object.keys(children).join(", ") +
                          "}"
                        : array) +
                      "). If you meant to render a collection of children, use an array instead.",
                  );
                }
                return invokeCallback;
              }
              function mapChildren(children, func, context) {
                if (null == children) return children;
                var result = [],
                  count = 0;
                mapIntoArray(children, result, "", "", function (child) {
                  return func.call(context, child, count++);
                });
                return result;
              }
              function lazyInitializer(payload) {
                if (-1 === payload._status) {
                  var ctor = payload._result;
                  ctor = ctor();
                  ctor.then(
                    function (moduleObject) {
                      if (0 === payload._status || -1 === payload._status)
                        (payload._status = 1), (payload._result = moduleObject);
                    },
                    function (error) {
                      if (0 === payload._status || -1 === payload._status)
                        (payload._status = 2), (payload._result = error);
                    },
                  );
                  -1 === payload._status &&
                    ((payload._status = 0), (payload._result = ctor));
                }
                if (1 === payload._status)
                  return (
                    (ctor = payload._result),
                    void 0 === ctor &&
                      console.error(
                        "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
                        ctor,
                      ),
                    "default" in ctor ||
                      console.error(
                        "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
                        ctor,
                      ),
                    ctor.default
                  );
                throw payload._result;
              }
              function resolveDispatcher() {
                var dispatcher = ReactSharedInternals.H;
                null === dispatcher &&
                  console.error(
                    "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.",
                  );
                return dispatcher;
              }
              function noop() {}
              function enqueueTask(task) {
                if (null === enqueueTaskImpl)
                  try {
                    var requireString = ("require" + Math.random()).slice(0, 7);
                    enqueueTaskImpl = (module && module[requireString]).call(
                      module,
                      "timers",
                    ).setImmediate;
                  } catch (_err) {
                    enqueueTaskImpl = function (callback) {
                      !1 === didWarnAboutMessageChannel &&
                        ((didWarnAboutMessageChannel = !0),
                        "undefined" === typeof MessageChannel &&
                          console.error(
                            "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.",
                          ));
                      var channel = new MessageChannel();
                      channel.port1.onmessage = callback;
                      channel.port2.postMessage(void 0);
                    };
                  }
                return enqueueTaskImpl(task);
              }
              function aggregateErrors(errors) {
                return 1 < errors.length && "function" === typeof AggregateError
                  ? new AggregateError(errors)
                  : errors[0];
              }
              function popActScope(prevActQueue, prevActScopeDepth) {
                prevActScopeDepth !== actScopeDepth - 1 &&
                  console.error(
                    "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ",
                  );
                actScopeDepth = prevActScopeDepth;
              }
              function recursivelyFlushAsyncActWork(
                returnValue,
                resolve,
                reject,
              ) {
                var queue = ReactSharedInternals.actQueue;
                if (null !== queue)
                  if (0 !== queue.length)
                    try {
                      flushActQueue(queue);
                      enqueueTask(function () {
                        return recursivelyFlushAsyncActWork(
                          returnValue,
                          resolve,
                          reject,
                        );
                      });
                      return;
                    } catch (error) {
                      ReactSharedInternals.thrownErrors.push(error);
                    }
                  else ReactSharedInternals.actQueue = null;
                0 < ReactSharedInternals.thrownErrors.length
                  ? ((queue = aggregateErrors(
                      ReactSharedInternals.thrownErrors,
                    )),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    reject(queue))
                  : resolve(returnValue);
              }
              function flushActQueue(queue) {
                if (!isFlushing) {
                  isFlushing = !0;
                  var i = 0;
                  try {
                    for (; i < queue.length; i++) {
                      var callback = queue[i];
                      do {
                        ReactSharedInternals.didUsePromise = !1;
                        var continuation = callback(!1);
                        if (null !== continuation) {
                          if (ReactSharedInternals.didUsePromise) {
                            queue[i] = callback;
                            queue.splice(0, i);
                            return;
                          }
                          callback = continuation;
                        } else break;
                      } while (1);
                    }
                    queue.length = 0;
                  } catch (error) {
                    queue.splice(0, i + 1),
                      ReactSharedInternals.thrownErrors.push(error);
                  } finally {
                    isFlushing = !1;
                  }
                }
              }
              "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                "function" ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
                  Error(),
                );
              var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
                REACT_PORTAL_TYPE = Symbol.for("react.portal"),
                REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
                REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
                REACT_PROFILER_TYPE = Symbol.for("react.profiler");
              Symbol.for("react.provider");
              var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
                REACT_CONTEXT_TYPE = Symbol.for("react.context"),
                REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
                REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
                REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
                REACT_MEMO_TYPE = Symbol.for("react.memo"),
                REACT_LAZY_TYPE = Symbol.for("react.lazy"),
                REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
                MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
                didWarnStateUpdateForUnmountedComponent = {},
                ReactNoopUpdateQueue = {
                  isMounted: function () {
                    return !1;
                  },
                  enqueueForceUpdate: function (publicInstance) {
                    warnNoop(publicInstance, "forceUpdate");
                  },
                  enqueueReplaceState: function (publicInstance) {
                    warnNoop(publicInstance, "replaceState");
                  },
                  enqueueSetState: function (publicInstance) {
                    warnNoop(publicInstance, "setState");
                  },
                },
                assign = Object.assign,
                emptyObject = {};
              Object.freeze(emptyObject);
              Component.prototype.isReactComponent = {};
              Component.prototype.setState = function (partialState, callback) {
                if (
                  "object" !== typeof partialState &&
                  "function" !== typeof partialState &&
                  null != partialState
                )
                  throw Error(
                    "takes an object of state variables to update or a function which returns an object of state variables.",
                  );
                this.updater.enqueueSetState(
                  this,
                  partialState,
                  callback,
                  "setState",
                );
              };
              Component.prototype.forceUpdate = function (callback) {
                this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
              };
              var deprecatedAPIs = {
                  isMounted: [
                    "isMounted",
                    "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",
                  ],
                  replaceState: [
                    "replaceState",
                    "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).",
                  ],
                },
                fnName;
              for (fnName in deprecatedAPIs)
                deprecatedAPIs.hasOwnProperty(fnName) &&
                  defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              ComponentDummy.prototype = Component.prototype;
              deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
              deprecatedAPIs.constructor = PureComponent;
              assign(deprecatedAPIs, Component.prototype);
              deprecatedAPIs.isPureReactComponent = !0;
              var isArrayImpl = Array.isArray,
                REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
                ReactSharedInternals = {
                  H: null,
                  A: null,
                  T: null,
                  S: null,
                  V: null,
                  actQueue: null,
                  isBatchingLegacy: !1,
                  didScheduleLegacyUpdate: !1,
                  didUsePromise: !1,
                  thrownErrors: [],
                  getCurrentStack: null,
                  recentlyCreatedOwnerStacks: 0,
                },
                hasOwnProperty = Object.prototype.hasOwnProperty,
                createTask = console.createTask
                  ? console.createTask
                  : function () {
                      return null;
                    };
              deprecatedAPIs = {
                "react-stack-bottom-frame": function (callStackForError) {
                  return callStackForError();
                },
              };
              var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
              var didWarnAboutElementRef = {};
              var unknownOwnerDebugStack = deprecatedAPIs[
                "react-stack-bottom-frame"
              ].bind(deprecatedAPIs, UnknownOwner)();
              var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
              var didWarnAboutMaps = !1,
                userProvidedKeyEscapeRegex = /\/+/g,
                reportGlobalError =
                  "function" === typeof reportError
                    ? reportError
                    : function (error) {
                        if (
                          "object" === typeof window &&
                          "function" === typeof window.ErrorEvent
                        ) {
                          var event = new window.ErrorEvent("error", {
                            bubbles: !0,
                            cancelable: !0,
                            message:
                              "object" === typeof error &&
                              null !== error &&
                              "string" === typeof error.message
                                ? String(error.message)
                                : String(error),
                            error: error,
                          });
                          if (!window.dispatchEvent(event)) return;
                        } else if (
                          "object" ===
                            typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                              "default"
                            ] &&
                          "function" ===
                            typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                              "default"
                            ].emit
                        ) {
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "default"
                          ].emit("uncaughtException", error);
                          return;
                        }
                        console.error(error);
                      },
                didWarnAboutMessageChannel = !1,
                enqueueTaskImpl = null,
                actScopeDepth = 0,
                didWarnNoAwaitAct = !1,
                isFlushing = !1,
                queueSeveralMicrotasks =
                  "function" === typeof queueMicrotask
                    ? function (callback) {
                        queueMicrotask(function () {
                          return queueMicrotask(callback);
                        });
                      }
                    : enqueueTask;
              deprecatedAPIs = Object.freeze({
                __proto__: null,
                c: function (size) {
                  return resolveDispatcher().useMemoCache(size);
                },
              });
              exports.Children = {
                map: mapChildren,
                forEach: function (children, forEachFunc, forEachContext) {
                  mapChildren(
                    children,
                    function () {
                      forEachFunc.apply(this, arguments);
                    },
                    forEachContext,
                  );
                },
                count: function (children) {
                  var n = 0;
                  mapChildren(children, function () {
                    n++;
                  });
                  return n;
                },
                toArray: function (children) {
                  return (
                    mapChildren(children, function (child) {
                      return child;
                    }) || []
                  );
                },
                only: function (children) {
                  if (!isValidElement(children))
                    throw Error(
                      "React.Children.only expected to receive a single React element child.",
                    );
                  return children;
                },
              };
              exports.Component = Component;
              exports.Fragment = REACT_FRAGMENT_TYPE;
              exports.Profiler = REACT_PROFILER_TYPE;
              exports.PureComponent = PureComponent;
              exports.StrictMode = REACT_STRICT_MODE_TYPE;
              exports.Suspense = REACT_SUSPENSE_TYPE;
              exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
                ReactSharedInternals;
              exports.__COMPILER_RUNTIME = deprecatedAPIs;
              exports.act = function (callback) {
                var prevActQueue = ReactSharedInternals.actQueue,
                  prevActScopeDepth = actScopeDepth;
                actScopeDepth++;
                var queue = (ReactSharedInternals.actQueue =
                    null !== prevActQueue ? prevActQueue : []),
                  didAwaitActCall = !1;
                try {
                  var result = callback();
                } catch (error) {
                  ReactSharedInternals.thrownErrors.push(error);
                }
                if (0 < ReactSharedInternals.thrownErrors.length)
                  throw (
                    (popActScope(prevActQueue, prevActScopeDepth),
                    (callback = aggregateErrors(
                      ReactSharedInternals.thrownErrors,
                    )),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    callback)
                  );
                if (
                  null !== result &&
                  "object" === typeof result &&
                  "function" === typeof result.then
                ) {
                  var thenable = result;
                  queueSeveralMicrotasks(function () {
                    didAwaitActCall ||
                      didWarnNoAwaitAct ||
                      ((didWarnNoAwaitAct = !0),
                      console.error(
                        "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);",
                      ));
                  });
                  return {
                    then: function (resolve, reject) {
                      didAwaitActCall = !0;
                      thenable.then(
                        function (returnValue) {
                          popActScope(prevActQueue, prevActScopeDepth);
                          if (0 === prevActScopeDepth) {
                            try {
                              flushActQueue(queue),
                                enqueueTask(function () {
                                  return recursivelyFlushAsyncActWork(
                                    returnValue,
                                    resolve,
                                    reject,
                                  );
                                });
                            } catch (error$0) {
                              ReactSharedInternals.thrownErrors.push(error$0);
                            }
                            if (0 < ReactSharedInternals.thrownErrors.length) {
                              var _thrownError = aggregateErrors(
                                ReactSharedInternals.thrownErrors,
                              );
                              ReactSharedInternals.thrownErrors.length = 0;
                              reject(_thrownError);
                            }
                          } else resolve(returnValue);
                        },
                        function (error) {
                          popActScope(prevActQueue, prevActScopeDepth);
                          0 < ReactSharedInternals.thrownErrors.length
                            ? ((error = aggregateErrors(
                                ReactSharedInternals.thrownErrors,
                              )),
                              (ReactSharedInternals.thrownErrors.length = 0),
                              reject(error))
                            : reject(error);
                        },
                      );
                    },
                  };
                }
                var returnValue$jscomp$0 = result;
                popActScope(prevActQueue, prevActScopeDepth);
                0 === prevActScopeDepth &&
                  (flushActQueue(queue),
                  0 !== queue.length &&
                    queueSeveralMicrotasks(function () {
                      didAwaitActCall ||
                        didWarnNoAwaitAct ||
                        ((didWarnNoAwaitAct = !0),
                        console.error(
                          "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)",
                        ));
                    }),
                  (ReactSharedInternals.actQueue = null));
                if (0 < ReactSharedInternals.thrownErrors.length)
                  throw (
                    ((callback = aggregateErrors(
                      ReactSharedInternals.thrownErrors,
                    )),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    callback)
                  );
                return {
                  then: function (resolve, reject) {
                    didAwaitActCall = !0;
                    0 === prevActScopeDepth
                      ? ((ReactSharedInternals.actQueue = queue),
                        enqueueTask(function () {
                          return recursivelyFlushAsyncActWork(
                            returnValue$jscomp$0,
                            resolve,
                            reject,
                          );
                        }))
                      : resolve(returnValue$jscomp$0);
                  },
                };
              };
              exports.cache = function (fn) {
                return function () {
                  return fn.apply(null, arguments);
                };
              };
              exports.captureOwnerStack = function () {
                var getCurrentStack = ReactSharedInternals.getCurrentStack;
                return null === getCurrentStack ? null : getCurrentStack();
              };
              exports.cloneElement = function (element, config, children) {
                if (null === element || void 0 === element)
                  throw Error(
                    "The argument must be a React element, but you passed " +
                      element +
                      ".",
                  );
                var props = assign({}, element.props),
                  key = element.key,
                  owner = element._owner;
                if (null != config) {
                  var JSCompiler_inline_result;
                  a: {
                    if (
                      hasOwnProperty.call(config, "ref") &&
                      (JSCompiler_inline_result =
                        Object.getOwnPropertyDescriptor(config, "ref").get) &&
                      JSCompiler_inline_result.isReactWarning
                    ) {
                      JSCompiler_inline_result = !1;
                      break a;
                    }
                    JSCompiler_inline_result = void 0 !== config.ref;
                  }
                  JSCompiler_inline_result && (owner = getOwner());
                  hasValidKey(config) &&
                    (checkKeyStringCoercion(config.key),
                    (key = "" + config.key));
                  for (propName in config)
                    !hasOwnProperty.call(config, propName) ||
                      "key" === propName ||
                      "__self" === propName ||
                      "__source" === propName ||
                      ("ref" === propName && void 0 === config.ref) ||
                      (props[propName] = config[propName]);
                }
                var propName = arguments.length - 2;
                if (1 === propName) props.children = children;
                else if (1 < propName) {
                  JSCompiler_inline_result = Array(propName);
                  for (var i = 0; i < propName; i++)
                    JSCompiler_inline_result[i] = arguments[i + 2];
                  props.children = JSCompiler_inline_result;
                }
                props = ReactElement(
                  element.type,
                  key,
                  void 0,
                  void 0,
                  owner,
                  props,
                  element._debugStack,
                  element._debugTask,
                );
                for (key = 2; key < arguments.length; key++)
                  (owner = arguments[key]),
                    isValidElement(owner) &&
                      owner._store &&
                      (owner._store.validated = 1);
                return props;
              };
              exports.createContext = function (defaultValue) {
                defaultValue = {
                  $$typeof: REACT_CONTEXT_TYPE,
                  _currentValue: defaultValue,
                  _currentValue2: defaultValue,
                  _threadCount: 0,
                  Provider: null,
                  Consumer: null,
                };
                defaultValue.Provider = defaultValue;
                defaultValue.Consumer = {
                  $$typeof: REACT_CONSUMER_TYPE,
                  _context: defaultValue,
                };
                defaultValue._currentRenderer = null;
                defaultValue._currentRenderer2 = null;
                return defaultValue;
              };
              exports.createElement = function (type, config, children) {
                for (var i = 2; i < arguments.length; i++) {
                  var node = arguments[i];
                  isValidElement(node) &&
                    node._store &&
                    (node._store.validated = 1);
                }
                i = {};
                node = null;
                if (null != config)
                  for (propName in (didWarnAboutOldJSXRuntime ||
                    !("__self" in config) ||
                    "key" in config ||
                    ((didWarnAboutOldJSXRuntime = !0),
                    console.warn(
                      "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform",
                    )),
                  hasValidKey(config) &&
                    (checkKeyStringCoercion(config.key),
                    (node = "" + config.key)),
                  config))
                    hasOwnProperty.call(config, propName) &&
                      "key" !== propName &&
                      "__self" !== propName &&
                      "__source" !== propName &&
                      (i[propName] = config[propName]);
                var childrenLength = arguments.length - 2;
                if (1 === childrenLength) i.children = children;
                else if (1 < childrenLength) {
                  for (
                    var childArray = Array(childrenLength), _i = 0;
                    _i < childrenLength;
                    _i++
                  )
                    childArray[_i] = arguments[_i + 2];
                  Object.freeze && Object.freeze(childArray);
                  i.children = childArray;
                }
                if (type && type.defaultProps)
                  for (propName in ((childrenLength = type.defaultProps),
                  childrenLength))
                    void 0 === i[propName] &&
                      (i[propName] = childrenLength[propName]);
                node &&
                  defineKeyPropWarningGetter(
                    i,
                    "function" === typeof type
                      ? type.displayName || type.name || "Unknown"
                      : type,
                  );
                var propName =
                  1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
                return ReactElement(
                  type,
                  node,
                  void 0,
                  void 0,
                  getOwner(),
                  i,
                  propName
                    ? Error("react-stack-top-frame")
                    : unknownOwnerDebugStack,
                  propName
                    ? createTask(getTaskName(type))
                    : unknownOwnerDebugTask,
                );
              };
              exports.createRef = function () {
                var refObject = {
                  current: null,
                };
                Object.seal(refObject);
                return refObject;
              };
              exports.forwardRef = function (render) {
                null != render && render.$$typeof === REACT_MEMO_TYPE
                  ? console.error(
                      "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).",
                    )
                  : "function" !== typeof render
                    ? console.error(
                        "forwardRef requires a render function but was given %s.",
                        null === render ? "null" : typeof render,
                      )
                    : 0 !== render.length &&
                      2 !== render.length &&
                      console.error(
                        "forwardRef render functions accept exactly two parameters: props and ref. %s",
                        1 === render.length
                          ? "Did you forget to use the ref parameter?"
                          : "Any additional parameter will be undefined.",
                      );
                null != render &&
                  null != render.defaultProps &&
                  console.error(
                    "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?",
                  );
                var elementType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: render,
                  },
                  ownName;
                Object.defineProperty(elementType, "displayName", {
                  enumerable: !1,
                  configurable: !0,
                  get: function () {
                    return ownName;
                  },
                  set: function (name) {
                    ownName = name;
                    render.name ||
                      render.displayName ||
                      (Object.defineProperty(render, "name", {
                        value: name,
                      }),
                      (render.displayName = name));
                  },
                });
                return elementType;
              };
              exports.isValidElement = isValidElement;
              exports.lazy = function (ctor) {
                return {
                  $$typeof: REACT_LAZY_TYPE,
                  _payload: {
                    _status: -1,
                    _result: ctor,
                  },
                  _init: lazyInitializer,
                };
              };
              exports.memo = function (type, compare) {
                null == type &&
                  console.error(
                    "memo: The first argument must be a component. Instead received: %s",
                    null === type ? "null" : typeof type,
                  );
                compare = {
                  $$typeof: REACT_MEMO_TYPE,
                  type: type,
                  compare: void 0 === compare ? null : compare,
                };
                var ownName;
                Object.defineProperty(compare, "displayName", {
                  enumerable: !1,
                  configurable: !0,
                  get: function () {
                    return ownName;
                  },
                  set: function (name) {
                    ownName = name;
                    type.name ||
                      type.displayName ||
                      (Object.defineProperty(type, "name", {
                        value: name,
                      }),
                      (type.displayName = name));
                  },
                });
                return compare;
              };
              exports.startTransition = function (scope) {
                var prevTransition = ReactSharedInternals.T,
                  currentTransition = {};
                ReactSharedInternals.T = currentTransition;
                currentTransition._updatedFibers = new Set();
                try {
                  var returnValue = scope(),
                    onStartTransitionFinish = ReactSharedInternals.S;
                  null !== onStartTransitionFinish &&
                    onStartTransitionFinish(currentTransition, returnValue);
                  "object" === typeof returnValue &&
                    null !== returnValue &&
                    "function" === typeof returnValue.then &&
                    returnValue.then(noop, reportGlobalError);
                } catch (error) {
                  reportGlobalError(error);
                } finally {
                  null === prevTransition &&
                    currentTransition._updatedFibers &&
                    ((scope = currentTransition._updatedFibers.size),
                    currentTransition._updatedFibers.clear(),
                    10 < scope &&
                      console.warn(
                        "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.",
                      )),
                    (ReactSharedInternals.T = prevTransition);
                }
              };
              exports.unstable_useCacheRefresh = function () {
                return resolveDispatcher().useCacheRefresh();
              };
              exports.use = function (usable) {
                return resolveDispatcher().use(usable);
              };
              exports.useActionState = function (
                action,
                initialState,
                permalink,
              ) {
                return resolveDispatcher().useActionState(
                  action,
                  initialState,
                  permalink,
                );
              };
              exports.useCallback = function (callback, deps) {
                return resolveDispatcher().useCallback(callback, deps);
              };
              exports.useContext = function (Context) {
                var dispatcher = resolveDispatcher();
                Context.$$typeof === REACT_CONSUMER_TYPE &&
                  console.error(
                    "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?",
                  );
                return dispatcher.useContext(Context);
              };
              exports.useDebugValue = function (value, formatterFn) {
                return resolveDispatcher().useDebugValue(value, formatterFn);
              };
              exports.useDeferredValue = function (value, initialValue) {
                return resolveDispatcher().useDeferredValue(
                  value,
                  initialValue,
                );
              };
              exports.useEffect = function (create, createDeps, update) {
                null == create &&
                  console.warn(
                    "React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?",
                  );
                var dispatcher = resolveDispatcher();
                if ("function" === typeof update)
                  throw Error(
                    "useEffect CRUD overload is not enabled in this build of React.",
                  );
                return dispatcher.useEffect(create, createDeps);
              };
              exports.useId = function () {
                return resolveDispatcher().useId();
              };
              exports.useImperativeHandle = function (ref, create, deps) {
                return resolveDispatcher().useImperativeHandle(
                  ref,
                  create,
                  deps,
                );
              };
              exports.useInsertionEffect = function (create, deps) {
                null == create &&
                  console.warn(
                    "React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?",
                  );
                return resolveDispatcher().useInsertionEffect(create, deps);
              };
              exports.useLayoutEffect = function (create, deps) {
                null == create &&
                  console.warn(
                    "React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?",
                  );
                return resolveDispatcher().useLayoutEffect(create, deps);
              };
              exports.useMemo = function (create, deps) {
                return resolveDispatcher().useMemo(create, deps);
              };
              exports.useOptimistic = function (passthrough, reducer) {
                return resolveDispatcher().useOptimistic(passthrough, reducer);
              };
              exports.useReducer = function (reducer, initialArg, init) {
                return resolveDispatcher().useReducer(
                  reducer,
                  initialArg,
                  init,
                );
              };
              exports.useRef = function (initialValue) {
                return resolveDispatcher().useRef(initialValue);
              };
              exports.useState = function (initialState) {
                return resolveDispatcher().useState(initialState);
              };
              exports.useSyncExternalStore = function (
                subscribe,
                getSnapshot,
                getServerSnapshot,
              ) {
                return resolveDispatcher().useSyncExternalStore(
                  subscribe,
                  getSnapshot,
                  getServerSnapshot,
                );
              };
              exports.useTransition = function () {
                return resolveDispatcher().useTransition();
              };
              exports.version = "19.1.0";
              "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                "function" ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
                  Error(),
                );
            })();
        }
      },
    "[project]/node_modules/react/index.js [client] (ecmascript)": function (
      __turbopack_context__,
    ) {
      var {
        g: global,
        __dirname,
        m: module,
        e: exports,
      } = __turbopack_context__;
      {
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
          );
        ("use strict");
        if (("TURBOPACK compile-time falsy", 0)) {
          ("TURBOPACK unreachable");
        } else {
          module.exports = __turbopack_context__.r(
            "[project]/node_modules/react/cjs/react.development.js [client] (ecmascript)",
          );
        }
      }
    },
    "[project]/node_modules/react/cjs/react-jsx-runtime.development.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          /**
           * @license React
           * react-jsx-runtime.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          "production" !== ("TURBOPACK compile-time value", "development") &&
            (function () {
              function getComponentNameFromType(type) {
                if (null == type) return null;
                if ("function" === typeof type)
                  return type.$$typeof === REACT_CLIENT_REFERENCE
                    ? null
                    : type.displayName || type.name || null;
                if ("string" === typeof type) return type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return "Fragment";
                  case REACT_PROFILER_TYPE:
                    return "Profiler";
                  case REACT_STRICT_MODE_TYPE:
                    return "StrictMode";
                  case REACT_SUSPENSE_TYPE:
                    return "Suspense";
                  case REACT_SUSPENSE_LIST_TYPE:
                    return "SuspenseList";
                  case REACT_ACTIVITY_TYPE:
                    return "Activity";
                }
                if ("object" === typeof type)
                  switch (
                    ("number" === typeof type.tag &&
                      console.error(
                        "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.",
                      ),
                    type.$$typeof)
                  ) {
                    case REACT_PORTAL_TYPE:
                      return "Portal";
                    case REACT_CONTEXT_TYPE:
                      return (type.displayName || "Context") + ".Provider";
                    case REACT_CONSUMER_TYPE:
                      return (
                        (type._context.displayName || "Context") + ".Consumer"
                      );
                    case REACT_FORWARD_REF_TYPE:
                      var innerType = type.render;
                      type = type.displayName;
                      type ||
                        ((type = innerType.displayName || innerType.name || ""),
                        (type =
                          "" !== type
                            ? "ForwardRef(" + type + ")"
                            : "ForwardRef"));
                      return type;
                    case REACT_MEMO_TYPE:
                      return (
                        (innerType = type.displayName || null),
                        null !== innerType
                          ? innerType
                          : getComponentNameFromType(type.type) || "Memo"
                      );
                    case REACT_LAZY_TYPE:
                      innerType = type._payload;
                      type = type._init;
                      try {
                        return getComponentNameFromType(type(innerType));
                      } catch (x) {}
                  }
                return null;
              }
              function testStringCoercion(value) {
                return "" + value;
              }
              function checkKeyStringCoercion(value) {
                try {
                  testStringCoercion(value);
                  var JSCompiler_inline_result = !1;
                } catch (e) {
                  JSCompiler_inline_result = !0;
                }
                if (JSCompiler_inline_result) {
                  JSCompiler_inline_result = console;
                  var JSCompiler_temp_const = JSCompiler_inline_result.error;
                  var JSCompiler_inline_result$jscomp$0 =
                    ("function" === typeof Symbol &&
                      Symbol.toStringTag &&
                      value[Symbol.toStringTag]) ||
                    value.constructor.name ||
                    "Object";
                  JSCompiler_temp_const.call(
                    JSCompiler_inline_result,
                    "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
                    JSCompiler_inline_result$jscomp$0,
                  );
                  return testStringCoercion(value);
                }
              }
              function getTaskName(type) {
                if (type === REACT_FRAGMENT_TYPE) return "<>";
                if (
                  "object" === typeof type &&
                  null !== type &&
                  type.$$typeof === REACT_LAZY_TYPE
                )
                  return "<...>";
                try {
                  var name = getComponentNameFromType(type);
                  return name ? "<" + name + ">" : "<...>";
                } catch (x) {
                  return "<...>";
                }
              }
              function getOwner() {
                var dispatcher = ReactSharedInternals.A;
                return null === dispatcher ? null : dispatcher.getOwner();
              }
              function UnknownOwner() {
                return Error("react-stack-top-frame");
              }
              function hasValidKey(config) {
                if (hasOwnProperty.call(config, "key")) {
                  var getter = Object.getOwnPropertyDescriptor(
                    config,
                    "key",
                  ).get;
                  if (getter && getter.isReactWarning) return !1;
                }
                return void 0 !== config.key;
              }
              function defineKeyPropWarningGetter(props, displayName) {
                function warnAboutAccessingKey() {
                  specialPropKeyWarningShown ||
                    ((specialPropKeyWarningShown = !0),
                    console.error(
                      "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
                      displayName,
                    ));
                }
                warnAboutAccessingKey.isReactWarning = !0;
                Object.defineProperty(props, "key", {
                  get: warnAboutAccessingKey,
                  configurable: !0,
                });
              }
              function elementRefGetterWithDeprecationWarning() {
                var componentName = getComponentNameFromType(this.type);
                didWarnAboutElementRef[componentName] ||
                  ((didWarnAboutElementRef[componentName] = !0),
                  console.error(
                    "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.",
                  ));
                componentName = this.props.ref;
                return void 0 !== componentName ? componentName : null;
              }
              function ReactElement(
                type,
                key,
                self,
                source,
                owner,
                props,
                debugStack,
                debugTask,
              ) {
                self = props.ref;
                type = {
                  $$typeof: REACT_ELEMENT_TYPE,
                  type: type,
                  key: key,
                  props: props,
                  _owner: owner,
                };
                null !== (void 0 !== self ? self : null)
                  ? Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      get: elementRefGetterWithDeprecationWarning,
                    })
                  : Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      value: null,
                    });
                type._store = {};
                Object.defineProperty(type._store, "validated", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: 0,
                });
                Object.defineProperty(type, "_debugInfo", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: null,
                });
                Object.defineProperty(type, "_debugStack", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugStack,
                });
                Object.defineProperty(type, "_debugTask", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugTask,
                });
                Object.freeze &&
                  (Object.freeze(type.props), Object.freeze(type));
                return type;
              }
              function jsxDEVImpl(
                type,
                config,
                maybeKey,
                isStaticChildren,
                source,
                self,
                debugStack,
                debugTask,
              ) {
                var children = config.children;
                if (void 0 !== children)
                  if (isStaticChildren)
                    if (isArrayImpl(children)) {
                      for (
                        isStaticChildren = 0;
                        isStaticChildren < children.length;
                        isStaticChildren++
                      )
                        validateChildKeys(children[isStaticChildren]);
                      Object.freeze && Object.freeze(children);
                    } else
                      console.error(
                        "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.",
                      );
                  else validateChildKeys(children);
                if (hasOwnProperty.call(config, "key")) {
                  children = getComponentNameFromType(type);
                  var keys = Object.keys(config).filter(function (k) {
                    return "key" !== k;
                  });
                  isStaticChildren =
                    0 < keys.length
                      ? "{key: someKey, " + keys.join(": ..., ") + ": ...}"
                      : "{key: someKey}";
                  didWarnAboutKeySpread[children + isStaticChildren] ||
                    ((keys =
                      0 < keys.length
                        ? "{" + keys.join(": ..., ") + ": ...}"
                        : "{}"),
                    console.error(
                      'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
                      isStaticChildren,
                      children,
                      keys,
                      children,
                    ),
                    (didWarnAboutKeySpread[children + isStaticChildren] = !0));
                }
                children = null;
                void 0 !== maybeKey &&
                  (checkKeyStringCoercion(maybeKey),
                  (children = "" + maybeKey));
                hasValidKey(config) &&
                  (checkKeyStringCoercion(config.key),
                  (children = "" + config.key));
                if ("key" in config) {
                  maybeKey = {};
                  for (var propName in config)
                    "key" !== propName &&
                      (maybeKey[propName] = config[propName]);
                } else maybeKey = config;
                children &&
                  defineKeyPropWarningGetter(
                    maybeKey,
                    "function" === typeof type
                      ? type.displayName || type.name || "Unknown"
                      : type,
                  );
                return ReactElement(
                  type,
                  children,
                  self,
                  source,
                  getOwner(),
                  maybeKey,
                  debugStack,
                  debugTask,
                );
              }
              function validateChildKeys(node) {
                "object" === typeof node &&
                  null !== node &&
                  node.$$typeof === REACT_ELEMENT_TYPE &&
                  node._store &&
                  (node._store.validated = 1);
              }
              var React = __turbopack_context__.r(
                  "[project]/node_modules/react/index.js [client] (ecmascript)",
                ),
                REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
                REACT_PORTAL_TYPE = Symbol.for("react.portal"),
                REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
                REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
                REACT_PROFILER_TYPE = Symbol.for("react.profiler");
              Symbol.for("react.provider");
              var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
                REACT_CONTEXT_TYPE = Symbol.for("react.context"),
                REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
                REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
                REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
                REACT_MEMO_TYPE = Symbol.for("react.memo"),
                REACT_LAZY_TYPE = Symbol.for("react.lazy"),
                REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
                REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
                ReactSharedInternals =
                  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
                hasOwnProperty = Object.prototype.hasOwnProperty,
                isArrayImpl = Array.isArray,
                createTask = console.createTask
                  ? console.createTask
                  : function () {
                      return null;
                    };
              React = {
                "react-stack-bottom-frame": function (callStackForError) {
                  return callStackForError();
                },
              };
              var specialPropKeyWarningShown;
              var didWarnAboutElementRef = {};
              var unknownOwnerDebugStack = React[
                "react-stack-bottom-frame"
              ].bind(React, UnknownOwner)();
              var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
              var didWarnAboutKeySpread = {};
              exports.Fragment = REACT_FRAGMENT_TYPE;
              exports.jsx = function (type, config, maybeKey, source, self) {
                var trackActualOwner =
                  1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
                return jsxDEVImpl(
                  type,
                  config,
                  maybeKey,
                  !1,
                  source,
                  self,
                  trackActualOwner
                    ? Error("react-stack-top-frame")
                    : unknownOwnerDebugStack,
                  trackActualOwner
                    ? createTask(getTaskName(type))
                    : unknownOwnerDebugTask,
                );
              };
              exports.jsxs = function (type, config, maybeKey, source, self) {
                var trackActualOwner =
                  1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
                return jsxDEVImpl(
                  type,
                  config,
                  maybeKey,
                  !0,
                  source,
                  self,
                  trackActualOwner
                    ? Error("react-stack-top-frame")
                    : unknownOwnerDebugStack,
                  trackActualOwner
                    ? createTask(getTaskName(type))
                    : unknownOwnerDebugTask,
                );
              };
            })();
        }
      },
    "[project]/node_modules/react/jsx-runtime.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          if (("TURBOPACK compile-time falsy", 0)) {
            ("TURBOPACK unreachable");
          } else {
            module.exports = __turbopack_context__.r(
              "[project]/node_modules/react/cjs/react-jsx-runtime.development.js [client] (ecmascript)",
            );
          }
        }
      },
    "[project]/node_modules/react/cjs/react-jsx-dev-runtime.development.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          /**
           * @license React
           * react-jsx-dev-runtime.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          "production" !== ("TURBOPACK compile-time value", "development") &&
            (function () {
              function getComponentNameFromType(type) {
                if (null == type) return null;
                if ("function" === typeof type)
                  return type.$$typeof === REACT_CLIENT_REFERENCE
                    ? null
                    : type.displayName || type.name || null;
                if ("string" === typeof type) return type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return "Fragment";
                  case REACT_PROFILER_TYPE:
                    return "Profiler";
                  case REACT_STRICT_MODE_TYPE:
                    return "StrictMode";
                  case REACT_SUSPENSE_TYPE:
                    return "Suspense";
                  case REACT_SUSPENSE_LIST_TYPE:
                    return "SuspenseList";
                  case REACT_ACTIVITY_TYPE:
                    return "Activity";
                }
                if ("object" === typeof type)
                  switch (
                    ("number" === typeof type.tag &&
                      console.error(
                        "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.",
                      ),
                    type.$$typeof)
                  ) {
                    case REACT_PORTAL_TYPE:
                      return "Portal";
                    case REACT_CONTEXT_TYPE:
                      return (type.displayName || "Context") + ".Provider";
                    case REACT_CONSUMER_TYPE:
                      return (
                        (type._context.displayName || "Context") + ".Consumer"
                      );
                    case REACT_FORWARD_REF_TYPE:
                      var innerType = type.render;
                      type = type.displayName;
                      type ||
                        ((type = innerType.displayName || innerType.name || ""),
                        (type =
                          "" !== type
                            ? "ForwardRef(" + type + ")"
                            : "ForwardRef"));
                      return type;
                    case REACT_MEMO_TYPE:
                      return (
                        (innerType = type.displayName || null),
                        null !== innerType
                          ? innerType
                          : getComponentNameFromType(type.type) || "Memo"
                      );
                    case REACT_LAZY_TYPE:
                      innerType = type._payload;
                      type = type._init;
                      try {
                        return getComponentNameFromType(type(innerType));
                      } catch (x) {}
                  }
                return null;
              }
              function testStringCoercion(value) {
                return "" + value;
              }
              function checkKeyStringCoercion(value) {
                try {
                  testStringCoercion(value);
                  var JSCompiler_inline_result = !1;
                } catch (e) {
                  JSCompiler_inline_result = !0;
                }
                if (JSCompiler_inline_result) {
                  JSCompiler_inline_result = console;
                  var JSCompiler_temp_const = JSCompiler_inline_result.error;
                  var JSCompiler_inline_result$jscomp$0 =
                    ("function" === typeof Symbol &&
                      Symbol.toStringTag &&
                      value[Symbol.toStringTag]) ||
                    value.constructor.name ||
                    "Object";
                  JSCompiler_temp_const.call(
                    JSCompiler_inline_result,
                    "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
                    JSCompiler_inline_result$jscomp$0,
                  );
                  return testStringCoercion(value);
                }
              }
              function getTaskName(type) {
                if (type === REACT_FRAGMENT_TYPE) return "<>";
                if (
                  "object" === typeof type &&
                  null !== type &&
                  type.$$typeof === REACT_LAZY_TYPE
                )
                  return "<...>";
                try {
                  var name = getComponentNameFromType(type);
                  return name ? "<" + name + ">" : "<...>";
                } catch (x) {
                  return "<...>";
                }
              }
              function getOwner() {
                var dispatcher = ReactSharedInternals.A;
                return null === dispatcher ? null : dispatcher.getOwner();
              }
              function UnknownOwner() {
                return Error("react-stack-top-frame");
              }
              function hasValidKey(config) {
                if (hasOwnProperty.call(config, "key")) {
                  var getter = Object.getOwnPropertyDescriptor(
                    config,
                    "key",
                  ).get;
                  if (getter && getter.isReactWarning) return !1;
                }
                return void 0 !== config.key;
              }
              function defineKeyPropWarningGetter(props, displayName) {
                function warnAboutAccessingKey() {
                  specialPropKeyWarningShown ||
                    ((specialPropKeyWarningShown = !0),
                    console.error(
                      "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
                      displayName,
                    ));
                }
                warnAboutAccessingKey.isReactWarning = !0;
                Object.defineProperty(props, "key", {
                  get: warnAboutAccessingKey,
                  configurable: !0,
                });
              }
              function elementRefGetterWithDeprecationWarning() {
                var componentName = getComponentNameFromType(this.type);
                didWarnAboutElementRef[componentName] ||
                  ((didWarnAboutElementRef[componentName] = !0),
                  console.error(
                    "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.",
                  ));
                componentName = this.props.ref;
                return void 0 !== componentName ? componentName : null;
              }
              function ReactElement(
                type,
                key,
                self,
                source,
                owner,
                props,
                debugStack,
                debugTask,
              ) {
                self = props.ref;
                type = {
                  $$typeof: REACT_ELEMENT_TYPE,
                  type: type,
                  key: key,
                  props: props,
                  _owner: owner,
                };
                null !== (void 0 !== self ? self : null)
                  ? Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      get: elementRefGetterWithDeprecationWarning,
                    })
                  : Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      value: null,
                    });
                type._store = {};
                Object.defineProperty(type._store, "validated", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: 0,
                });
                Object.defineProperty(type, "_debugInfo", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: null,
                });
                Object.defineProperty(type, "_debugStack", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugStack,
                });
                Object.defineProperty(type, "_debugTask", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugTask,
                });
                Object.freeze &&
                  (Object.freeze(type.props), Object.freeze(type));
                return type;
              }
              function jsxDEVImpl(
                type,
                config,
                maybeKey,
                isStaticChildren,
                source,
                self,
                debugStack,
                debugTask,
              ) {
                var children = config.children;
                if (void 0 !== children)
                  if (isStaticChildren)
                    if (isArrayImpl(children)) {
                      for (
                        isStaticChildren = 0;
                        isStaticChildren < children.length;
                        isStaticChildren++
                      )
                        validateChildKeys(children[isStaticChildren]);
                      Object.freeze && Object.freeze(children);
                    } else
                      console.error(
                        "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.",
                      );
                  else validateChildKeys(children);
                if (hasOwnProperty.call(config, "key")) {
                  children = getComponentNameFromType(type);
                  var keys = Object.keys(config).filter(function (k) {
                    return "key" !== k;
                  });
                  isStaticChildren =
                    0 < keys.length
                      ? "{key: someKey, " + keys.join(": ..., ") + ": ...}"
                      : "{key: someKey}";
                  didWarnAboutKeySpread[children + isStaticChildren] ||
                    ((keys =
                      0 < keys.length
                        ? "{" + keys.join(": ..., ") + ": ...}"
                        : "{}"),
                    console.error(
                      'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
                      isStaticChildren,
                      children,
                      keys,
                      children,
                    ),
                    (didWarnAboutKeySpread[children + isStaticChildren] = !0));
                }
                children = null;
                void 0 !== maybeKey &&
                  (checkKeyStringCoercion(maybeKey),
                  (children = "" + maybeKey));
                hasValidKey(config) &&
                  (checkKeyStringCoercion(config.key),
                  (children = "" + config.key));
                if ("key" in config) {
                  maybeKey = {};
                  for (var propName in config)
                    "key" !== propName &&
                      (maybeKey[propName] = config[propName]);
                } else maybeKey = config;
                children &&
                  defineKeyPropWarningGetter(
                    maybeKey,
                    "function" === typeof type
                      ? type.displayName || type.name || "Unknown"
                      : type,
                  );
                return ReactElement(
                  type,
                  children,
                  self,
                  source,
                  getOwner(),
                  maybeKey,
                  debugStack,
                  debugTask,
                );
              }
              function validateChildKeys(node) {
                "object" === typeof node &&
                  null !== node &&
                  node.$$typeof === REACT_ELEMENT_TYPE &&
                  node._store &&
                  (node._store.validated = 1);
              }
              var React = __turbopack_context__.r(
                  "[project]/node_modules/react/index.js [client] (ecmascript)",
                ),
                REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
                REACT_PORTAL_TYPE = Symbol.for("react.portal"),
                REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
                REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
                REACT_PROFILER_TYPE = Symbol.for("react.profiler");
              Symbol.for("react.provider");
              var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
                REACT_CONTEXT_TYPE = Symbol.for("react.context"),
                REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
                REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
                REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
                REACT_MEMO_TYPE = Symbol.for("react.memo"),
                REACT_LAZY_TYPE = Symbol.for("react.lazy"),
                REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
                REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
                ReactSharedInternals =
                  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
                hasOwnProperty = Object.prototype.hasOwnProperty,
                isArrayImpl = Array.isArray,
                createTask = console.createTask
                  ? console.createTask
                  : function () {
                      return null;
                    };
              React = {
                "react-stack-bottom-frame": function (callStackForError) {
                  return callStackForError();
                },
              };
              var specialPropKeyWarningShown;
              var didWarnAboutElementRef = {};
              var unknownOwnerDebugStack = React[
                "react-stack-bottom-frame"
              ].bind(React, UnknownOwner)();
              var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
              var didWarnAboutKeySpread = {};
              exports.Fragment = REACT_FRAGMENT_TYPE;
              exports.jsxDEV = function (
                type,
                config,
                maybeKey,
                isStaticChildren,
                source,
                self,
              ) {
                var trackActualOwner =
                  1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
                return jsxDEVImpl(
                  type,
                  config,
                  maybeKey,
                  isStaticChildren,
                  source,
                  self,
                  trackActualOwner
                    ? Error("react-stack-top-frame")
                    : unknownOwnerDebugStack,
                  trackActualOwner
                    ? createTask(getTaskName(type))
                    : unknownOwnerDebugTask,
                );
              };
            })();
        }
      },
    "[project]/node_modules/react/jsx-dev-runtime.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          if (("TURBOPACK compile-time falsy", 0)) {
            ("TURBOPACK unreachable");
          } else {
            module.exports = __turbopack_context__.r(
              "[project]/node_modules/react/cjs/react-jsx-dev-runtime.development.js [client] (ecmascript)",
            );
          }
        }
      },
    "[project]/node_modules/scheduler/cjs/scheduler.development.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          /**
           * @license React
           * scheduler.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          "production" !== ("TURBOPACK compile-time value", "development") &&
            (function () {
              function performWorkUntilDeadline() {
                needsPaint = !1;
                if (isMessageLoopRunning) {
                  var currentTime = exports.unstable_now();
                  startTime = currentTime;
                  var hasMoreWork = !0;
                  try {
                    a: {
                      isHostCallbackScheduled = !1;
                      isHostTimeoutScheduled &&
                        ((isHostTimeoutScheduled = !1),
                        localClearTimeout(taskTimeoutID),
                        (taskTimeoutID = -1));
                      isPerformingWork = !0;
                      var previousPriorityLevel = currentPriorityLevel;
                      try {
                        b: {
                          advanceTimers(currentTime);
                          for (
                            currentTask = peek(taskQueue);
                            null !== currentTask &&
                            !(
                              currentTask.expirationTime > currentTime &&
                              shouldYieldToHost()
                            );

                          ) {
                            var callback = currentTask.callback;
                            if ("function" === typeof callback) {
                              currentTask.callback = null;
                              currentPriorityLevel = currentTask.priorityLevel;
                              var continuationCallback = callback(
                                currentTask.expirationTime <= currentTime,
                              );
                              currentTime = exports.unstable_now();
                              if ("function" === typeof continuationCallback) {
                                currentTask.callback = continuationCallback;
                                advanceTimers(currentTime);
                                hasMoreWork = !0;
                                break b;
                              }
                              currentTask === peek(taskQueue) && pop(taskQueue);
                              advanceTimers(currentTime);
                            } else pop(taskQueue);
                            currentTask = peek(taskQueue);
                          }
                          if (null !== currentTask) hasMoreWork = !0;
                          else {
                            var firstTimer = peek(timerQueue);
                            null !== firstTimer &&
                              requestHostTimeout(
                                handleTimeout,
                                firstTimer.startTime - currentTime,
                              );
                            hasMoreWork = !1;
                          }
                        }
                        break a;
                      } finally {
                        (currentTask = null),
                          (currentPriorityLevel = previousPriorityLevel),
                          (isPerformingWork = !1);
                      }
                      hasMoreWork = void 0;
                    }
                  } finally {
                    hasMoreWork
                      ? schedulePerformWorkUntilDeadline()
                      : (isMessageLoopRunning = !1);
                  }
                }
              }
              function push(heap, node) {
                var index = heap.length;
                heap.push(node);
                a: for (; 0 < index; ) {
                  var parentIndex = (index - 1) >>> 1,
                    parent = heap[parentIndex];
                  if (0 < compare(parent, node))
                    (heap[parentIndex] = node),
                      (heap[index] = parent),
                      (index = parentIndex);
                  else break a;
                }
              }
              function peek(heap) {
                return 0 === heap.length ? null : heap[0];
              }
              function pop(heap) {
                if (0 === heap.length) return null;
                var first = heap[0],
                  last = heap.pop();
                if (last !== first) {
                  heap[0] = last;
                  a: for (
                    var index = 0,
                      length = heap.length,
                      halfLength = length >>> 1;
                    index < halfLength;

                  ) {
                    var leftIndex = 2 * (index + 1) - 1,
                      left = heap[leftIndex],
                      rightIndex = leftIndex + 1,
                      right = heap[rightIndex];
                    if (0 > compare(left, last))
                      rightIndex < length && 0 > compare(right, left)
                        ? ((heap[index] = right),
                          (heap[rightIndex] = last),
                          (index = rightIndex))
                        : ((heap[index] = left),
                          (heap[leftIndex] = last),
                          (index = leftIndex));
                    else if (rightIndex < length && 0 > compare(right, last))
                      (heap[index] = right),
                        (heap[rightIndex] = last),
                        (index = rightIndex);
                    else break a;
                  }
                }
                return first;
              }
              function compare(a, b) {
                var diff = a.sortIndex - b.sortIndex;
                return 0 !== diff ? diff : a.id - b.id;
              }
              function advanceTimers(currentTime) {
                for (var timer = peek(timerQueue); null !== timer; ) {
                  if (null === timer.callback) pop(timerQueue);
                  else if (timer.startTime <= currentTime)
                    pop(timerQueue),
                      (timer.sortIndex = timer.expirationTime),
                      push(taskQueue, timer);
                  else break;
                  timer = peek(timerQueue);
                }
              }
              function handleTimeout(currentTime) {
                isHostTimeoutScheduled = !1;
                advanceTimers(currentTime);
                if (!isHostCallbackScheduled)
                  if (null !== peek(taskQueue))
                    (isHostCallbackScheduled = !0),
                      isMessageLoopRunning ||
                        ((isMessageLoopRunning = !0),
                        schedulePerformWorkUntilDeadline());
                  else {
                    var firstTimer = peek(timerQueue);
                    null !== firstTimer &&
                      requestHostTimeout(
                        handleTimeout,
                        firstTimer.startTime - currentTime,
                      );
                  }
              }
              function shouldYieldToHost() {
                return needsPaint
                  ? !0
                  : exports.unstable_now() - startTime < frameInterval
                    ? !1
                    : !0;
              }
              function requestHostTimeout(callback, ms) {
                taskTimeoutID = localSetTimeout(function () {
                  callback(exports.unstable_now());
                }, ms);
              }
              "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                "function" ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
                  Error(),
                );
              exports.unstable_now = void 0;
              if (
                "object" === typeof performance &&
                "function" === typeof performance.now
              ) {
                var localPerformance = performance;
                exports.unstable_now = function () {
                  return localPerformance.now();
                };
              } else {
                var localDate = Date,
                  initialTime = localDate.now();
                exports.unstable_now = function () {
                  return localDate.now() - initialTime;
                };
              }
              var taskQueue = [],
                timerQueue = [],
                taskIdCounter = 1,
                currentTask = null,
                currentPriorityLevel = 3,
                isPerformingWork = !1,
                isHostCallbackScheduled = !1,
                isHostTimeoutScheduled = !1,
                needsPaint = !1,
                localSetTimeout =
                  "function" === typeof setTimeout ? setTimeout : null,
                localClearTimeout =
                  "function" === typeof clearTimeout ? clearTimeout : null,
                localSetImmediate =
                  "undefined" !== typeof setImmediate ? setImmediate : null,
                isMessageLoopRunning = !1,
                taskTimeoutID = -1,
                frameInterval = 5,
                startTime = -1;
              if ("function" === typeof localSetImmediate)
                var schedulePerformWorkUntilDeadline = function () {
                  localSetImmediate(performWorkUntilDeadline);
                };
              else if ("undefined" !== typeof MessageChannel) {
                var channel = new MessageChannel(),
                  port = channel.port2;
                channel.port1.onmessage = performWorkUntilDeadline;
                schedulePerformWorkUntilDeadline = function () {
                  port.postMessage(null);
                };
              } else
                schedulePerformWorkUntilDeadline = function () {
                  localSetTimeout(performWorkUntilDeadline, 0);
                };
              exports.unstable_IdlePriority = 5;
              exports.unstable_ImmediatePriority = 1;
              exports.unstable_LowPriority = 4;
              exports.unstable_NormalPriority = 3;
              exports.unstable_Profiling = null;
              exports.unstable_UserBlockingPriority = 2;
              exports.unstable_cancelCallback = function (task) {
                task.callback = null;
              };
              exports.unstable_forceFrameRate = function (fps) {
                0 > fps || 125 < fps
                  ? console.error(
                      "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported",
                    )
                  : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
              };
              exports.unstable_getCurrentPriorityLevel = function () {
                return currentPriorityLevel;
              };
              exports.unstable_next = function (eventHandler) {
                switch (currentPriorityLevel) {
                  case 1:
                  case 2:
                  case 3:
                    var priorityLevel = 3;
                    break;
                  default:
                    priorityLevel = currentPriorityLevel;
                }
                var previousPriorityLevel = currentPriorityLevel;
                currentPriorityLevel = priorityLevel;
                try {
                  return eventHandler();
                } finally {
                  currentPriorityLevel = previousPriorityLevel;
                }
              };
              exports.unstable_requestPaint = function () {
                needsPaint = !0;
              };
              exports.unstable_runWithPriority = function (
                priorityLevel,
                eventHandler,
              ) {
                switch (priorityLevel) {
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                    break;
                  default:
                    priorityLevel = 3;
                }
                var previousPriorityLevel = currentPriorityLevel;
                currentPriorityLevel = priorityLevel;
                try {
                  return eventHandler();
                } finally {
                  currentPriorityLevel = previousPriorityLevel;
                }
              };
              exports.unstable_scheduleCallback = function (
                priorityLevel,
                callback,
                options,
              ) {
                var currentTime = exports.unstable_now();
                "object" === typeof options && null !== options
                  ? ((options = options.delay),
                    (options =
                      "number" === typeof options && 0 < options
                        ? currentTime + options
                        : currentTime))
                  : (options = currentTime);
                switch (priorityLevel) {
                  case 1:
                    var timeout = -1;
                    break;
                  case 2:
                    timeout = 250;
                    break;
                  case 5:
                    timeout = 1073741823;
                    break;
                  case 4:
                    timeout = 1e4;
                    break;
                  default:
                    timeout = 5e3;
                }
                timeout = options + timeout;
                priorityLevel = {
                  id: taskIdCounter++,
                  callback: callback,
                  priorityLevel: priorityLevel,
                  startTime: options,
                  expirationTime: timeout,
                  sortIndex: -1,
                };
                options > currentTime
                  ? ((priorityLevel.sortIndex = options),
                    push(timerQueue, priorityLevel),
                    null === peek(taskQueue) &&
                      priorityLevel === peek(timerQueue) &&
                      (isHostTimeoutScheduled
                        ? (localClearTimeout(taskTimeoutID),
                          (taskTimeoutID = -1))
                        : (isHostTimeoutScheduled = !0),
                      requestHostTimeout(handleTimeout, options - currentTime)))
                  : ((priorityLevel.sortIndex = timeout),
                    push(taskQueue, priorityLevel),
                    isHostCallbackScheduled ||
                      isPerformingWork ||
                      ((isHostCallbackScheduled = !0),
                      isMessageLoopRunning ||
                        ((isMessageLoopRunning = !0),
                        schedulePerformWorkUntilDeadline())));
                return priorityLevel;
              };
              exports.unstable_shouldYield = shouldYieldToHost;
              exports.unstable_wrapCallback = function (callback) {
                var parentPriorityLevel = currentPriorityLevel;
                return function () {
                  var previousPriorityLevel = currentPriorityLevel;
                  currentPriorityLevel = parentPriorityLevel;
                  try {
                    return callback.apply(this, arguments);
                  } finally {
                    currentPriorityLevel = previousPriorityLevel;
                  }
                };
              };
              "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                "function" ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
                  Error(),
                );
            })();
        }
      },
    "[project]/node_modules/scheduler/index.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          if (("TURBOPACK compile-time falsy", 0)) {
            ("TURBOPACK unreachable");
          } else {
            module.exports = __turbopack_context__.r(
              "[project]/node_modules/scheduler/cjs/scheduler.development.js [client] (ecmascript)",
            );
          }
        }
      },
    "[project]/node_modules/immer/dist/immer.mjs [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        // src/utils/env.ts
        __turbopack_context__.s({
          Immer: () => Immer2,
          applyPatches: () => applyPatches,
          castDraft: () => castDraft,
          castImmutable: () => castImmutable,
          createDraft: () => createDraft,
          current: () => current,
          enableMapSet: () => enableMapSet,
          enablePatches: () => enablePatches,
          finishDraft: () => finishDraft,
          freeze: () => freeze,
          immerable: () => DRAFTABLE,
          isDraft: () => isDraft,
          isDraftable: () => isDraftable,
          nothing: () => NOTHING,
          original: () => original,
          produce: () => produce,
          produceWithPatches: () => produceWithPatches,
          setAutoFreeze: () => setAutoFreeze,
          setUseStrictShallowCopy: () => setUseStrictShallowCopy,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
          );
        var NOTHING = Symbol.for("immer-nothing");
        var DRAFTABLE = Symbol.for("immer-draftable");
        var DRAFT_STATE = Symbol.for("immer-state");
        // src/utils/errors.ts
        var errors = ("TURBOPACK compile-time truthy", 1)
          ? [
              // All error codes, starting by 0:
              function (plugin) {
                return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \`enable${plugin}()\` when initializing your application.`;
              },
              function (thing) {
                return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;
              },
              "This object has been frozen and should not be mutated",
              function (data) {
                return (
                  "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " +
                  data
                );
              },
              "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
              "Immer forbids circular references",
              "The first or second argument to `produce` must be a function",
              "The third argument to `produce` must be a function or undefined",
              "First argument to `createDraft` must be a plain object, an array, or an immerable object",
              "First argument to `finishDraft` must be a draft returned by `createDraft`",
              function (thing) {
                return `'current' expects a draft, got: ${thing}`;
              },
              "Object.defineProperty() cannot be used on an Immer draft",
              "Object.setPrototypeOf() cannot be used on an Immer draft",
              "Immer only supports deleting array indices",
              "Immer only supports setting array indices and the 'length' property",
              function (thing) {
                return `'original' expects a draft, got: ${thing}`;
              },
            ]
          : ("TURBOPACK unreachable", undefined);
        function die(error, ...args) {
          if (("TURBOPACK compile-time truthy", 1)) {
            const e = errors[error];
            const msg = typeof e === "function" ? e.apply(null, args) : e;
            throw new Error(`[Immer] ${msg}`);
          }
          throw new Error(
            `[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`,
          );
        }
        // src/utils/common.ts
        var getPrototypeOf = Object.getPrototypeOf;
        function isDraft(value) {
          return !!value && !!value[DRAFT_STATE];
        }
        function isDraftable(value) {
          if (!value) return false;
          return (
            isPlainObject(value) ||
            Array.isArray(value) ||
            !!value[DRAFTABLE] ||
            !!value.constructor?.[DRAFTABLE] ||
            isMap(value) ||
            isSet(value)
          );
        }
        var objectCtorString = Object.prototype.constructor.toString();
        function isPlainObject(value) {
          if (!value || typeof value !== "object") return false;
          const proto = getPrototypeOf(value);
          if (proto === null) {
            return true;
          }
          const Ctor =
            Object.hasOwnProperty.call(proto, "constructor") &&
            proto.constructor;
          if (Ctor === Object) return true;
          return (
            typeof Ctor == "function" &&
            Function.toString.call(Ctor) === objectCtorString
          );
        }
        function original(value) {
          if (!isDraft(value)) die(15, value);
          return value[DRAFT_STATE].base_;
        }
        function each(obj, iter) {
          if (getArchtype(obj) === 0 /* Object */) {
            Reflect.ownKeys(obj).forEach((key) => {
              iter(key, obj[key], obj);
            });
          } else {
            obj.forEach((entry, index) => iter(index, entry, obj));
          }
        }
        function getArchtype(thing) {
          const state = thing[DRAFT_STATE];
          return state
            ? state.type_
            : Array.isArray(thing)
              ? 1 /* Array */
              : isMap(thing)
                ? 2 /* Map */
                : isSet(thing)
                  ? 3 /* Set */
                  : 0 /* Object */;
        }
        function has(thing, prop) {
          return getArchtype(thing) === 2 /* Map */
            ? thing.has(prop)
            : Object.prototype.hasOwnProperty.call(thing, prop);
        }
        function get(thing, prop) {
          return getArchtype(thing) === 2 /* Map */
            ? thing.get(prop)
            : thing[prop];
        }
        function set(thing, propOrOldValue, value) {
          const t = getArchtype(thing);
          if (t === 2 /* Map */) thing.set(propOrOldValue, value);
          else if (t === 3 /* Set */) {
            thing.add(value);
          } else thing[propOrOldValue] = value;
        }
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function isMap(target) {
          return target instanceof Map;
        }
        function isSet(target) {
          return target instanceof Set;
        }
        function latest(state) {
          return state.copy_ || state.base_;
        }
        function shallowCopy(base, strict) {
          if (isMap(base)) {
            return new Map(base);
          }
          if (isSet(base)) {
            return new Set(base);
          }
          if (Array.isArray(base)) return Array.prototype.slice.call(base);
          const isPlain = isPlainObject(base);
          if (strict === true || (strict === "class_only" && !isPlain)) {
            const descriptors = Object.getOwnPropertyDescriptors(base);
            delete descriptors[DRAFT_STATE];
            let keys = Reflect.ownKeys(descriptors);
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              const desc = descriptors[key];
              if (desc.writable === false) {
                desc.writable = true;
                desc.configurable = true;
              }
              if (desc.get || desc.set)
                descriptors[key] = {
                  configurable: true,
                  writable: true,
                  // could live with !!desc.set as well here...
                  enumerable: desc.enumerable,
                  value: base[key],
                };
            }
            return Object.create(getPrototypeOf(base), descriptors);
          } else {
            const proto = getPrototypeOf(base);
            if (proto !== null && isPlain) {
              return {
                ...base,
              };
            }
            const obj = Object.create(proto);
            return Object.assign(obj, base);
          }
        }
        function freeze(obj, deep = false) {
          if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;
          if (getArchtype(obj) > 1) {
            obj.set =
              obj.add =
              obj.clear =
              obj.delete =
                dontMutateFrozenCollections;
          }
          Object.freeze(obj);
          if (deep)
            Object.entries(obj).forEach(([key, value]) => freeze(value, true));
          return obj;
        }
        function dontMutateFrozenCollections() {
          die(2);
        }
        function isFrozen(obj) {
          return Object.isFrozen(obj);
        }
        // src/utils/plugins.ts
        var plugins = {};
        function getPlugin(pluginKey) {
          const plugin = plugins[pluginKey];
          if (!plugin) {
            die(0, pluginKey);
          }
          return plugin;
        }
        function loadPlugin(pluginKey, implementation) {
          if (!plugins[pluginKey]) plugins[pluginKey] = implementation;
        }
        // src/core/scope.ts
        var currentScope;
        function getCurrentScope() {
          return currentScope;
        }
        function createScope(parent_, immer_) {
          return {
            drafts_: [],
            parent_,
            immer_,
            // Whenever the modified draft contains a draft from another scope, we
            // need to prevent auto-freezing so the unowned draft can be finalized.
            canAutoFreeze_: true,
            unfinalizedDrafts_: 0,
          };
        }
        function usePatchesInScope(scope, patchListener) {
          if (patchListener) {
            getPlugin("Patches");
            scope.patches_ = [];
            scope.inversePatches_ = [];
            scope.patchListener_ = patchListener;
          }
        }
        function revokeScope(scope) {
          leaveScope(scope);
          scope.drafts_.forEach(revokeDraft);
          scope.drafts_ = null;
        }
        function leaveScope(scope) {
          if (scope === currentScope) {
            currentScope = scope.parent_;
          }
        }
        function enterScope(immer2) {
          return (currentScope = createScope(currentScope, immer2));
        }
        function revokeDraft(draft) {
          const state = draft[DRAFT_STATE];
          if (state.type_ === 0 /* Object */ || state.type_ === 1 /* Array */)
            state.revoke_();
          else state.revoked_ = true;
        }
        // src/core/finalize.ts
        function processResult(result, scope) {
          scope.unfinalizedDrafts_ = scope.drafts_.length;
          const baseDraft = scope.drafts_[0];
          const isReplaced = result !== void 0 && result !== baseDraft;
          if (isReplaced) {
            if (baseDraft[DRAFT_STATE].modified_) {
              revokeScope(scope);
              die(4);
            }
            if (isDraftable(result)) {
              result = finalize(scope, result);
              if (!scope.parent_) maybeFreeze(scope, result);
            }
            if (scope.patches_) {
              getPlugin("Patches").generateReplacementPatches_(
                baseDraft[DRAFT_STATE].base_,
                result,
                scope.patches_,
                scope.inversePatches_,
              );
            }
          } else {
            result = finalize(scope, baseDraft, []);
          }
          revokeScope(scope);
          if (scope.patches_) {
            scope.patchListener_(scope.patches_, scope.inversePatches_);
          }
          return result !== NOTHING ? result : void 0;
        }
        function finalize(rootScope, value, path) {
          if (isFrozen(value)) return value;
          const state = value[DRAFT_STATE];
          if (!state) {
            each(value, (key, childValue) =>
              finalizeProperty(rootScope, state, value, key, childValue, path),
            );
            return value;
          }
          if (state.scope_ !== rootScope) return value;
          if (!state.modified_) {
            maybeFreeze(rootScope, state.base_, true);
            return state.base_;
          }
          if (!state.finalized_) {
            state.finalized_ = true;
            state.scope_.unfinalizedDrafts_--;
            const result = state.copy_;
            let resultEach = result;
            let isSet2 = false;
            if (state.type_ === 3 /* Set */) {
              resultEach = new Set(result);
              result.clear();
              isSet2 = true;
            }
            each(resultEach, (key, childValue) =>
              finalizeProperty(
                rootScope,
                state,
                result,
                key,
                childValue,
                path,
                isSet2,
              ),
            );
            maybeFreeze(rootScope, result, false);
            if (path && rootScope.patches_) {
              getPlugin("Patches").generatePatches_(
                state,
                path,
                rootScope.patches_,
                rootScope.inversePatches_,
              );
            }
          }
          return state.copy_;
        }
        function finalizeProperty(
          rootScope,
          parentState,
          targetObject,
          prop,
          childValue,
          rootPath,
          targetIsSet,
        ) {
          if (
            ("TURBOPACK compile-time value", "development") !== "production" &&
            childValue === targetObject
          )
            die(5);
          if (isDraft(childValue)) {
            const path =
              rootPath &&
              parentState &&
              parentState.type_ !== 3 /* Set */ && // Set objects are atomic since they have no keys.
              !has(parentState.assigned_, prop)
                ? rootPath.concat(prop)
                : void 0;
            const res = finalize(rootScope, childValue, path);
            set(targetObject, prop, res);
            if (isDraft(res)) {
              rootScope.canAutoFreeze_ = false;
            } else return;
          } else if (targetIsSet) {
            targetObject.add(childValue);
          }
          if (isDraftable(childValue) && !isFrozen(childValue)) {
            if (
              !rootScope.immer_.autoFreeze_ &&
              rootScope.unfinalizedDrafts_ < 1
            ) {
              return;
            }
            finalize(rootScope, childValue);
            if (
              (!parentState || !parentState.scope_.parent_) &&
              typeof prop !== "symbol" &&
              Object.prototype.propertyIsEnumerable.call(targetObject, prop)
            )
              maybeFreeze(rootScope, childValue);
          }
        }
        function maybeFreeze(scope, value, deep = false) {
          if (
            !scope.parent_ &&
            scope.immer_.autoFreeze_ &&
            scope.canAutoFreeze_
          ) {
            freeze(value, deep);
          }
        }
        // src/core/proxy.ts
        function createProxyProxy(base, parent) {
          const isArray = Array.isArray(base);
          const state = {
            type_: isArray ? 1 /* Array */ : 0 /* Object */,
            // Track which produce call this is associated with.
            scope_: parent ? parent.scope_ : getCurrentScope(),
            // True for both shallow and deep changes.
            modified_: false,
            // Used during finalization.
            finalized_: false,
            // Track which properties have been assigned (true) or deleted (false).
            assigned_: {},
            // The parent draft state.
            parent_: parent,
            // The base state.
            base_: base,
            // The base proxy.
            draft_: null,
            // set below
            // The base copy with any updated values.
            copy_: null,
            // Called by the `produce` function.
            revoke_: null,
            isManual_: false,
          };
          let target = state;
          let traps = objectTraps;
          if (isArray) {
            target = [state];
            traps = arrayTraps;
          }
          const { revoke, proxy } = Proxy.revocable(target, traps);
          state.draft_ = proxy;
          state.revoke_ = revoke;
          return proxy;
        }
        var objectTraps = {
          get(state, prop) {
            if (prop === DRAFT_STATE) return state;
            const source = latest(state);
            if (!has(source, prop)) {
              return readPropFromProto(state, source, prop);
            }
            const value = source[prop];
            if (state.finalized_ || !isDraftable(value)) {
              return value;
            }
            if (value === peek(state.base_, prop)) {
              prepareCopy(state);
              return (state.copy_[prop] = createProxy(value, state));
            }
            return value;
          },
          has(state, prop) {
            return prop in latest(state);
          },
          ownKeys(state) {
            return Reflect.ownKeys(latest(state));
          },
          set(state, prop, value) {
            const desc = getDescriptorFromProto(latest(state), prop);
            if (desc?.set) {
              desc.set.call(state.draft_, value);
              return true;
            }
            if (!state.modified_) {
              const current2 = peek(latest(state), prop);
              const currentState = current2?.[DRAFT_STATE];
              if (currentState && currentState.base_ === value) {
                state.copy_[prop] = value;
                state.assigned_[prop] = false;
                return true;
              }
              if (
                is(value, current2) &&
                (value !== void 0 || has(state.base_, prop))
              )
                return true;
              prepareCopy(state);
              markChanged(state);
            }
            if (
              (state.copy_[prop] === value && // special case: handle new props with value 'undefined'
                (value !== void 0 || prop in state.copy_)) || // special case: NaN
              (Number.isNaN(value) && Number.isNaN(state.copy_[prop]))
            )
              return true;
            state.copy_[prop] = value;
            state.assigned_[prop] = true;
            return true;
          },
          deleteProperty(state, prop) {
            if (peek(state.base_, prop) !== void 0 || prop in state.base_) {
              state.assigned_[prop] = false;
              prepareCopy(state);
              markChanged(state);
            } else {
              delete state.assigned_[prop];
            }
            if (state.copy_) {
              delete state.copy_[prop];
            }
            return true;
          },
          // Note: We never coerce `desc.value` into an Immer draft, because we can't make
          // the same guarantee in ES5 mode.
          getOwnPropertyDescriptor(state, prop) {
            const owner = latest(state);
            const desc = Reflect.getOwnPropertyDescriptor(owner, prop);
            if (!desc) return desc;
            return {
              writable: true,
              configurable: state.type_ !== 1 /* Array */ || prop !== "length",
              enumerable: desc.enumerable,
              value: owner[prop],
            };
          },
          defineProperty() {
            die(11);
          },
          getPrototypeOf(state) {
            return getPrototypeOf(state.base_);
          },
          setPrototypeOf() {
            die(12);
          },
        };
        var arrayTraps = {};
        each(objectTraps, (key, fn) => {
          arrayTraps[key] = function () {
            arguments[0] = arguments[0][0];
            return fn.apply(this, arguments);
          };
        });
        arrayTraps.deleteProperty = function (state, prop) {
          if (
            ("TURBOPACK compile-time value", "development") !== "production" &&
            isNaN(parseInt(prop))
          )
            die(13);
          return arrayTraps.set.call(this, state, prop, void 0);
        };
        arrayTraps.set = function (state, prop, value) {
          if (
            ("TURBOPACK compile-time value", "development") !== "production" &&
            prop !== "length" &&
            isNaN(parseInt(prop))
          )
            die(14);
          return objectTraps.set.call(this, state[0], prop, value, state[0]);
        };
        function peek(draft, prop) {
          const state = draft[DRAFT_STATE];
          const source = state ? latest(state) : draft;
          return source[prop];
        }
        function readPropFromProto(state, source, prop) {
          const desc = getDescriptorFromProto(source, prop);
          return desc
            ? `value` in desc
              ? desc.value // This is a very special case, if the prop is a getter defined by the
              : // prototype, we should invoke it with the draft as context!
                desc.get?.call(state.draft_)
            : void 0;
        }
        function getDescriptorFromProto(source, prop) {
          if (!(prop in source)) return void 0;
          let proto = getPrototypeOf(source);
          while (proto) {
            const desc = Object.getOwnPropertyDescriptor(proto, prop);
            if (desc) return desc;
            proto = getPrototypeOf(proto);
          }
          return void 0;
        }
        function markChanged(state) {
          if (!state.modified_) {
            state.modified_ = true;
            if (state.parent_) {
              markChanged(state.parent_);
            }
          }
        }
        function prepareCopy(state) {
          if (!state.copy_) {
            state.copy_ = shallowCopy(
              state.base_,
              state.scope_.immer_.useStrictShallowCopy_,
            );
          }
        }
        // src/core/immerClass.ts
        var Immer2 = class {
          constructor(config) {
            this.autoFreeze_ = true;
            this.useStrictShallowCopy_ = false;
            /**
             * The `produce` function takes a value and a "recipe function" (whose
             * return value often depends on the base state). The recipe function is
             * free to mutate its first argument however it wants. All mutations are
             * only ever applied to a __copy__ of the base state.
             *
             * Pass only a function to create a "curried producer" which relieves you
             * from passing the recipe function every time.
             *
             * Only plain objects and arrays are made mutable. All other objects are
             * considered uncopyable.
             *
             * Note: This function is __bound__ to its `Immer` instance.
             *
             * @param {any} base - the initial state
             * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified
             * @param {Function} patchListener - optional function that will be called with all the patches produced here
             * @returns {any} a new state, or the initial state if nothing was modified
             */ this.produce = (base, recipe, patchListener) => {
              if (typeof base === "function" && typeof recipe !== "function") {
                const defaultBase = recipe;
                recipe = base;
                const self = this;
                return function curriedProduce(base2 = defaultBase, ...args) {
                  return self.produce(base2, (draft) =>
                    recipe.call(this, draft, ...args),
                  );
                };
              }
              if (typeof recipe !== "function") die(6);
              if (
                patchListener !== void 0 &&
                typeof patchListener !== "function"
              )
                die(7);
              let result;
              if (isDraftable(base)) {
                const scope = enterScope(this);
                const proxy = createProxy(base, void 0);
                let hasError = true;
                try {
                  result = recipe(proxy);
                  hasError = false;
                } finally {
                  if (hasError) revokeScope(scope);
                  else leaveScope(scope);
                }
                usePatchesInScope(scope, patchListener);
                return processResult(result, scope);
              } else if (!base || typeof base !== "object") {
                result = recipe(base);
                if (result === void 0) result = base;
                if (result === NOTHING) result = void 0;
                if (this.autoFreeze_) freeze(result, true);
                if (patchListener) {
                  const p = [];
                  const ip = [];
                  getPlugin("Patches").generateReplacementPatches_(
                    base,
                    result,
                    p,
                    ip,
                  );
                  patchListener(p, ip);
                }
                return result;
              } else die(1, base);
            };
            this.produceWithPatches = (base, recipe) => {
              if (typeof base === "function") {
                return (state, ...args) =>
                  this.produceWithPatches(state, (draft) =>
                    base(draft, ...args),
                  );
              }
              let patches, inversePatches;
              const result = this.produce(base, recipe, (p, ip) => {
                patches = p;
                inversePatches = ip;
              });
              return [result, patches, inversePatches];
            };
            if (typeof config?.autoFreeze === "boolean")
              this.setAutoFreeze(config.autoFreeze);
            if (typeof config?.useStrictShallowCopy === "boolean")
              this.setUseStrictShallowCopy(config.useStrictShallowCopy);
          }
          createDraft(base) {
            if (!isDraftable(base)) die(8);
            if (isDraft(base)) base = current(base);
            const scope = enterScope(this);
            const proxy = createProxy(base, void 0);
            proxy[DRAFT_STATE].isManual_ = true;
            leaveScope(scope);
            return proxy;
          }
          finishDraft(draft, patchListener) {
            const state = draft && draft[DRAFT_STATE];
            if (!state || !state.isManual_) die(9);
            const { scope_: scope } = state;
            usePatchesInScope(scope, patchListener);
            return processResult(void 0, scope);
          }
          /**
           * Pass true to automatically freeze all copies created by Immer.
           *
           * By default, auto-freezing is enabled.
           */ setAutoFreeze(value) {
            this.autoFreeze_ = value;
          }
          /**
           * Pass true to enable strict shallow copy.
           *
           * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
           */ setUseStrictShallowCopy(value) {
            this.useStrictShallowCopy_ = value;
          }
          applyPatches(base, patches) {
            let i;
            for (i = patches.length - 1; i >= 0; i--) {
              const patch = patches[i];
              if (patch.path.length === 0 && patch.op === "replace") {
                base = patch.value;
                break;
              }
            }
            if (i > -1) {
              patches = patches.slice(i + 1);
            }
            const applyPatchesImpl = getPlugin("Patches").applyPatches_;
            if (isDraft(base)) {
              return applyPatchesImpl(base, patches);
            }
            return this.produce(base, (draft) =>
              applyPatchesImpl(draft, patches),
            );
          }
        };
        function createProxy(value, parent) {
          const draft = isMap(value)
            ? getPlugin("MapSet").proxyMap_(value, parent)
            : isSet(value)
              ? getPlugin("MapSet").proxySet_(value, parent)
              : createProxyProxy(value, parent);
          const scope = parent ? parent.scope_ : getCurrentScope();
          scope.drafts_.push(draft);
          return draft;
        }
        // src/core/current.ts
        function current(value) {
          if (!isDraft(value)) die(10, value);
          return currentImpl(value);
        }
        function currentImpl(value) {
          if (!isDraftable(value) || isFrozen(value)) return value;
          const state = value[DRAFT_STATE];
          let copy;
          if (state) {
            if (!state.modified_) return state.base_;
            state.finalized_ = true;
            copy = shallowCopy(
              value,
              state.scope_.immer_.useStrictShallowCopy_,
            );
          } else {
            copy = shallowCopy(value, true);
          }
          each(copy, (key, childValue) => {
            set(copy, key, currentImpl(childValue));
          });
          if (state) {
            state.finalized_ = false;
          }
          return copy;
        }
        // src/plugins/patches.ts
        function enablePatches() {
          const errorOffset = 16;
          if (("TURBOPACK compile-time truthy", 1)) {
            errors.push(
              'Sets cannot have "replace" patches.',
              function (op) {
                return "Unsupported patch operation: " + op;
              },
              function (path) {
                return "Cannot apply patch, path doesn't resolve: " + path;
              },
              "Patching reserved attributes like __proto__, prototype and constructor is not allowed",
            );
          }
          const REPLACE = "replace";
          const ADD = "add";
          const REMOVE = "remove";
          function generatePatches_(state, basePath, patches, inversePatches) {
            switch (state.type_) {
              case 0 /* Object */:
              case 2 /* Map */:
                return generatePatchesFromAssigned(
                  state,
                  basePath,
                  patches,
                  inversePatches,
                );
              case 1 /* Array */:
                return generateArrayPatches(
                  state,
                  basePath,
                  patches,
                  inversePatches,
                );
              case 3 /* Set */:
                return generateSetPatches(
                  state,
                  basePath,
                  patches,
                  inversePatches,
                );
            }
          }
          function generateArrayPatches(
            state,
            basePath,
            patches,
            inversePatches,
          ) {
            let { base_, assigned_ } = state;
            let copy_ = state.copy_;
            if (copy_.length < base_.length) {
              [base_, copy_] = [copy_, base_];
              [patches, inversePatches] = [inversePatches, patches];
            }
            for (let i = 0; i < base_.length; i++) {
              if (assigned_[i] && copy_[i] !== base_[i]) {
                const path = basePath.concat([i]);
                patches.push({
                  op: REPLACE,
                  path,
                  // Need to maybe clone it, as it can in fact be the original value
                  // due to the base/copy inversion at the start of this function
                  value: clonePatchValueIfNeeded(copy_[i]),
                });
                inversePatches.push({
                  op: REPLACE,
                  path,
                  value: clonePatchValueIfNeeded(base_[i]),
                });
              }
            }
            for (let i = base_.length; i < copy_.length; i++) {
              const path = basePath.concat([i]);
              patches.push({
                op: ADD,
                path,
                // Need to maybe clone it, as it can in fact be the original value
                // due to the base/copy inversion at the start of this function
                value: clonePatchValueIfNeeded(copy_[i]),
              });
            }
            for (let i = copy_.length - 1; base_.length <= i; --i) {
              const path = basePath.concat([i]);
              inversePatches.push({
                op: REMOVE,
                path,
              });
            }
          }
          function generatePatchesFromAssigned(
            state,
            basePath,
            patches,
            inversePatches,
          ) {
            const { base_, copy_ } = state;
            each(state.assigned_, (key, assignedValue) => {
              const origValue = get(base_, key);
              const value = get(copy_, key);
              const op = !assignedValue
                ? REMOVE
                : has(base_, key)
                  ? REPLACE
                  : ADD;
              if (origValue === value && op === REPLACE) return;
              const path = basePath.concat(key);
              patches.push(
                op === REMOVE
                  ? {
                      op,
                      path,
                    }
                  : {
                      op,
                      path,
                      value,
                    },
              );
              inversePatches.push(
                op === ADD
                  ? {
                      op: REMOVE,
                      path,
                    }
                  : op === REMOVE
                    ? {
                        op: ADD,
                        path,
                        value: clonePatchValueIfNeeded(origValue),
                      }
                    : {
                        op: REPLACE,
                        path,
                        value: clonePatchValueIfNeeded(origValue),
                      },
              );
            });
          }
          function generateSetPatches(
            state,
            basePath,
            patches,
            inversePatches,
          ) {
            let { base_, copy_ } = state;
            let i = 0;
            base_.forEach((value) => {
              if (!copy_.has(value)) {
                const path = basePath.concat([i]);
                patches.push({
                  op: REMOVE,
                  path,
                  value,
                });
                inversePatches.unshift({
                  op: ADD,
                  path,
                  value,
                });
              }
              i++;
            });
            i = 0;
            copy_.forEach((value) => {
              if (!base_.has(value)) {
                const path = basePath.concat([i]);
                patches.push({
                  op: ADD,
                  path,
                  value,
                });
                inversePatches.unshift({
                  op: REMOVE,
                  path,
                  value,
                });
              }
              i++;
            });
          }
          function generateReplacementPatches_(
            baseValue,
            replacement,
            patches,
            inversePatches,
          ) {
            patches.push({
              op: REPLACE,
              path: [],
              value: replacement === NOTHING ? void 0 : replacement,
            });
            inversePatches.push({
              op: REPLACE,
              path: [],
              value: baseValue,
            });
          }
          function applyPatches_(draft, patches) {
            patches.forEach((patch) => {
              const { path, op } = patch;
              let base = draft;
              for (let i = 0; i < path.length - 1; i++) {
                const parentType = getArchtype(base);
                let p = path[i];
                if (typeof p !== "string" && typeof p !== "number") {
                  p = "" + p;
                }
                if (
                  (parentType === 0 /* Object */ ||
                    parentType === 1) /* Array */ &&
                  (p === "__proto__" || p === "constructor")
                )
                  die(errorOffset + 3);
                if (typeof base === "function" && p === "prototype")
                  die(errorOffset + 3);
                base = get(base, p);
                if (typeof base !== "object")
                  die(errorOffset + 2, path.join("/"));
              }
              const type = getArchtype(base);
              const value = deepClonePatchValue(patch.value);
              const key = path[path.length - 1];
              switch (op) {
                case REPLACE:
                  switch (type) {
                    case 2 /* Map */:
                      return base.set(key, value);
                    case 3 /* Set */:
                      die(errorOffset);
                    default:
                      return (base[key] = value);
                  }
                case ADD:
                  switch (type) {
                    case 1 /* Array */:
                      return key === "-"
                        ? base.push(value)
                        : base.splice(key, 0, value);
                    case 2 /* Map */:
                      return base.set(key, value);
                    case 3 /* Set */:
                      return base.add(value);
                    default:
                      return (base[key] = value);
                  }
                case REMOVE:
                  switch (type) {
                    case 1 /* Array */:
                      return base.splice(key, 1);
                    case 2 /* Map */:
                      return base.delete(key);
                    case 3 /* Set */:
                      return base.delete(patch.value);
                    default:
                      return delete base[key];
                  }
                default:
                  die(errorOffset + 1, op);
              }
            });
            return draft;
          }
          function deepClonePatchValue(obj) {
            if (!isDraftable(obj)) return obj;
            if (Array.isArray(obj)) return obj.map(deepClonePatchValue);
            if (isMap(obj))
              return new Map(
                Array.from(obj.entries()).map(([k, v]) => [
                  k,
                  deepClonePatchValue(v),
                ]),
              );
            if (isSet(obj))
              return new Set(Array.from(obj).map(deepClonePatchValue));
            const cloned = Object.create(getPrototypeOf(obj));
            for (const key in obj) cloned[key] = deepClonePatchValue(obj[key]);
            if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];
            return cloned;
          }
          function clonePatchValueIfNeeded(obj) {
            if (isDraft(obj)) {
              return deepClonePatchValue(obj);
            } else return obj;
          }
          loadPlugin("Patches", {
            applyPatches_,
            generatePatches_,
            generateReplacementPatches_,
          });
        }
        // src/plugins/mapset.ts
        function enableMapSet() {
          class DraftMap extends Map {
            constructor(target, parent) {
              super();
              this[DRAFT_STATE] = {
                type_: 2 /* Map */,
                parent_: parent,
                scope_: parent ? parent.scope_ : getCurrentScope(),
                modified_: false,
                finalized_: false,
                copy_: void 0,
                assigned_: void 0,
                base_: target,
                draft_: this,
                isManual_: false,
                revoked_: false,
              };
            }
            get size() {
              return latest(this[DRAFT_STATE]).size;
            }
            has(key) {
              return latest(this[DRAFT_STATE]).has(key);
            }
            set(key, value) {
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              if (!latest(state).has(key) || latest(state).get(key) !== value) {
                prepareMapCopy(state);
                markChanged(state);
                state.assigned_.set(key, true);
                state.copy_.set(key, value);
                state.assigned_.set(key, true);
              }
              return this;
            }
            delete(key) {
              if (!this.has(key)) {
                return false;
              }
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              prepareMapCopy(state);
              markChanged(state);
              if (state.base_.has(key)) {
                state.assigned_.set(key, false);
              } else {
                state.assigned_.delete(key);
              }
              state.copy_.delete(key);
              return true;
            }
            clear() {
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              if (latest(state).size) {
                prepareMapCopy(state);
                markChanged(state);
                state.assigned_ = /* @__PURE__ */ new Map();
                each(state.base_, (key) => {
                  state.assigned_.set(key, false);
                });
                state.copy_.clear();
              }
            }
            forEach(cb, thisArg) {
              const state = this[DRAFT_STATE];
              latest(state).forEach((_value, key, _map) => {
                cb.call(thisArg, this.get(key), key, this);
              });
            }
            get(key) {
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              const value = latest(state).get(key);
              if (state.finalized_ || !isDraftable(value)) {
                return value;
              }
              if (value !== state.base_.get(key)) {
                return value;
              }
              const draft = createProxy(value, state);
              prepareMapCopy(state);
              state.copy_.set(key, draft);
              return draft;
            }
            keys() {
              return latest(this[DRAFT_STATE]).keys();
            }
            values() {
              const iterator = this.keys();
              return {
                [Symbol.iterator]: () => this.values(),
                next: () => {
                  const r = iterator.next();
                  if (r.done) return r;
                  const value = this.get(r.value);
                  return {
                    done: false,
                    value,
                  };
                },
              };
            }
            entries() {
              const iterator = this.keys();
              return {
                [Symbol.iterator]: () => this.entries(),
                next: () => {
                  const r = iterator.next();
                  if (r.done) return r;
                  const value = this.get(r.value);
                  return {
                    done: false,
                    value: [r.value, value],
                  };
                },
              };
            }
            [(DRAFT_STATE, Symbol.iterator)]() {
              return this.entries();
            }
          }
          function proxyMap_(target, parent) {
            return new DraftMap(target, parent);
          }
          function prepareMapCopy(state) {
            if (!state.copy_) {
              state.assigned_ = /* @__PURE__ */ new Map();
              state.copy_ = new Map(state.base_);
            }
          }
          class DraftSet extends Set {
            constructor(target, parent) {
              super();
              this[DRAFT_STATE] = {
                type_: 3 /* Set */,
                parent_: parent,
                scope_: parent ? parent.scope_ : getCurrentScope(),
                modified_: false,
                finalized_: false,
                copy_: void 0,
                base_: target,
                draft_: this,
                drafts_: /* @__PURE__ */ new Map(),
                revoked_: false,
                isManual_: false,
              };
            }
            get size() {
              return latest(this[DRAFT_STATE]).size;
            }
            has(value) {
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              if (!state.copy_) {
                return state.base_.has(value);
              }
              if (state.copy_.has(value)) return true;
              if (
                state.drafts_.has(value) &&
                state.copy_.has(state.drafts_.get(value))
              )
                return true;
              return false;
            }
            add(value) {
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              if (!this.has(value)) {
                prepareSetCopy(state);
                markChanged(state);
                state.copy_.add(value);
              }
              return this;
            }
            delete(value) {
              if (!this.has(value)) {
                return false;
              }
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              prepareSetCopy(state);
              markChanged(state);
              return (
                state.copy_.delete(value) ||
                (state.drafts_.has(value)
                  ? state.copy_.delete(state.drafts_.get(value))
                  : /* istanbul ignore next */ false)
              );
            }
            clear() {
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              if (latest(state).size) {
                prepareSetCopy(state);
                markChanged(state);
                state.copy_.clear();
              }
            }
            values() {
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              prepareSetCopy(state);
              return state.copy_.values();
            }
            entries() {
              const state = this[DRAFT_STATE];
              assertUnrevoked(state);
              prepareSetCopy(state);
              return state.copy_.entries();
            }
            keys() {
              return this.values();
            }
            [(DRAFT_STATE, Symbol.iterator)]() {
              return this.values();
            }
            forEach(cb, thisArg) {
              const iterator = this.values();
              let result = iterator.next();
              while (!result.done) {
                cb.call(thisArg, result.value, result.value, this);
                result = iterator.next();
              }
            }
          }
          function proxySet_(target, parent) {
            return new DraftSet(target, parent);
          }
          function prepareSetCopy(state) {
            if (!state.copy_) {
              state.copy_ = /* @__PURE__ */ new Set();
              state.base_.forEach((value) => {
                if (isDraftable(value)) {
                  const draft = createProxy(value, state);
                  state.drafts_.set(value, draft);
                  state.copy_.add(draft);
                } else {
                  state.copy_.add(value);
                }
              });
            }
          }
          function assertUnrevoked(state) {
            if (state.revoked_) die(3, JSON.stringify(latest(state)));
          }
          loadPlugin("MapSet", {
            proxyMap_,
            proxySet_,
          });
        }
        // src/immer.ts
        var immer = new Immer2();
        var produce = immer.produce;
        var produceWithPatches = immer.produceWithPatches.bind(immer);
        var setAutoFreeze = immer.setAutoFreeze.bind(immer);
        var setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);
        var applyPatches = immer.applyPatches.bind(immer);
        var createDraft = immer.createDraft.bind(immer);
        var finishDraft = immer.finishDraft.bind(immer);
        function castDraft(value) {
          return value;
        }
        function castImmutable(value) {
          return value;
        }
        //# sourceMappingURL=immer.mjs.map
      }
    },
    "[project]/node_modules/reselect/dist/reselect.mjs [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        // src/devModeChecks/identityFunctionCheck.ts
        __turbopack_context__.s({
          createSelector: () => createSelector,
          createSelectorCreator: () => createSelectorCreator,
          createStructuredSelector: () => createStructuredSelector,
          lruMemoize: () => lruMemoize,
          referenceEqualityCheck: () => referenceEqualityCheck,
          setGlobalDevModeChecks: () => setGlobalDevModeChecks,
          unstable_autotrackMemoize: () => autotrackMemoize,
          weakMapMemoize: () => weakMapMemoize,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
          );
        var runIdentityFunctionCheck = (
          resultFunc,
          inputSelectorsResults,
          outputSelectorResult,
        ) => {
          if (
            inputSelectorsResults.length === 1 &&
            inputSelectorsResults[0] === outputSelectorResult
          ) {
            let isInputSameAsOutput = false;
            try {
              const emptyObject = {};
              if (resultFunc(emptyObject) === emptyObject)
                isInputSameAsOutput = true;
            } catch {}
            if (isInputSameAsOutput) {
              let stack = void 0;
              try {
                throw new Error();
              } catch (e) {
                ({ stack } = e);
              }
              console.warn(
                "The result function returned its own inputs without modification. e.g\n`createSelector([state => state.todos], todos => todos)`\nThis could lead to inefficient memoization and unnecessary re-renders.\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.",
                {
                  stack,
                },
              );
            }
          }
        };
        // src/devModeChecks/inputStabilityCheck.ts
        var runInputStabilityCheck = (
          inputSelectorResultsObject,
          options,
          inputSelectorArgs,
        ) => {
          const { memoize, memoizeOptions } = options;
          const { inputSelectorResults, inputSelectorResultsCopy } =
            inputSelectorResultsObject;
          const createAnEmptyObject = memoize(() => ({}), ...memoizeOptions);
          const areInputSelectorResultsEqual =
            createAnEmptyObject.apply(null, inputSelectorResults) ===
            createAnEmptyObject.apply(null, inputSelectorResultsCopy);
          if (!areInputSelectorResultsEqual) {
            let stack = void 0;
            try {
              throw new Error();
            } catch (e) {
              ({ stack } = e);
            }
            console.warn(
              "An input selector returned a different result when passed same arguments.\nThis means your output selector will likely run more frequently than intended.\nAvoid returning a new reference inside your input selector, e.g.\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`",
              {
                arguments: inputSelectorArgs,
                firstInputs: inputSelectorResults,
                secondInputs: inputSelectorResultsCopy,
                stack,
              },
            );
          }
        };
        // src/devModeChecks/setGlobalDevModeChecks.ts
        var globalDevModeChecks = {
          inputStabilityCheck: "once",
          identityFunctionCheck: "once",
        };
        var setGlobalDevModeChecks = (devModeChecks) => {
          Object.assign(globalDevModeChecks, devModeChecks);
        };
        // src/utils.ts
        var NOT_FOUND = /* @__PURE__ */ Symbol("NOT_FOUND");
        function assertIsFunction(
          func,
          errorMessage = `expected a function, instead received ${typeof func}`,
        ) {
          if (typeof func !== "function") {
            throw new TypeError(errorMessage);
          }
        }
        function assertIsObject(
          object,
          errorMessage = `expected an object, instead received ${typeof object}`,
        ) {
          if (typeof object !== "object") {
            throw new TypeError(errorMessage);
          }
        }
        function assertIsArrayOfFunctions(
          array,
          errorMessage = `expected all items to be functions, instead received the following types: `,
        ) {
          if (!array.every((item) => typeof item === "function")) {
            const itemTypes = array
              .map((item) =>
                typeof item === "function"
                  ? `function ${item.name || "unnamed"}()`
                  : typeof item,
              )
              .join(", ");
            throw new TypeError(`${errorMessage}[${itemTypes}]`);
          }
        }
        var ensureIsArray = (item) => {
          return Array.isArray(item) ? item : [item];
        };
        function getDependencies(createSelectorArgs) {
          const dependencies = Array.isArray(createSelectorArgs[0])
            ? createSelectorArgs[0]
            : createSelectorArgs;
          assertIsArrayOfFunctions(
            dependencies,
            `createSelector expects all input-selectors to be functions, but received the following types: `,
          );
          return dependencies;
        }
        function collectInputSelectorResults(dependencies, inputSelectorArgs) {
          const inputSelectorResults = [];
          const { length } = dependencies;
          for (let i = 0; i < length; i++) {
            inputSelectorResults.push(
              dependencies[i].apply(null, inputSelectorArgs),
            );
          }
          return inputSelectorResults;
        }
        var getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {
          const { identityFunctionCheck, inputStabilityCheck } = {
            ...globalDevModeChecks,
            ...devModeChecks,
          };
          return {
            identityFunctionCheck: {
              shouldRun:
                identityFunctionCheck === "always" ||
                (identityFunctionCheck === "once" && firstRun),
              run: runIdentityFunctionCheck,
            },
            inputStabilityCheck: {
              shouldRun:
                inputStabilityCheck === "always" ||
                (inputStabilityCheck === "once" && firstRun),
              run: runInputStabilityCheck,
            },
          };
        };
        // src/autotrackMemoize/autotracking.ts
        var $REVISION = 0;
        var CURRENT_TRACKER = null;
        var Cell = class {
          revision = $REVISION;
          _value;
          _lastValue;
          _isEqual = tripleEq;
          constructor(initialValue, isEqual = tripleEq) {
            this._value = this._lastValue = initialValue;
            this._isEqual = isEqual;
          }
          // Whenever a storage value is read, it'll add itself to the current tracker if
          // one exists, entangling its state with that cache.
          get value() {
            CURRENT_TRACKER?.add(this);
            return this._value;
          }
          // Whenever a storage value is updated, we bump the global revision clock,
          // assign the revision for this storage to the new value, _and_ we schedule a
          // rerender. This is important, and it's what makes autotracking  _pull_
          // based. We don't actively tell the caches which depend on the storage that
          // anything has happened. Instead, we recompute the caches when needed.
          set value(newValue) {
            if (this.value === newValue) return;
            this._value = newValue;
            this.revision = ++$REVISION;
          }
        };
        function tripleEq(a, b) {
          return a === b;
        }
        var TrackingCache = class {
          _cachedValue;
          _cachedRevision = -1;
          _deps = [];
          hits = 0;
          fn;
          constructor(fn) {
            this.fn = fn;
          }
          clear() {
            this._cachedValue = void 0;
            this._cachedRevision = -1;
            this._deps = [];
            this.hits = 0;
          }
          get value() {
            if (this.revision > this._cachedRevision) {
              const { fn } = this;
              const currentTracker = /* @__PURE__ */ new Set();
              const prevTracker = CURRENT_TRACKER;
              CURRENT_TRACKER = currentTracker;
              this._cachedValue = fn();
              CURRENT_TRACKER = prevTracker;
              this.hits++;
              this._deps = Array.from(currentTracker);
              this._cachedRevision = this.revision;
            }
            CURRENT_TRACKER?.add(this);
            return this._cachedValue;
          }
          get revision() {
            return Math.max(...this._deps.map((d) => d.revision), 0);
          }
        };
        function getValue(cell) {
          if (!(cell instanceof Cell)) {
            console.warn("Not a valid cell! ", cell);
          }
          return cell.value;
        }
        function setValue(storage, value) {
          if (!(storage instanceof Cell)) {
            throw new TypeError(
              "setValue must be passed a tracked store created with `createStorage`.",
            );
          }
          storage.value = storage._lastValue = value;
        }
        function createCell(initialValue, isEqual = tripleEq) {
          return new Cell(initialValue, isEqual);
        }
        function createCache(fn) {
          assertIsFunction(
            fn,
            "the first parameter to `createCache` must be a function",
          );
          return new TrackingCache(fn);
        }
        // src/autotrackMemoize/tracking.ts
        var neverEq = (a, b) => false;
        function createTag() {
          return createCell(null, neverEq);
        }
        function dirtyTag(tag, value) {
          setValue(tag, value);
        }
        var consumeCollection = (node) => {
          let tag = node.collectionTag;
          if (tag === null) {
            tag = node.collectionTag = createTag();
          }
          getValue(tag);
        };
        var dirtyCollection = (node) => {
          const tag = node.collectionTag;
          if (tag !== null) {
            dirtyTag(tag, null);
          }
        };
        // src/autotrackMemoize/proxy.ts
        var REDUX_PROXY_LABEL = Symbol();
        var nextId = 0;
        var proto = Object.getPrototypeOf({});
        var ObjectTreeNode = class {
          constructor(value) {
            this.value = value;
            this.value = value;
            this.tag.value = value;
          }
          proxy = new Proxy(this, objectProxyHandler);
          tag = createTag();
          tags = {};
          children = {};
          collectionTag = null;
          id = nextId++;
        };
        var objectProxyHandler = {
          get(node, key) {
            function calculateResult() {
              const { value } = node;
              const childValue = Reflect.get(value, key);
              if (typeof key === "symbol") {
                return childValue;
              }
              if (key in proto) {
                return childValue;
              }
              if (typeof childValue === "object" && childValue !== null) {
                let childNode = node.children[key];
                if (childNode === void 0) {
                  childNode = node.children[key] = createNode(childValue);
                }
                if (childNode.tag) {
                  getValue(childNode.tag);
                }
                return childNode.proxy;
              } else {
                let tag = node.tags[key];
                if (tag === void 0) {
                  tag = node.tags[key] = createTag();
                  tag.value = childValue;
                }
                getValue(tag);
                return childValue;
              }
            }
            const res = calculateResult();
            return res;
          },
          ownKeys(node) {
            consumeCollection(node);
            return Reflect.ownKeys(node.value);
          },
          getOwnPropertyDescriptor(node, prop) {
            return Reflect.getOwnPropertyDescriptor(node.value, prop);
          },
          has(node, prop) {
            return Reflect.has(node.value, prop);
          },
        };
        var ArrayTreeNode = class {
          constructor(value) {
            this.value = value;
            this.value = value;
            this.tag.value = value;
          }
          proxy = new Proxy([this], arrayProxyHandler);
          tag = createTag();
          tags = {};
          children = {};
          collectionTag = null;
          id = nextId++;
        };
        var arrayProxyHandler = {
          get([node], key) {
            if (key === "length") {
              consumeCollection(node);
            }
            return objectProxyHandler.get(node, key);
          },
          ownKeys([node]) {
            return objectProxyHandler.ownKeys(node);
          },
          getOwnPropertyDescriptor([node], prop) {
            return objectProxyHandler.getOwnPropertyDescriptor(node, prop);
          },
          has([node], prop) {
            return objectProxyHandler.has(node, prop);
          },
        };
        function createNode(value) {
          if (Array.isArray(value)) {
            return new ArrayTreeNode(value);
          }
          return new ObjectTreeNode(value);
        }
        function updateNode(node, newValue) {
          const { value, tags, children } = node;
          node.value = newValue;
          if (
            Array.isArray(value) &&
            Array.isArray(newValue) &&
            value.length !== newValue.length
          ) {
            dirtyCollection(node);
          } else {
            if (value !== newValue) {
              let oldKeysSize = 0;
              let newKeysSize = 0;
              let anyKeysAdded = false;
              for (const _key in value) {
                oldKeysSize++;
              }
              for (const key in newValue) {
                newKeysSize++;
                if (!(key in value)) {
                  anyKeysAdded = true;
                  break;
                }
              }
              const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize;
              if (isDifferent) {
                dirtyCollection(node);
              }
            }
          }
          for (const key in tags) {
            const childValue = value[key];
            const newChildValue = newValue[key];
            if (childValue !== newChildValue) {
              dirtyCollection(node);
              dirtyTag(tags[key], newChildValue);
            }
            if (typeof newChildValue === "object" && newChildValue !== null) {
              delete tags[key];
            }
          }
          for (const key in children) {
            const childNode = children[key];
            const newChildValue = newValue[key];
            const childValue = childNode.value;
            if (childValue === newChildValue) {
              continue;
            } else if (
              typeof newChildValue === "object" &&
              newChildValue !== null
            ) {
              updateNode(childNode, newChildValue);
            } else {
              deleteNode(childNode);
              delete children[key];
            }
          }
        }
        function deleteNode(node) {
          if (node.tag) {
            dirtyTag(node.tag, null);
          }
          dirtyCollection(node);
          for (const key in node.tags) {
            dirtyTag(node.tags[key], null);
          }
          for (const key in node.children) {
            deleteNode(node.children[key]);
          }
        }
        // src/lruMemoize.ts
        function createSingletonCache(equals) {
          let entry;
          return {
            get(key) {
              if (entry && equals(entry.key, key)) {
                return entry.value;
              }
              return NOT_FOUND;
            },
            put(key, value) {
              entry = {
                key,
                value,
              };
            },
            getEntries() {
              return entry ? [entry] : [];
            },
            clear() {
              entry = void 0;
            },
          };
        }
        function createLruCache(maxSize, equals) {
          let entries = [];
          function get(key) {
            const cacheIndex = entries.findIndex((entry) =>
              equals(key, entry.key),
            );
            if (cacheIndex > -1) {
              const entry = entries[cacheIndex];
              if (cacheIndex > 0) {
                entries.splice(cacheIndex, 1);
                entries.unshift(entry);
              }
              return entry.value;
            }
            return NOT_FOUND;
          }
          function put(key, value) {
            if (get(key) === NOT_FOUND) {
              entries.unshift({
                key,
                value,
              });
              if (entries.length > maxSize) {
                entries.pop();
              }
            }
          }
          function getEntries() {
            return entries;
          }
          function clear() {
            entries = [];
          }
          return {
            get,
            put,
            getEntries,
            clear,
          };
        }
        var referenceEqualityCheck = (a, b) => a === b;
        function createCacheKeyComparator(equalityCheck) {
          return function areArgumentsShallowlyEqual(prev, next) {
            if (prev === null || next === null || prev.length !== next.length) {
              return false;
            }
            const { length } = prev;
            for (let i = 0; i < length; i++) {
              if (!equalityCheck(prev[i], next[i])) {
                return false;
              }
            }
            return true;
          };
        }
        function lruMemoize(func, equalityCheckOrOptions) {
          const providedOptions =
            typeof equalityCheckOrOptions === "object"
              ? equalityCheckOrOptions
              : {
                  equalityCheck: equalityCheckOrOptions,
                };
          const {
            equalityCheck = referenceEqualityCheck,
            maxSize = 1,
            resultEqualityCheck,
          } = providedOptions;
          const comparator = createCacheKeyComparator(equalityCheck);
          let resultsCount = 0;
          const cache =
            maxSize <= 1
              ? createSingletonCache(comparator)
              : createLruCache(maxSize, comparator);
          function memoized() {
            let value = cache.get(arguments);
            if (value === NOT_FOUND) {
              value = func.apply(null, arguments);
              resultsCount++;
              if (resultEqualityCheck) {
                const entries = cache.getEntries();
                const matchingEntry = entries.find((entry) =>
                  resultEqualityCheck(entry.value, value),
                );
                if (matchingEntry) {
                  value = matchingEntry.value;
                  resultsCount !== 0 && resultsCount--;
                }
              }
              cache.put(arguments, value);
            }
            return value;
          }
          memoized.clearCache = () => {
            cache.clear();
            memoized.resetResultsCount();
          };
          memoized.resultsCount = () => resultsCount;
          memoized.resetResultsCount = () => {
            resultsCount = 0;
          };
          return memoized;
        }
        // src/autotrackMemoize/autotrackMemoize.ts
        function autotrackMemoize(func) {
          const node = createNode([]);
          let lastArgs = null;
          const shallowEqual = createCacheKeyComparator(referenceEqualityCheck);
          const cache = createCache(() => {
            const res = func.apply(null, node.proxy);
            return res;
          });
          function memoized() {
            if (!shallowEqual(lastArgs, arguments)) {
              updateNode(node, arguments);
              lastArgs = arguments;
            }
            return cache.value;
          }
          memoized.clearCache = () => {
            return cache.clear();
          };
          return memoized;
        }
        // src/weakMapMemoize.ts
        var StrongRef = class {
          constructor(value) {
            this.value = value;
          }
          deref() {
            return this.value;
          }
        };
        var Ref = typeof WeakRef !== "undefined" ? WeakRef : StrongRef;
        var UNTERMINATED = 0;
        var TERMINATED = 1;
        function createCacheNode() {
          return {
            s: UNTERMINATED,
            v: void 0,
            o: null,
            p: null,
          };
        }
        function weakMapMemoize(func, options = {}) {
          let fnNode = createCacheNode();
          const { resultEqualityCheck } = options;
          let lastResult;
          let resultsCount = 0;
          function memoized() {
            let cacheNode = fnNode;
            const { length } = arguments;
            for (let i = 0, l = length; i < l; i++) {
              const arg = arguments[i];
              if (
                typeof arg === "function" ||
                (typeof arg === "object" && arg !== null)
              ) {
                let objectCache = cacheNode.o;
                if (objectCache === null) {
                  cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
                }
                const objectNode = objectCache.get(arg);
                if (objectNode === void 0) {
                  cacheNode = createCacheNode();
                  objectCache.set(arg, cacheNode);
                } else {
                  cacheNode = objectNode;
                }
              } else {
                let primitiveCache = cacheNode.p;
                if (primitiveCache === null) {
                  cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
                }
                const primitiveNode = primitiveCache.get(arg);
                if (primitiveNode === void 0) {
                  cacheNode = createCacheNode();
                  primitiveCache.set(arg, cacheNode);
                } else {
                  cacheNode = primitiveNode;
                }
              }
            }
            const terminatedNode = cacheNode;
            let result;
            if (cacheNode.s === TERMINATED) {
              result = cacheNode.v;
            } else {
              result = func.apply(null, arguments);
              resultsCount++;
              if (resultEqualityCheck) {
                const lastResultValue = lastResult?.deref?.() ?? lastResult;
                if (
                  lastResultValue != null &&
                  resultEqualityCheck(lastResultValue, result)
                ) {
                  result = lastResultValue;
                  resultsCount !== 0 && resultsCount--;
                }
                const needsWeakRef =
                  (typeof result === "object" && result !== null) ||
                  typeof result === "function";
                lastResult = needsWeakRef ? new Ref(result) : result;
              }
            }
            terminatedNode.s = TERMINATED;
            terminatedNode.v = result;
            return result;
          }
          memoized.clearCache = () => {
            fnNode = createCacheNode();
            memoized.resetResultsCount();
          };
          memoized.resultsCount = () => resultsCount;
          memoized.resetResultsCount = () => {
            resultsCount = 0;
          };
          return memoized;
        }
        // src/createSelectorCreator.ts
        function createSelectorCreator(
          memoizeOrOptions,
          ...memoizeOptionsFromArgs
        ) {
          const createSelectorCreatorOptions =
            typeof memoizeOrOptions === "function"
              ? {
                  memoize: memoizeOrOptions,
                  memoizeOptions: memoizeOptionsFromArgs,
                }
              : memoizeOrOptions;
          const createSelector2 = (...createSelectorArgs) => {
            let recomputations = 0;
            let dependencyRecomputations = 0;
            let lastResult;
            let directlyPassedOptions = {};
            let resultFunc = createSelectorArgs.pop();
            if (typeof resultFunc === "object") {
              directlyPassedOptions = resultFunc;
              resultFunc = createSelectorArgs.pop();
            }
            assertIsFunction(
              resultFunc,
              `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`,
            );
            const combinedOptions = {
              ...createSelectorCreatorOptions,
              ...directlyPassedOptions,
            };
            const {
              memoize,
              memoizeOptions = [],
              argsMemoize = weakMapMemoize,
              argsMemoizeOptions = [],
              devModeChecks = {},
            } = combinedOptions;
            const finalMemoizeOptions = ensureIsArray(memoizeOptions);
            const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
            const dependencies = getDependencies(createSelectorArgs);
            const memoizedResultFunc = memoize(
              function recomputationWrapper() {
                recomputations++;
                return resultFunc.apply(null, arguments);
              },
              ...finalMemoizeOptions,
            );
            let firstRun = true;
            const selector = argsMemoize(
              function dependenciesChecker() {
                dependencyRecomputations++;
                const inputSelectorResults = collectInputSelectorResults(
                  dependencies,
                  arguments,
                );
                lastResult = memoizedResultFunc.apply(
                  null,
                  inputSelectorResults,
                );
                if (("TURBOPACK compile-time truthy", 1)) {
                  const { identityFunctionCheck, inputStabilityCheck } =
                    getDevModeChecksExecutionInfo(firstRun, devModeChecks);
                  if (identityFunctionCheck.shouldRun) {
                    identityFunctionCheck.run(
                      resultFunc,
                      inputSelectorResults,
                      lastResult,
                    );
                  }
                  if (inputStabilityCheck.shouldRun) {
                    const inputSelectorResultsCopy =
                      collectInputSelectorResults(dependencies, arguments);
                    inputStabilityCheck.run(
                      {
                        inputSelectorResults,
                        inputSelectorResultsCopy,
                      },
                      {
                        memoize,
                        memoizeOptions: finalMemoizeOptions,
                      },
                      arguments,
                    );
                  }
                  if (firstRun) firstRun = false;
                }
                return lastResult;
              },
              ...finalArgsMemoizeOptions,
            );
            return Object.assign(selector, {
              resultFunc,
              memoizedResultFunc,
              dependencies,
              dependencyRecomputations: () => dependencyRecomputations,
              resetDependencyRecomputations: () => {
                dependencyRecomputations = 0;
              },
              lastResult: () => lastResult,
              recomputations: () => recomputations,
              resetRecomputations: () => {
                recomputations = 0;
              },
              memoize,
              argsMemoize,
            });
          };
          Object.assign(createSelector2, {
            withTypes: () => createSelector2,
          });
          return createSelector2;
        }
        var createSelector =
          /* @__PURE__ */ createSelectorCreator(weakMapMemoize);
        // src/createStructuredSelector.ts
        var createStructuredSelector = Object.assign(
          (inputSelectorsObject, selectorCreator = createSelector) => {
            assertIsObject(
              inputSelectorsObject,
              `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`,
            );
            const inputSelectorKeys = Object.keys(inputSelectorsObject);
            const dependencies = inputSelectorKeys.map(
              (key) => inputSelectorsObject[key],
            );
            const structuredSelector = selectorCreator(
              dependencies,
              (...inputSelectorResults) => {
                return inputSelectorResults.reduce(
                  (composition, value, index) => {
                    composition[inputSelectorKeys[index]] = value;
                    return composition;
                  },
                  {},
                );
              },
            );
            return structuredSelector;
          },
          {
            withTypes: () => createStructuredSelector,
          },
        );
        //# sourceMappingURL=reselect.mjs.map
      }
    },
    "[project]/node_modules/redux/dist/redux.mjs [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        // src/utils/formatProdErrorMessage.ts
        __turbopack_context__.s({
          __DO_NOT_USE__ActionTypes: () => actionTypes_default,
          applyMiddleware: () => applyMiddleware,
          bindActionCreators: () => bindActionCreators,
          combineReducers: () => combineReducers,
          compose: () => compose,
          createStore: () => createStore,
          isAction: () => isAction,
          isPlainObject: () => isPlainObject,
          legacy_createStore: () => legacy_createStore,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
          );
        function formatProdErrorMessage(code) {
          return `Minified Redux error #${code}; visit https://redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
        }
        // src/utils/symbol-observable.ts
        var $$observable = /* @__PURE__ */ (() =>
          (typeof Symbol === "function" && Symbol.observable) ||
          "@@observable")();
        var symbol_observable_default = $$observable;
        // src/utils/actionTypes.ts
        var randomString = () =>
          Math.random().toString(36).substring(7).split("").join(".");
        var ActionTypes = {
          INIT: `@@redux/INIT${randomString()}`,
          REPLACE: `@@redux/REPLACE${randomString()}`,
          PROBE_UNKNOWN_ACTION: () =>
            `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`,
        };
        var actionTypes_default = ActionTypes;
        // src/utils/isPlainObject.ts
        function isPlainObject(obj) {
          if (typeof obj !== "object" || obj === null) return false;
          let proto = obj;
          while (Object.getPrototypeOf(proto) !== null) {
            proto = Object.getPrototypeOf(proto);
          }
          return (
            Object.getPrototypeOf(obj) === proto ||
            Object.getPrototypeOf(obj) === null
          );
        }
        // src/utils/kindOf.ts
        function miniKindOf(val) {
          if (val === void 0) return "undefined";
          if (val === null) return "null";
          const type = typeof val;
          switch (type) {
            case "boolean":
            case "string":
            case "number":
            case "symbol":
            case "function": {
              return type;
            }
          }
          if (Array.isArray(val)) return "array";
          if (isDate(val)) return "date";
          if (isError(val)) return "error";
          const constructorName = ctorName(val);
          switch (constructorName) {
            case "Symbol":
            case "Promise":
            case "WeakMap":
            case "WeakSet":
            case "Map":
            case "Set":
              return constructorName;
          }
          return Object.prototype.toString
            .call(val)
            .slice(8, -1)
            .toLowerCase()
            .replace(/\s/g, "");
        }
        function ctorName(val) {
          return typeof val.constructor === "function"
            ? val.constructor.name
            : null;
        }
        function isError(val) {
          return (
            val instanceof Error ||
            (typeof val.message === "string" &&
              val.constructor &&
              typeof val.constructor.stackTraceLimit === "number")
          );
        }
        function isDate(val) {
          if (val instanceof Date) return true;
          return (
            typeof val.toDateString === "function" &&
            typeof val.getDate === "function" &&
            typeof val.setDate === "function"
          );
        }
        function kindOf(val) {
          let typeOfVal = typeof val;
          if (("TURBOPACK compile-time truthy", 1)) {
            typeOfVal = miniKindOf(val);
          }
          return typeOfVal;
        }
        // src/createStore.ts
        function createStore(reducer, preloadedState, enhancer) {
          if (typeof reducer !== "function") {
            throw new Error(
              ("TURBOPACK compile-time falsy", 0)
                ? ("TURBOPACK unreachable", undefined)
                : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer)}'`,
            );
          }
          if (
            (typeof preloadedState === "function" &&
              typeof enhancer === "function") ||
            (typeof enhancer === "function" &&
              typeof arguments[3] === "function")
          ) {
            throw new Error(
              ("TURBOPACK compile-time falsy", 0)
                ? ("TURBOPACK unreachable", undefined)
                : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.",
            );
          }
          if (
            typeof preloadedState === "function" &&
            typeof enhancer === "undefined"
          ) {
            enhancer = preloadedState;
            preloadedState = void 0;
          }
          if (typeof enhancer !== "undefined") {
            if (typeof enhancer !== "function") {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`,
              );
            }
            return enhancer(createStore)(reducer, preloadedState);
          }
          let currentReducer = reducer;
          let currentState = preloadedState;
          let currentListeners = /* @__PURE__ */ new Map();
          let nextListeners = currentListeners;
          let listenerIdCounter = 0;
          let isDispatching = false;
          function ensureCanMutateNextListeners() {
            if (nextListeners === currentListeners) {
              nextListeners = /* @__PURE__ */ new Map();
              currentListeners.forEach((listener, key) => {
                nextListeners.set(key, listener);
              });
            }
          }
          function getState() {
            if (isDispatching) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.",
              );
            }
            return currentState;
          }
          function subscribe(listener) {
            if (typeof listener !== "function") {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : `Expected the listener to be a function. Instead, received: '${kindOf(listener)}'`,
              );
            }
            if (isDispatching) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.",
              );
            }
            let isSubscribed = true;
            ensureCanMutateNextListeners();
            const listenerId = listenerIdCounter++;
            nextListeners.set(listenerId, listener);
            return function unsubscribe() {
              if (!isSubscribed) {
                return;
              }
              if (isDispatching) {
                throw new Error(
                  ("TURBOPACK compile-time falsy", 0)
                    ? ("TURBOPACK unreachable", undefined)
                    : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.",
                );
              }
              isSubscribed = false;
              ensureCanMutateNextListeners();
              nextListeners.delete(listenerId);
              currentListeners = null;
            };
          }
          function dispatch(action) {
            if (!isPlainObject(action)) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`,
              );
            }
            if (typeof action.type === "undefined") {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.',
              );
            }
            if (typeof action.type !== "string") {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : `Action "type" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`,
              );
            }
            if (isDispatching) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "Reducers may not dispatch actions.",
              );
            }
            try {
              isDispatching = true;
              currentState = currentReducer(currentState, action);
            } finally {
              isDispatching = false;
            }
            const listeners = (currentListeners = nextListeners);
            listeners.forEach((listener) => {
              listener();
            });
            return action;
          }
          function replaceReducer(nextReducer) {
            if (typeof nextReducer !== "function") {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`,
              );
            }
            currentReducer = nextReducer;
            dispatch({
              type: actionTypes_default.REPLACE,
            });
          }
          function observable() {
            const outerSubscribe = subscribe;
            return {
              /**
               * The minimal observable subscription method.
               * @param observer Any object that can be used as an observer.
               * The observer object should have a `next` method.
               * @returns An object with an `unsubscribe` method that can
               * be used to unsubscribe the observable from the store, and prevent further
               * emission of values from the observable.
               */ subscribe(observer) {
                if (typeof observer !== "object" || observer === null) {
                  throw new Error(
                    ("TURBOPACK compile-time falsy", 0)
                      ? ("TURBOPACK unreachable", undefined)
                      : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`,
                  );
                }
                function observeState() {
                  const observerAsObserver = observer;
                  if (observerAsObserver.next) {
                    observerAsObserver.next(getState());
                  }
                }
                observeState();
                const unsubscribe = outerSubscribe(observeState);
                return {
                  unsubscribe,
                };
              },
              [symbol_observable_default]() {
                return this;
              },
            };
          }
          dispatch({
            type: actionTypes_default.INIT,
          });
          const store = {
            dispatch,
            subscribe,
            getState,
            replaceReducer,
            [symbol_observable_default]: observable,
          };
          return store;
        }
        function legacy_createStore(reducer, preloadedState, enhancer) {
          return createStore(reducer, preloadedState, enhancer);
        }
        // src/utils/warning.ts
        function warning(message) {
          if (
            typeof console !== "undefined" &&
            typeof console.error === "function"
          ) {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (e) {}
        }
        // src/combineReducers.ts
        function getUnexpectedStateShapeWarningMessage(
          inputState,
          reducers,
          action,
          unexpectedKeyCache,
        ) {
          const reducerKeys = Object.keys(reducers);
          const argumentName =
            action && action.type === actionTypes_default.INIT
              ? "preloadedState argument passed to createStore"
              : "previous state received by the reducer";
          if (reducerKeys.length === 0) {
            return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
          }
          if (!isPlainObject(inputState)) {
            return `The ${argumentName} has unexpected type of "${kindOf(inputState)}". Expected argument to be an object with the following keys: "${reducerKeys.join('", "')}"`;
          }
          const unexpectedKeys = Object.keys(inputState).filter(
            (key) => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key],
          );
          unexpectedKeys.forEach((key) => {
            unexpectedKeyCache[key] = true;
          });
          if (action && action.type === actionTypes_default.REPLACE) return;
          if (unexpectedKeys.length > 0) {
            return `Unexpected ${unexpectedKeys.length > 1 ? "keys" : "key"} "${unexpectedKeys.join('", "')}" found in ${argumentName}. Expected to find one of the known reducer keys instead: "${reducerKeys.join('", "')}". Unexpected keys will be ignored.`;
          }
        }
        function assertReducerShape(reducers) {
          Object.keys(reducers).forEach((key) => {
            const reducer = reducers[key];
            const initialState = reducer(void 0, {
              type: actionTypes_default.INIT,
            });
            if (typeof initialState === "undefined") {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : `The slice reducer for key "${key}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`,
              );
            }
            if (
              typeof reducer(void 0, {
                type: actionTypes_default.PROBE_UNKNOWN_ACTION(),
              }) === "undefined"
            ) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : `The slice reducer for key "${key}" returned undefined when probed with a random type. Don't try to handle '${actionTypes_default.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`,
              );
            }
          });
        }
        function combineReducers(reducers) {
          const reducerKeys = Object.keys(reducers);
          const finalReducers = {};
          for (let i = 0; i < reducerKeys.length; i++) {
            const key = reducerKeys[i];
            if (("TURBOPACK compile-time truthy", 1)) {
              if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
              }
            }
            if (typeof reducers[key] === "function") {
              finalReducers[key] = reducers[key];
            }
          }
          const finalReducerKeys = Object.keys(finalReducers);
          let unexpectedKeyCache;
          if (
            ("TURBOPACK compile-time value", "development") !== "production"
          ) {
            unexpectedKeyCache = {};
          }
          let shapeAssertionError;
          try {
            assertReducerShape(finalReducers);
          } catch (e) {
            shapeAssertionError = e;
          }
          return function combination(state = {}, action) {
            if (shapeAssertionError) {
              throw shapeAssertionError;
            }
            if (("TURBOPACK compile-time truthy", 1)) {
              const warningMessage = getUnexpectedStateShapeWarningMessage(
                state,
                finalReducers,
                action,
                unexpectedKeyCache,
              );
              if (warningMessage) {
                warning(warningMessage);
              }
            }
            let hasChanged = false;
            const nextState = {};
            for (let i = 0; i < finalReducerKeys.length; i++) {
              const key = finalReducerKeys[i];
              const reducer = finalReducers[key];
              const previousStateForKey = state[key];
              const nextStateForKey = reducer(previousStateForKey, action);
              if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(
                  ("TURBOPACK compile-time falsy", 0)
                    ? ("TURBOPACK unreachable", undefined)
                    : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`,
                );
              }
              nextState[key] = nextStateForKey;
              hasChanged =
                hasChanged || nextStateForKey !== previousStateForKey;
            }
            hasChanged =
              hasChanged ||
              finalReducerKeys.length !== Object.keys(state).length;
            return hasChanged ? nextState : state;
          };
        }
        // src/bindActionCreators.ts
        function bindActionCreator(actionCreator, dispatch) {
          return function (...args) {
            return dispatch(actionCreator.apply(this, args));
          };
        }
        function bindActionCreators(actionCreators, dispatch) {
          if (typeof actionCreators === "function") {
            return bindActionCreator(actionCreators, dispatch);
          }
          if (typeof actionCreators !== "object" || actionCreators === null) {
            throw new Error(
              ("TURBOPACK compile-time falsy", 0)
                ? ("TURBOPACK unreachable", undefined)
                : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`,
            );
          }
          const boundActionCreators = {};
          for (const key in actionCreators) {
            const actionCreator = actionCreators[key];
            if (typeof actionCreator === "function") {
              boundActionCreators[key] = bindActionCreator(
                actionCreator,
                dispatch,
              );
            }
          }
          return boundActionCreators;
        }
        // src/compose.ts
        function compose(...funcs) {
          if (funcs.length === 0) {
            return (arg) => arg;
          }
          if (funcs.length === 1) {
            return funcs[0];
          }
          return funcs.reduce(
            (a, b) =>
              (...args) =>
                a(b(...args)),
          );
        }
        // src/applyMiddleware.ts
        function applyMiddleware(...middlewares) {
          return (createStore2) => (reducer, preloadedState) => {
            const store = createStore2(reducer, preloadedState);
            let dispatch = () => {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.",
              );
            };
            const middlewareAPI = {
              getState: store.getState,
              dispatch: (action, ...args) => dispatch(action, ...args),
            };
            const chain = middlewares.map((middleware) =>
              middleware(middlewareAPI),
            );
            dispatch = compose(...chain)(store.dispatch);
            return {
              ...store,
              dispatch,
            };
          };
        }
        // src/utils/isAction.ts
        function isAction(action) {
          return (
            isPlainObject(action) &&
            "type" in action &&
            typeof action.type === "string"
          );
        }
        //# sourceMappingURL=redux.mjs.map
      }
    },
    "[project]/node_modules/redux-thunk/dist/redux-thunk.mjs [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          // src/index.ts
          __turbopack_context__.s({
            thunk: () => thunk,
            withExtraArgument: () => withExtraArgument,
          });
          function createThunkMiddleware(extraArgument) {
            const middleware =
              ({ dispatch, getState }) =>
              (next) =>
              (action) => {
                if (typeof action === "function") {
                  return action(dispatch, getState, extraArgument);
                }
                return next(action);
              };
            return middleware;
          }
          var thunk = createThunkMiddleware();
          var withExtraArgument = createThunkMiddleware;
        }
      },
    "[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [client] (ecmascript) <locals>":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          // src/index.ts
          __turbopack_context__.s({
            ReducerType: () => ReducerType,
            SHOULD_AUTOBATCH: () => SHOULD_AUTOBATCH,
            TaskAbortError: () => TaskAbortError,
            Tuple: () => Tuple,
            addListener: () => addListener,
            asyncThunkCreator: () => asyncThunkCreator,
            autoBatchEnhancer: () => autoBatchEnhancer,
            buildCreateSlice: () => buildCreateSlice,
            clearAllListeners: () => clearAllListeners,
            combineSlices: () => combineSlices,
            configureStore: () => configureStore,
            createAction: () => createAction,
            createActionCreatorInvariantMiddleware: () =>
              createActionCreatorInvariantMiddleware,
            createAsyncThunk: () => createAsyncThunk,
            createDraftSafeSelector: () => createDraftSafeSelector,
            createDraftSafeSelectorCreator: () =>
              createDraftSafeSelectorCreator,
            createDynamicMiddleware: () => createDynamicMiddleware,
            createEntityAdapter: () => createEntityAdapter,
            createImmutableStateInvariantMiddleware: () =>
              createImmutableStateInvariantMiddleware,
            createListenerMiddleware: () => createListenerMiddleware,
            createReducer: () => createReducer,
            createSerializableStateInvariantMiddleware: () =>
              createSerializableStateInvariantMiddleware,
            createSlice: () => createSlice,
            findNonSerializableValue: () => findNonSerializableValue,
            formatProdErrorMessage: () => formatProdErrorMessage,
            isActionCreator: () => isActionCreator,
            isAllOf: () => isAllOf,
            isAnyOf: () => isAnyOf,
            isAsyncThunkAction: () => isAsyncThunkAction,
            isFluxStandardAction: () => isFSA,
            isFulfilled: () => isFulfilled,
            isImmutableDefault: () => isImmutableDefault,
            isPending: () => isPending,
            isPlain: () => isPlain,
            isRejected: () => isRejected,
            isRejectedWithValue: () => isRejectedWithValue,
            miniSerializeError: () => miniSerializeError,
            nanoid: () => nanoid,
            prepareAutoBatched: () => prepareAutoBatched,
            removeListener: () => removeListener,
            unwrapResult: () => unwrapResult,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          // src/createDraftSafeSelector.ts
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/immer/dist/immer.mjs [client] (ecmascript)",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/reselect/dist/reselect.mjs [client] (ecmascript)",
            );
          // src/configureStore.ts
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/redux/dist/redux.mjs [client] (ecmascript)",
            );
          // src/getDefaultMiddleware.ts
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/redux-thunk/dist/redux-thunk.mjs [client] (ecmascript)",
            );
          var createDraftSafeSelectorCreator = (...args) => {
            const createSelector2 = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "createSelectorCreator"
            ])(...args);
            const createDraftSafeSelector2 = Object.assign(
              (...args2) => {
                const selector = createSelector2(...args2);
                const wrappedSelector = (value, ...rest) =>
                  selector(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                      "isDraft"
                    ])(value)
                      ? (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                          "current"
                        ])(value)
                      : value,
                    ...rest,
                  );
                Object.assign(wrappedSelector, selector);
                return wrappedSelector;
              },
              {
                withTypes: () => createDraftSafeSelector2,
              },
            );
            return createDraftSafeSelector2;
          };
          var createDraftSafeSelector =
            /* @__PURE__ */ createDraftSafeSelectorCreator(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "weakMapMemoize"
              ],
            );
          var composeWithDevTools =
            typeof window !== "undefined" &&
            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
              ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
              : function () {
                  if (arguments.length === 0) return void 0;
                  if (typeof arguments[0] === "object")
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                      "compose"
                    ];
                  return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                    "compose"
                  ].apply(null, arguments);
                };
          var devToolsEnhancer =
            typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__
              ? window.__REDUX_DEVTOOLS_EXTENSION__
              : function () {
                  return function (noop3) {
                    return noop3;
                  };
                };
          // src/tsHelpers.ts
          var hasMatchFunction = (v) => {
            return v && typeof v.match === "function";
          };
          // src/createAction.ts
          function createAction(type, prepareAction) {
            function actionCreator(...args) {
              if (prepareAction) {
                let prepared = prepareAction(...args);
                if (!prepared) {
                  throw new Error(
                    ("TURBOPACK compile-time falsy", 0)
                      ? ("TURBOPACK unreachable", undefined)
                      : "prepareAction did not return an object",
                  );
                }
                return {
                  type,
                  payload: prepared.payload,
                  ...("meta" in prepared && {
                    meta: prepared.meta,
                  }),
                  ...("error" in prepared && {
                    error: prepared.error,
                  }),
                };
              }
              return {
                type,
                payload: args[0],
              };
            }
            actionCreator.toString = () => `${type}`;
            actionCreator.type = type;
            actionCreator.match = (action) =>
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "isAction"
              ])(action) && action.type === type;
            return actionCreator;
          }
          function isActionCreator(action) {
            return (
              typeof action === "function" &&
              "type" in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it
              hasMatchFunction(action)
            );
          }
          function isFSA(action) {
            return (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "isAction"
              ])(action) && Object.keys(action).every(isValidKey)
            );
          }
          function isValidKey(key) {
            return ["type", "payload", "error", "meta"].indexOf(key) > -1;
          }
          // src/actionCreatorInvariantMiddleware.ts
          function getMessage(type) {
            const splitType = type ? `${type}`.split("/") : [];
            const actionName =
              splitType[splitType.length - 1] || "actionCreator";
            return `Detected an action creator with type "${type || "unknown"}" being dispatched. 
Make sure you're calling the action creator before dispatching, i.e. \`dispatch(${actionName}())\` instead of \`dispatch(${actionName})\`. This is necessary even if the action has no payload.`;
          }
          function createActionCreatorInvariantMiddleware(options = {}) {
            if (("TURBOPACK compile-time falsy", 0)) {
              ("TURBOPACK unreachable");
            }
            const { isActionCreator: isActionCreator2 = isActionCreator } =
              options;
            return () => (next) => (action) => {
              if (isActionCreator2(action)) {
                console.warn(getMessage(action.type));
              }
              return next(action);
            };
          }
          function getTimeMeasureUtils(maxDelay, fnName) {
            let elapsed = 0;
            return {
              measureTime(fn) {
                const started = Date.now();
                try {
                  return fn();
                } finally {
                  const finished = Date.now();
                  elapsed += finished - started;
                }
              },
              warnIfExceeded() {
                if (elapsed > maxDelay) {
                  console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.`);
                }
              },
            };
          }
          var Tuple = class _Tuple extends Array {
            constructor(...items) {
              super(...items);
              Object.setPrototypeOf(this, _Tuple.prototype);
            }
            static get [Symbol.species]() {
              return _Tuple;
            }
            concat(...arr) {
              return super.concat.apply(this, arr);
            }
            prepend(...arr) {
              if (arr.length === 1 && Array.isArray(arr[0])) {
                return new _Tuple(...arr[0].concat(this));
              }
              return new _Tuple(...arr.concat(this));
            }
          };
          function freezeDraftable(val) {
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "isDraftable"
            ])(val)
              ? (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                  "produce"
                ])(val, () => {})
              : val;
          }
          function getOrInsertComputed(map, key, compute) {
            if (map.has(key)) return map.get(key);
            return map.set(key, compute(key)).get(key);
          }
          // src/immutableStateInvariantMiddleware.ts
          function isImmutableDefault(value) {
            return (
              typeof value !== "object" ||
              value == null ||
              Object.isFrozen(value)
            );
          }
          function trackForMutations(isImmutable, ignorePaths, obj) {
            const trackedProperties = trackProperties(
              isImmutable,
              ignorePaths,
              obj,
            );
            return {
              detectMutations() {
                return detectMutations(
                  isImmutable,
                  ignorePaths,
                  trackedProperties,
                  obj,
                );
              },
            };
          }
          function trackProperties(
            isImmutable,
            ignorePaths = [],
            obj,
            path = "",
            checkedObjects = /* @__PURE__ */ new Set(),
          ) {
            const tracked = {
              value: obj,
            };
            if (!isImmutable(obj) && !checkedObjects.has(obj)) {
              checkedObjects.add(obj);
              tracked.children = {};
              for (const key in obj) {
                const childPath = path ? path + "." + key : key;
                if (
                  ignorePaths.length &&
                  ignorePaths.indexOf(childPath) !== -1
                ) {
                  continue;
                }
                tracked.children[key] = trackProperties(
                  isImmutable,
                  ignorePaths,
                  obj[key],
                  childPath,
                );
              }
            }
            return tracked;
          }
          function detectMutations(
            isImmutable,
            ignoredPaths = [],
            trackedProperty,
            obj,
            sameParentRef = false,
            path = "",
          ) {
            const prevObj = trackedProperty ? trackedProperty.value : void 0;
            const sameRef = prevObj === obj;
            if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
              return {
                wasMutated: true,
                path,
              };
            }
            if (isImmutable(prevObj) || isImmutable(obj)) {
              return {
                wasMutated: false,
              };
            }
            const keysToDetect = {};
            for (let key in trackedProperty.children) {
              keysToDetect[key] = true;
            }
            for (let key in obj) {
              keysToDetect[key] = true;
            }
            const hasIgnoredPaths = ignoredPaths.length > 0;
            for (let key in keysToDetect) {
              const nestedPath = path ? path + "." + key : key;
              if (hasIgnoredPaths) {
                const hasMatches = ignoredPaths.some((ignored) => {
                  if (ignored instanceof RegExp) {
                    return ignored.test(nestedPath);
                  }
                  return nestedPath === ignored;
                });
                if (hasMatches) {
                  continue;
                }
              }
              const result = detectMutations(
                isImmutable,
                ignoredPaths,
                trackedProperty.children[key],
                obj[key],
                sameRef,
                nestedPath,
              );
              if (result.wasMutated) {
                return result;
              }
            }
            return {
              wasMutated: false,
            };
          }
          function createImmutableStateInvariantMiddleware(options = {}) {
            if (("TURBOPACK compile-time falsy", 0)) {
              ("TURBOPACK unreachable");
            } else {
              let stringify2 = function (obj, serializer, indent, decycler) {
                  return JSON.stringify(
                    obj,
                    getSerialize2(serializer, decycler),
                    indent,
                  );
                },
                getSerialize2 = function (serializer, decycler) {
                  let stack = [],
                    keys = [];
                  if (!decycler)
                    decycler = function (_, value) {
                      if (stack[0] === value) return "[Circular ~]";
                      return (
                        "[Circular ~." +
                        keys.slice(0, stack.indexOf(value)).join(".") +
                        "]"
                      );
                    };
                  return function (key, value) {
                    if (stack.length > 0) {
                      var thisPos = stack.indexOf(this);
                      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
                      ~thisPos
                        ? keys.splice(thisPos, Infinity, key)
                        : keys.push(key);
                      if (~stack.indexOf(value))
                        value = decycler.call(this, key, value);
                    } else stack.push(value);
                    return serializer == null
                      ? value
                      : serializer.call(this, key, value);
                  };
                };
              var stringify = stringify2,
                getSerialize = getSerialize2;
              let {
                isImmutable = isImmutableDefault,
                ignoredPaths,
                warnAfter = 32,
              } = options;
              const track = trackForMutations.bind(
                null,
                isImmutable,
                ignoredPaths,
              );
              return ({ getState }) => {
                let state = getState();
                let tracker = track(state);
                let result;
                return (next) => (action) => {
                  const measureUtils = getTimeMeasureUtils(
                    warnAfter,
                    "ImmutableStateInvariantMiddleware",
                  );
                  measureUtils.measureTime(() => {
                    state = getState();
                    result = tracker.detectMutations();
                    tracker = track(state);
                    if (result.wasMutated) {
                      throw new Error(
                        ("TURBOPACK compile-time falsy", 0)
                          ? ("TURBOPACK unreachable", undefined)
                          : `A state mutation was detected between dispatches, in the path '${result.path || ""}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`,
                      );
                    }
                  });
                  const dispatchedAction = next(action);
                  measureUtils.measureTime(() => {
                    state = getState();
                    result = tracker.detectMutations();
                    tracker = track(state);
                    if (result.wasMutated) {
                      throw new Error(
                        ("TURBOPACK compile-time falsy", 0)
                          ? ("TURBOPACK unreachable", undefined)
                          : `A state mutation was detected inside a dispatch, in the path: ${result.path || ""}. Take a look at the reducer(s) handling the action ${stringify2(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`,
                      );
                    }
                  });
                  measureUtils.warnIfExceeded();
                  return dispatchedAction;
                };
              };
            }
          }
          function isPlain(val) {
            const type = typeof val;
            return (
              val == null ||
              type === "string" ||
              type === "boolean" ||
              type === "number" ||
              Array.isArray(val) ||
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "isPlainObject"
              ])(val)
            );
          }
          function findNonSerializableValue(
            value,
            path = "",
            isSerializable = isPlain,
            getEntries,
            ignoredPaths = [],
            cache,
          ) {
            let foundNestedSerializable;
            if (!isSerializable(value)) {
              return {
                keyPath: path || "<root>",
                value,
              };
            }
            if (typeof value !== "object" || value === null) {
              return false;
            }
            if (cache?.has(value)) return false;
            const entries =
              getEntries != null ? getEntries(value) : Object.entries(value);
            const hasIgnoredPaths = ignoredPaths.length > 0;
            for (const [key, nestedValue] of entries) {
              const nestedPath = path ? path + "." + key : key;
              if (hasIgnoredPaths) {
                const hasMatches = ignoredPaths.some((ignored) => {
                  if (ignored instanceof RegExp) {
                    return ignored.test(nestedPath);
                  }
                  return nestedPath === ignored;
                });
                if (hasMatches) {
                  continue;
                }
              }
              if (!isSerializable(nestedValue)) {
                return {
                  keyPath: nestedPath,
                  value: nestedValue,
                };
              }
              if (typeof nestedValue === "object") {
                foundNestedSerializable = findNonSerializableValue(
                  nestedValue,
                  nestedPath,
                  isSerializable,
                  getEntries,
                  ignoredPaths,
                  cache,
                );
                if (foundNestedSerializable) {
                  return foundNestedSerializable;
                }
              }
            }
            if (cache && isNestedFrozen(value)) cache.add(value);
            return false;
          }
          function isNestedFrozen(value) {
            if (!Object.isFrozen(value)) return false;
            for (const nestedValue of Object.values(value)) {
              if (typeof nestedValue !== "object" || nestedValue === null)
                continue;
              if (!isNestedFrozen(nestedValue)) return false;
            }
            return true;
          }
          function createSerializableStateInvariantMiddleware(options = {}) {
            if (("TURBOPACK compile-time falsy", 0)) {
              ("TURBOPACK unreachable");
            } else {
              const {
                isSerializable = isPlain,
                getEntries,
                ignoredActions = [],
                ignoredActionPaths = ["meta.arg", "meta.baseQueryMeta"],
                ignoredPaths = [],
                warnAfter = 32,
                ignoreState = false,
                ignoreActions = false,
                disableCache = false,
              } = options;
              const cache =
                !disableCache && WeakSet
                  ? /* @__PURE__ */ new WeakSet()
                  : void 0;
              return (storeAPI) => (next) => (action) => {
                if (
                  !(0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                    "isAction"
                  ])(action)
                ) {
                  return next(action);
                }
                const result = next(action);
                const measureUtils = getTimeMeasureUtils(
                  warnAfter,
                  "SerializableStateInvariantMiddleware",
                );
                if (
                  !ignoreActions &&
                  !(
                    ignoredActions.length &&
                    ignoredActions.indexOf(action.type) !== -1
                  )
                ) {
                  measureUtils.measureTime(() => {
                    const foundActionNonSerializableValue =
                      findNonSerializableValue(
                        action,
                        "",
                        isSerializable,
                        getEntries,
                        ignoredActionPaths,
                        cache,
                      );
                    if (foundActionNonSerializableValue) {
                      const { keyPath, value } =
                        foundActionNonSerializableValue;
                      console.error(
                        `A non-serializable value was detected in an action, in the path: \`${keyPath}\`. Value:`,
                        value,
                        "\nTake a look at the logic that dispatched this action: ",
                        action,
                        "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)",
                        "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)",
                      );
                    }
                  });
                }
                if (!ignoreState) {
                  measureUtils.measureTime(() => {
                    const state = storeAPI.getState();
                    const foundStateNonSerializableValue =
                      findNonSerializableValue(
                        state,
                        "",
                        isSerializable,
                        getEntries,
                        ignoredPaths,
                        cache,
                      );
                    if (foundStateNonSerializableValue) {
                      const { keyPath, value } = foundStateNonSerializableValue;
                      console.error(
                        `A non-serializable value was detected in the state, in the path: \`${keyPath}\`. Value:`,
                        value,
                        `
Take a look at the reducer(s) handling this action type: ${action.type}.
(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`,
                      );
                    }
                  });
                  measureUtils.warnIfExceeded();
                }
                return result;
              };
            }
          }
          // src/getDefaultMiddleware.ts
          function isBoolean(x) {
            return typeof x === "boolean";
          }
          var buildGetDefaultMiddleware = () =>
            function getDefaultMiddleware(options) {
              const {
                thunk = true,
                immutableCheck = true,
                serializableCheck = true,
                actionCreatorCheck = true,
              } = options ?? {};
              let middlewareArray = new Tuple();
              if (thunk) {
                if (isBoolean(thunk)) {
                  middlewareArray.push(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                      "thunk"
                    ],
                  );
                } else {
                  middlewareArray.push(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                      "withExtraArgument"
                    ])(thunk.extraArgument),
                  );
                }
              }
              if (("TURBOPACK compile-time truthy", 1)) {
                if (immutableCheck) {
                  let immutableOptions = {};
                  if (!isBoolean(immutableCheck)) {
                    immutableOptions = immutableCheck;
                  }
                  middlewareArray.unshift(
                    createImmutableStateInvariantMiddleware(immutableOptions),
                  );
                }
                if (serializableCheck) {
                  let serializableOptions = {};
                  if (!isBoolean(serializableCheck)) {
                    serializableOptions = serializableCheck;
                  }
                  middlewareArray.push(
                    createSerializableStateInvariantMiddleware(
                      serializableOptions,
                    ),
                  );
                }
                if (actionCreatorCheck) {
                  let actionCreatorOptions = {};
                  if (!isBoolean(actionCreatorCheck)) {
                    actionCreatorOptions = actionCreatorCheck;
                  }
                  middlewareArray.unshift(
                    createActionCreatorInvariantMiddleware(
                      actionCreatorOptions,
                    ),
                  );
                }
              }
              return middlewareArray;
            };
          // src/autoBatchEnhancer.ts
          var SHOULD_AUTOBATCH = "RTK_autoBatch";
          var prepareAutoBatched = () => (payload) => ({
            payload,
            meta: {
              [SHOULD_AUTOBATCH]: true,
            },
          });
          var createQueueWithTimer = (timeout) => {
            return (notify) => {
              setTimeout(notify, timeout);
            };
          };
          var autoBatchEnhancer =
            (
              options = {
                type: "raf",
              },
            ) =>
            (next) =>
            (...args) => {
              const store = next(...args);
              let notifying = true;
              let shouldNotifyAtEndOfTick = false;
              let notificationQueued = false;
              const listeners = /* @__PURE__ */ new Set();
              const queueCallback =
                options.type === "tick"
                  ? queueMicrotask
                  : options.type === "raf" // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.
                    ? typeof window !== "undefined" &&
                      window.requestAnimationFrame
                      ? window.requestAnimationFrame
                      : createQueueWithTimer(10)
                    : options.type === "callback"
                      ? options.queueNotification
                      : createQueueWithTimer(options.timeout);
              const notifyListeners = () => {
                notificationQueued = false;
                if (shouldNotifyAtEndOfTick) {
                  shouldNotifyAtEndOfTick = false;
                  listeners.forEach((l) => l());
                }
              };
              return Object.assign({}, store, {
                // Override the base `store.subscribe` method to keep original listeners
                // from running if we're delaying notifications
                subscribe(listener2) {
                  const wrappedListener = () => notifying && listener2();
                  const unsubscribe = store.subscribe(wrappedListener);
                  listeners.add(listener2);
                  return () => {
                    unsubscribe();
                    listeners.delete(listener2);
                  };
                },
                // Override the base `store.dispatch` method so that we can check actions
                // for the `shouldAutoBatch` flag and determine if batching is active
                dispatch(action) {
                  try {
                    notifying = !action?.meta?.[SHOULD_AUTOBATCH];
                    shouldNotifyAtEndOfTick = !notifying;
                    if (shouldNotifyAtEndOfTick) {
                      if (!notificationQueued) {
                        notificationQueued = true;
                        queueCallback(notifyListeners);
                      }
                    }
                    return store.dispatch(action);
                  } finally {
                    notifying = true;
                  }
                },
              });
            };
          // src/getDefaultEnhancers.ts
          var buildGetDefaultEnhancers = (middlewareEnhancer) =>
            function getDefaultEnhancers(options) {
              const { autoBatch = true } = options ?? {};
              let enhancerArray = new Tuple(middlewareEnhancer);
              if (autoBatch) {
                enhancerArray.push(
                  autoBatchEnhancer(
                    typeof autoBatch === "object" ? autoBatch : void 0,
                  ),
                );
              }
              return enhancerArray;
            };
          // src/configureStore.ts
          function configureStore(options) {
            const getDefaultMiddleware = buildGetDefaultMiddleware();
            const {
              reducer = void 0,
              middleware,
              devTools = true,
              duplicateMiddlewareCheck = true,
              preloadedState = void 0,
              enhancers = void 0,
            } = options || {};
            let rootReducer;
            if (typeof reducer === "function") {
              rootReducer = reducer;
            } else if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "isPlainObject"
              ])(reducer)
            ) {
              rootReducer = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "combineReducers"
              ])(reducer);
            } else {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers",
              );
            }
            if (
              ("TURBOPACK compile-time value", "development") !==
                "production" &&
              middleware &&
              typeof middleware !== "function"
            ) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "`middleware` field must be a callback",
              );
            }
            let finalMiddleware;
            if (typeof middleware === "function") {
              finalMiddleware = middleware(getDefaultMiddleware);
              if (
                ("TURBOPACK compile-time value", "development") !==
                  "production" &&
                !Array.isArray(finalMiddleware)
              ) {
                throw new Error(
                  ("TURBOPACK compile-time falsy", 0)
                    ? ("TURBOPACK unreachable", undefined)
                    : "when using a middleware builder function, an array of middleware must be returned",
                );
              }
            } else {
              finalMiddleware = getDefaultMiddleware();
            }
            if (
              ("TURBOPACK compile-time value", "development") !==
                "production" &&
              finalMiddleware.some((item) => typeof item !== "function")
            ) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "each middleware provided to configureStore must be a function",
              );
            }
            if (
              ("TURBOPACK compile-time value", "development") !==
                "production" &&
              duplicateMiddlewareCheck
            ) {
              let middlewareReferences = /* @__PURE__ */ new Set();
              finalMiddleware.forEach((middleware2) => {
                if (middlewareReferences.has(middleware2)) {
                  throw new Error(
                    ("TURBOPACK compile-time falsy", 0)
                      ? ("TURBOPACK unreachable", undefined)
                      : "Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.",
                  );
                }
                middlewareReferences.add(middleware2);
              });
            }
            let finalCompose =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "compose"
              ];
            if (devTools) {
              finalCompose = composeWithDevTools({
                // Enable capture of stack traces for dispatched Redux actions
                trace:
                  ("TURBOPACK compile-time value", "development") !==
                  "production",
                ...(typeof devTools === "object" && devTools),
              });
            }
            const middlewareEnhancer = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "applyMiddleware"
            ])(...finalMiddleware);
            const getDefaultEnhancers =
              buildGetDefaultEnhancers(middlewareEnhancer);
            if (
              ("TURBOPACK compile-time value", "development") !==
                "production" &&
              enhancers &&
              typeof enhancers !== "function"
            ) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "`enhancers` field must be a callback",
              );
            }
            let storeEnhancers =
              typeof enhancers === "function"
                ? enhancers(getDefaultEnhancers)
                : getDefaultEnhancers();
            if (
              ("TURBOPACK compile-time value", "development") !==
                "production" &&
              !Array.isArray(storeEnhancers)
            ) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "`enhancers` callback must return an array",
              );
            }
            if (
              ("TURBOPACK compile-time value", "development") !==
                "production" &&
              storeEnhancers.some((item) => typeof item !== "function")
            ) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "each enhancer provided to configureStore must be a function",
              );
            }
            if (
              ("TURBOPACK compile-time value", "development") !==
                "production" &&
              finalMiddleware.length &&
              !storeEnhancers.includes(middlewareEnhancer)
            ) {
              console.error(
                "middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`",
              );
            }
            const composedEnhancer = finalCompose(...storeEnhancers);
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "createStore"
            ])(rootReducer, preloadedState, composedEnhancer);
          }
          // src/mapBuilders.ts
          function executeReducerBuilderCallback(builderCallback) {
            const actionsMap = {};
            const actionMatchers = [];
            let defaultCaseReducer;
            const builder = {
              addCase(typeOrActionCreator, reducer) {
                if (("TURBOPACK compile-time truthy", 1)) {
                  if (actionMatchers.length > 0) {
                    throw new Error(
                      ("TURBOPACK compile-time falsy", 0)
                        ? ("TURBOPACK unreachable", undefined)
                        : "`builder.addCase` should only be called before calling `builder.addMatcher`",
                    );
                  }
                  if (defaultCaseReducer) {
                    throw new Error(
                      ("TURBOPACK compile-time falsy", 0)
                        ? ("TURBOPACK unreachable", undefined)
                        : "`builder.addCase` should only be called before calling `builder.addDefaultCase`",
                    );
                  }
                }
                const type =
                  typeof typeOrActionCreator === "string"
                    ? typeOrActionCreator
                    : typeOrActionCreator.type;
                if (!type) {
                  throw new Error(
                    ("TURBOPACK compile-time falsy", 0)
                      ? ("TURBOPACK unreachable", undefined)
                      : "`builder.addCase` cannot be called with an empty action type",
                  );
                }
                if (type in actionsMap) {
                  throw new Error(
                    ("TURBOPACK compile-time falsy", 0)
                      ? ("TURBOPACK unreachable", undefined)
                      : `\`builder.addCase\` cannot be called with two reducers for the same action type '${type}'`,
                  );
                }
                actionsMap[type] = reducer;
                return builder;
              },
              addMatcher(matcher, reducer) {
                if (("TURBOPACK compile-time truthy", 1)) {
                  if (defaultCaseReducer) {
                    throw new Error(
                      ("TURBOPACK compile-time falsy", 0)
                        ? ("TURBOPACK unreachable", undefined)
                        : "`builder.addMatcher` should only be called before calling `builder.addDefaultCase`",
                    );
                  }
                }
                actionMatchers.push({
                  matcher,
                  reducer,
                });
                return builder;
              },
              addDefaultCase(reducer) {
                if (("TURBOPACK compile-time truthy", 1)) {
                  if (defaultCaseReducer) {
                    throw new Error(
                      ("TURBOPACK compile-time falsy", 0)
                        ? ("TURBOPACK unreachable", undefined)
                        : "`builder.addDefaultCase` can only be called once",
                    );
                  }
                }
                defaultCaseReducer = reducer;
                return builder;
              },
            };
            builderCallback(builder);
            return [actionsMap, actionMatchers, defaultCaseReducer];
          }
          // src/createReducer.ts
          function isStateFunction(x) {
            return typeof x === "function";
          }
          function createReducer(initialState, mapOrBuilderCallback) {
            if (("TURBOPACK compile-time truthy", 1)) {
              if (typeof mapOrBuilderCallback === "object") {
                throw new Error(
                  ("TURBOPACK compile-time falsy", 0)
                    ? ("TURBOPACK unreachable", undefined)
                    : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer",
                );
              }
            }
            let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] =
              executeReducerBuilderCallback(mapOrBuilderCallback);
            let getInitialState;
            if (isStateFunction(initialState)) {
              getInitialState = () => freezeDraftable(initialState());
            } else {
              const frozenInitialState = freezeDraftable(initialState);
              getInitialState = () => frozenInitialState;
            }
            function reducer(state = getInitialState(), action) {
              let caseReducers = [
                actionsMap[action.type],
                ...finalActionMatchers
                  .filter(({ matcher }) => matcher(action))
                  .map(({ reducer: reducer2 }) => reducer2),
              ];
              if (caseReducers.filter((cr) => !!cr).length === 0) {
                caseReducers = [finalDefaultCaseReducer];
              }
              return caseReducers.reduce((previousState, caseReducer) => {
                if (caseReducer) {
                  if (
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                      "isDraft"
                    ])(previousState)
                  ) {
                    const draft = previousState;
                    const result = caseReducer(draft, action);
                    if (result === void 0) {
                      return previousState;
                    }
                    return result;
                  } else if (
                    !(0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                      "isDraftable"
                    ])(previousState)
                  ) {
                    const result = caseReducer(previousState, action);
                    if (result === void 0) {
                      if (previousState === null) {
                        return previousState;
                      }
                      throw Error(
                        "A case reducer on a non-draftable value must not return undefined",
                      );
                    }
                    return result;
                  } else {
                    return (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                      "produce"
                    ])(previousState, (draft) => {
                      return caseReducer(draft, action);
                    });
                  }
                }
                return previousState;
              }, state);
            }
            reducer.getInitialState = getInitialState;
            return reducer;
          }
          // src/matchers.ts
          var matches = (matcher, action) => {
            if (hasMatchFunction(matcher)) {
              return matcher.match(action);
            } else {
              return matcher(action);
            }
          };
          function isAnyOf(...matchers) {
            return (action) => {
              return matchers.some((matcher) => matches(matcher, action));
            };
          }
          function isAllOf(...matchers) {
            return (action) => {
              return matchers.every((matcher) => matches(matcher, action));
            };
          }
          function hasExpectedRequestMetadata(action, validStatus) {
            if (!action || !action.meta) return false;
            const hasValidRequestId = typeof action.meta.requestId === "string";
            const hasValidRequestStatus =
              validStatus.indexOf(action.meta.requestStatus) > -1;
            return hasValidRequestId && hasValidRequestStatus;
          }
          function isAsyncThunkArray(a) {
            return (
              typeof a[0] === "function" &&
              "pending" in a[0] &&
              "fulfilled" in a[0] &&
              "rejected" in a[0]
            );
          }
          function isPending(...asyncThunks) {
            if (asyncThunks.length === 0) {
              return (action) =>
                hasExpectedRequestMetadata(action, ["pending"]);
            }
            if (!isAsyncThunkArray(asyncThunks)) {
              return isPending()(asyncThunks[0]);
            }
            return isAnyOf(
              ...asyncThunks.map((asyncThunk) => asyncThunk.pending),
            );
          }
          function isRejected(...asyncThunks) {
            if (asyncThunks.length === 0) {
              return (action) =>
                hasExpectedRequestMetadata(action, ["rejected"]);
            }
            if (!isAsyncThunkArray(asyncThunks)) {
              return isRejected()(asyncThunks[0]);
            }
            return isAnyOf(
              ...asyncThunks.map((asyncThunk) => asyncThunk.rejected),
            );
          }
          function isRejectedWithValue(...asyncThunks) {
            const hasFlag = (action) => {
              return action && action.meta && action.meta.rejectedWithValue;
            };
            if (asyncThunks.length === 0) {
              return isAllOf(isRejected(...asyncThunks), hasFlag);
            }
            if (!isAsyncThunkArray(asyncThunks)) {
              return isRejectedWithValue()(asyncThunks[0]);
            }
            return isAllOf(isRejected(...asyncThunks), hasFlag);
          }
          function isFulfilled(...asyncThunks) {
            if (asyncThunks.length === 0) {
              return (action) =>
                hasExpectedRequestMetadata(action, ["fulfilled"]);
            }
            if (!isAsyncThunkArray(asyncThunks)) {
              return isFulfilled()(asyncThunks[0]);
            }
            return isAnyOf(
              ...asyncThunks.map((asyncThunk) => asyncThunk.fulfilled),
            );
          }
          function isAsyncThunkAction(...asyncThunks) {
            if (asyncThunks.length === 0) {
              return (action) =>
                hasExpectedRequestMetadata(action, [
                  "pending",
                  "fulfilled",
                  "rejected",
                ]);
            }
            if (!isAsyncThunkArray(asyncThunks)) {
              return isAsyncThunkAction()(asyncThunks[0]);
            }
            return isAnyOf(
              ...asyncThunks.flatMap((asyncThunk) => [
                asyncThunk.pending,
                asyncThunk.rejected,
                asyncThunk.fulfilled,
              ]),
            );
          }
          // src/nanoid.ts
          var urlAlphabet =
            "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
          var nanoid = (size = 21) => {
            let id = "";
            let i = size;
            while (i--) {
              id += urlAlphabet[(Math.random() * 64) | 0];
            }
            return id;
          };
          // src/createAsyncThunk.ts
          var commonProperties = ["name", "message", "stack", "code"];
          var RejectWithValue = class {
            constructor(payload, meta) {
              this.payload = payload;
              this.meta = meta;
            }
            /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */ _type;
          };
          var FulfillWithMeta = class {
            constructor(payload, meta) {
              this.payload = payload;
              this.meta = meta;
            }
            /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */ _type;
          };
          var miniSerializeError = (value) => {
            if (typeof value === "object" && value !== null) {
              const simpleError = {};
              for (const property of commonProperties) {
                if (typeof value[property] === "string") {
                  simpleError[property] = value[property];
                }
              }
              return simpleError;
            }
            return {
              message: String(value),
            };
          };
          var externalAbortMessage = "External signal was aborted";
          var createAsyncThunk = /* @__PURE__ */ (() => {
            function createAsyncThunk2(typePrefix, payloadCreator, options) {
              const fulfilled = createAction(
                typePrefix + "/fulfilled",
                (payload, requestId, arg, meta) => ({
                  payload,
                  meta: {
                    ...(meta || {}),
                    arg,
                    requestId,
                    requestStatus: "fulfilled",
                  },
                }),
              );
              const pending = createAction(
                typePrefix + "/pending",
                (requestId, arg, meta) => ({
                  payload: void 0,
                  meta: {
                    ...(meta || {}),
                    arg,
                    requestId,
                    requestStatus: "pending",
                  },
                }),
              );
              const rejected = createAction(
                typePrefix + "/rejected",
                (error, requestId, arg, payload, meta) => ({
                  payload,
                  error: (
                    (options && options.serializeError) ||
                    miniSerializeError
                  )(error || "Rejected"),
                  meta: {
                    ...(meta || {}),
                    arg,
                    requestId,
                    rejectedWithValue: !!payload,
                    requestStatus: "rejected",
                    aborted: error?.name === "AbortError",
                    condition: error?.name === "ConditionError",
                  },
                }),
              );
              function actionCreator(arg, { signal } = {}) {
                return (dispatch, getState, extra) => {
                  const requestId = options?.idGenerator
                    ? options.idGenerator(arg)
                    : nanoid();
                  const abortController = new AbortController();
                  let abortHandler;
                  let abortReason;
                  function abort(reason) {
                    abortReason = reason;
                    abortController.abort();
                  }
                  if (signal) {
                    if (signal.aborted) {
                      abort(externalAbortMessage);
                    } else {
                      signal.addEventListener(
                        "abort",
                        () => abort(externalAbortMessage),
                        {
                          once: true,
                        },
                      );
                    }
                  }
                  const promise = (async function () {
                    let finalAction;
                    try {
                      let conditionResult = options?.condition?.(arg, {
                        getState,
                        extra,
                      });
                      if (isThenable(conditionResult)) {
                        conditionResult = await conditionResult;
                      }
                      if (
                        conditionResult === false ||
                        abortController.signal.aborted
                      ) {
                        throw {
                          name: "ConditionError",
                          message:
                            "Aborted due to condition callback returning false.",
                        };
                      }
                      const abortedPromise = new Promise((_, reject) => {
                        abortHandler = () => {
                          reject({
                            name: "AbortError",
                            message: abortReason || "Aborted",
                          });
                        };
                        abortController.signal.addEventListener(
                          "abort",
                          abortHandler,
                        );
                      });
                      dispatch(
                        pending(
                          requestId,
                          arg,
                          options?.getPendingMeta?.(
                            {
                              requestId,
                              arg,
                            },
                            {
                              getState,
                              extra,
                            },
                          ),
                        ),
                      );
                      finalAction = await Promise.race([
                        abortedPromise,
                        Promise.resolve(
                          payloadCreator(arg, {
                            dispatch,
                            getState,
                            extra,
                            requestId,
                            signal: abortController.signal,
                            abort,
                            rejectWithValue: (value, meta) => {
                              return new RejectWithValue(value, meta);
                            },
                            fulfillWithValue: (value, meta) => {
                              return new FulfillWithMeta(value, meta);
                            },
                          }),
                        ).then((result) => {
                          if (result instanceof RejectWithValue) {
                            throw result;
                          }
                          if (result instanceof FulfillWithMeta) {
                            return fulfilled(
                              result.payload,
                              requestId,
                              arg,
                              result.meta,
                            );
                          }
                          return fulfilled(result, requestId, arg);
                        }),
                      ]);
                    } catch (err) {
                      finalAction =
                        err instanceof RejectWithValue
                          ? rejected(
                              null,
                              requestId,
                              arg,
                              err.payload,
                              err.meta,
                            )
                          : rejected(err, requestId, arg);
                    } finally {
                      if (abortHandler) {
                        abortController.signal.removeEventListener(
                          "abort",
                          abortHandler,
                        );
                      }
                    }
                    const skipDispatch =
                      options &&
                      !options.dispatchConditionRejection &&
                      rejected.match(finalAction) &&
                      finalAction.meta.condition;
                    if (!skipDispatch) {
                      dispatch(finalAction);
                    }
                    return finalAction;
                  })();
                  return Object.assign(promise, {
                    abort,
                    requestId,
                    arg,
                    unwrap() {
                      return promise.then(unwrapResult);
                    },
                  });
                };
              }
              return Object.assign(actionCreator, {
                pending,
                rejected,
                fulfilled,
                settled: isAnyOf(rejected, fulfilled),
                typePrefix,
              });
            }
            createAsyncThunk2.withTypes = () => createAsyncThunk2;
            return createAsyncThunk2;
          })();
          function unwrapResult(action) {
            if (action.meta && action.meta.rejectedWithValue) {
              throw action.payload;
            }
            if (action.error) {
              throw action.error;
            }
            return action.payload;
          }
          function isThenable(value) {
            return (
              value !== null &&
              typeof value === "object" &&
              typeof value.then === "function"
            );
          }
          // src/createSlice.ts
          var asyncThunkSymbol = /* @__PURE__ */ Symbol.for(
            "rtk-slice-createasyncthunk",
          );
          var asyncThunkCreator = {
            [asyncThunkSymbol]: createAsyncThunk,
          };
          var ReducerType = /* @__PURE__ */ ((ReducerType2) => {
            ReducerType2["reducer"] = "reducer";
            ReducerType2["reducerWithPrepare"] = "reducerWithPrepare";
            ReducerType2["asyncThunk"] = "asyncThunk";
            return ReducerType2;
          })(ReducerType || {});
          function getType(slice, actionKey) {
            return `${slice}/${actionKey}`;
          }
          function buildCreateSlice({ creators } = {}) {
            const cAT = creators?.asyncThunk?.[asyncThunkSymbol];
            return function createSlice2(options) {
              const { name, reducerPath = name } = options;
              if (!name) {
                throw new Error(
                  ("TURBOPACK compile-time falsy", 0)
                    ? ("TURBOPACK unreachable", undefined)
                    : "`name` is a required option for createSlice",
                );
              }
              if (
                typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "default"
                ] !== "undefined" &&
                ("TURBOPACK compile-time value", "development") ===
                  "development"
              ) {
                if (options.initialState === void 0) {
                  console.error(
                    "You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`",
                  );
                }
              }
              const reducers =
                (typeof options.reducers === "function"
                  ? options.reducers(buildReducerCreators())
                  : options.reducers) || {};
              const reducerNames = Object.keys(reducers);
              const context = {
                sliceCaseReducersByName: {},
                sliceCaseReducersByType: {},
                actionCreators: {},
                sliceMatchers: [],
              };
              const contextMethods = {
                addCase(typeOrActionCreator, reducer2) {
                  const type =
                    typeof typeOrActionCreator === "string"
                      ? typeOrActionCreator
                      : typeOrActionCreator.type;
                  if (!type) {
                    throw new Error(
                      ("TURBOPACK compile-time falsy", 0)
                        ? ("TURBOPACK unreachable", undefined)
                        : "`context.addCase` cannot be called with an empty action type",
                    );
                  }
                  if (type in context.sliceCaseReducersByType) {
                    throw new Error(
                      ("TURBOPACK compile-time falsy", 0)
                        ? ("TURBOPACK unreachable", undefined)
                        : "`context.addCase` cannot be called with two reducers for the same action type: " +
                          type,
                    );
                  }
                  context.sliceCaseReducersByType[type] = reducer2;
                  return contextMethods;
                },
                addMatcher(matcher, reducer2) {
                  context.sliceMatchers.push({
                    matcher,
                    reducer: reducer2,
                  });
                  return contextMethods;
                },
                exposeAction(name2, actionCreator) {
                  context.actionCreators[name2] = actionCreator;
                  return contextMethods;
                },
                exposeCaseReducer(name2, reducer2) {
                  context.sliceCaseReducersByName[name2] = reducer2;
                  return contextMethods;
                },
              };
              reducerNames.forEach((reducerName) => {
                const reducerDefinition = reducers[reducerName];
                const reducerDetails = {
                  reducerName,
                  type: getType(name, reducerName),
                  createNotation: typeof options.reducers === "function",
                };
                if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {
                  handleThunkCaseReducerDefinition(
                    reducerDetails,
                    reducerDefinition,
                    contextMethods,
                    cAT,
                  );
                } else {
                  handleNormalReducerDefinition(
                    reducerDetails,
                    reducerDefinition,
                    contextMethods,
                  );
                }
              });
              function buildReducer() {
                if (("TURBOPACK compile-time truthy", 1)) {
                  if (typeof options.extraReducers === "object") {
                    throw new Error(
                      ("TURBOPACK compile-time falsy", 0)
                        ? ("TURBOPACK unreachable", undefined)
                        : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice",
                    );
                  }
                }
                const [
                  extraReducers = {},
                  actionMatchers = [],
                  defaultCaseReducer = void 0,
                ] =
                  typeof options.extraReducers === "function"
                    ? executeReducerBuilderCallback(options.extraReducers)
                    : [options.extraReducers];
                const finalCaseReducers = {
                  ...extraReducers,
                  ...context.sliceCaseReducersByType,
                };
                return createReducer(options.initialState, (builder) => {
                  for (let key in finalCaseReducers) {
                    builder.addCase(key, finalCaseReducers[key]);
                  }
                  for (let sM of context.sliceMatchers) {
                    builder.addMatcher(sM.matcher, sM.reducer);
                  }
                  for (let m of actionMatchers) {
                    builder.addMatcher(m.matcher, m.reducer);
                  }
                  if (defaultCaseReducer) {
                    builder.addDefaultCase(defaultCaseReducer);
                  }
                });
              }
              const selectSelf = (state) => state;
              const injectedSelectorCache = /* @__PURE__ */ new Map();
              const injectedStateCache = /* @__PURE__ */ new WeakMap();
              let _reducer;
              function reducer(state, action) {
                if (!_reducer) _reducer = buildReducer();
                return _reducer(state, action);
              }
              function getInitialState() {
                if (!_reducer) _reducer = buildReducer();
                return _reducer.getInitialState();
              }
              function makeSelectorProps(reducerPath2, injected = false) {
                function selectSlice(state) {
                  let sliceState = state[reducerPath2];
                  if (typeof sliceState === "undefined") {
                    if (injected) {
                      sliceState = getOrInsertComputed(
                        injectedStateCache,
                        selectSlice,
                        getInitialState,
                      );
                    } else if (("TURBOPACK compile-time truthy", 1)) {
                      throw new Error(
                        ("TURBOPACK compile-time falsy", 0)
                          ? ("TURBOPACK unreachable", undefined)
                          : "selectSlice returned undefined for an uninjected slice reducer",
                      );
                    }
                  }
                  return sliceState;
                }
                function getSelectors(selectState = selectSelf) {
                  const selectorCache = getOrInsertComputed(
                    injectedSelectorCache,
                    injected,
                    () => /* @__PURE__ */ new WeakMap(),
                  );
                  return getOrInsertComputed(selectorCache, selectState, () => {
                    const map = {};
                    for (const [name2, selector] of Object.entries(
                      options.selectors ?? {},
                    )) {
                      map[name2] = wrapSelector(
                        selector,
                        selectState,
                        () =>
                          getOrInsertComputed(
                            injectedStateCache,
                            selectState,
                            getInitialState,
                          ),
                        injected,
                      );
                    }
                    return map;
                  });
                }
                return {
                  reducerPath: reducerPath2,
                  getSelectors,
                  get selectors() {
                    return getSelectors(selectSlice);
                  },
                  selectSlice,
                };
              }
              const slice = {
                name,
                reducer,
                actions: context.actionCreators,
                caseReducers: context.sliceCaseReducersByName,
                getInitialState,
                ...makeSelectorProps(reducerPath),
                injectInto(
                  injectable,
                  { reducerPath: pathOpt, ...config } = {},
                ) {
                  const newReducerPath = pathOpt ?? reducerPath;
                  injectable.inject(
                    {
                      reducerPath: newReducerPath,
                      reducer,
                    },
                    config,
                  );
                  return {
                    ...slice,
                    ...makeSelectorProps(newReducerPath, true),
                  };
                },
              };
              return slice;
            };
          }
          function wrapSelector(
            selector,
            selectState,
            getInitialState,
            injected,
          ) {
            function wrapper(rootState, ...args) {
              let sliceState = selectState(rootState);
              if (typeof sliceState === "undefined") {
                if (injected) {
                  sliceState = getInitialState();
                } else if (("TURBOPACK compile-time truthy", 1)) {
                  throw new Error(
                    ("TURBOPACK compile-time falsy", 0)
                      ? ("TURBOPACK unreachable", undefined)
                      : "selectState returned undefined for an uninjected slice reducer",
                  );
                }
              }
              return selector(sliceState, ...args);
            }
            wrapper.unwrapped = selector;
            return wrapper;
          }
          var createSlice = /* @__PURE__ */ buildCreateSlice();
          function buildReducerCreators() {
            function asyncThunk(payloadCreator, config) {
              return {
                _reducerDefinitionType: "asyncThunk" /* asyncThunk */,
                payloadCreator,
                ...config,
              };
            }
            asyncThunk.withTypes = () => asyncThunk;
            return {
              reducer(caseReducer) {
                return Object.assign(
                  {
                    // hack so the wrapping function has the same name as the original
                    // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
                    [caseReducer.name](...args) {
                      return caseReducer(...args);
                    },
                  }[caseReducer.name],
                  {
                    _reducerDefinitionType: "reducer" /* reducer */,
                  },
                );
              },
              preparedReducer(prepare, reducer) {
                return {
                  _reducerDefinitionType:
                    "reducerWithPrepare" /* reducerWithPrepare */,
                  prepare,
                  reducer,
                };
              },
              asyncThunk,
            };
          }
          function handleNormalReducerDefinition(
            { type, reducerName, createNotation },
            maybeReducerWithPrepare,
            context,
          ) {
            let caseReducer;
            let prepareCallback;
            if ("reducer" in maybeReducerWithPrepare) {
              if (
                createNotation &&
                !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)
              ) {
                throw new Error(
                  ("TURBOPACK compile-time falsy", 0)
                    ? ("TURBOPACK unreachable", undefined)
                    : "Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.",
                );
              }
              caseReducer = maybeReducerWithPrepare.reducer;
              prepareCallback = maybeReducerWithPrepare.prepare;
            } else {
              caseReducer = maybeReducerWithPrepare;
            }
            context
              .addCase(type, caseReducer)
              .exposeCaseReducer(reducerName, caseReducer)
              .exposeAction(
                reducerName,
                prepareCallback
                  ? createAction(type, prepareCallback)
                  : createAction(type),
              );
          }
          function isAsyncThunkSliceReducerDefinition(reducerDefinition) {
            return (
              reducerDefinition._reducerDefinitionType ===
              "asyncThunk" /* asyncThunk */
            );
          }
          function isCaseReducerWithPrepareDefinition(reducerDefinition) {
            return (
              reducerDefinition._reducerDefinitionType ===
              "reducerWithPrepare" /* reducerWithPrepare */
            );
          }
          function handleThunkCaseReducerDefinition(
            { type, reducerName },
            reducerDefinition,
            context,
            cAT,
          ) {
            if (!cAT) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.",
              );
            }
            const {
              payloadCreator,
              fulfilled,
              pending,
              rejected,
              settled,
              options,
            } = reducerDefinition;
            const thunk = cAT(type, payloadCreator, options);
            context.exposeAction(reducerName, thunk);
            if (fulfilled) {
              context.addCase(thunk.fulfilled, fulfilled);
            }
            if (pending) {
              context.addCase(thunk.pending, pending);
            }
            if (rejected) {
              context.addCase(thunk.rejected, rejected);
            }
            if (settled) {
              context.addMatcher(thunk.settled, settled);
            }
            context.exposeCaseReducer(reducerName, {
              fulfilled: fulfilled || noop,
              pending: pending || noop,
              rejected: rejected || noop,
              settled: settled || noop,
            });
          }
          function noop() {}
          // src/entities/entity_state.ts
          function getInitialEntityState() {
            return {
              ids: [],
              entities: {},
            };
          }
          function createInitialStateFactory(stateAdapter) {
            function getInitialState(additionalState = {}, entities) {
              const state = Object.assign(
                getInitialEntityState(),
                additionalState,
              );
              return entities ? stateAdapter.setAll(state, entities) : state;
            }
            return {
              getInitialState,
            };
          }
          // src/entities/state_selectors.ts
          function createSelectorsFactory() {
            function getSelectors(selectState, options = {}) {
              const {
                createSelector: createSelector2 = createDraftSafeSelector,
              } = options;
              const selectIds = (state) => state.ids;
              const selectEntities = (state) => state.entities;
              const selectAll = createSelector2(
                selectIds,
                selectEntities,
                (ids, entities) => ids.map((id) => entities[id]),
              );
              const selectId = (_, id) => id;
              const selectById = (entities, id) => entities[id];
              const selectTotal = createSelector2(
                selectIds,
                (ids) => ids.length,
              );
              if (!selectState) {
                return {
                  selectIds,
                  selectEntities,
                  selectAll,
                  selectTotal,
                  selectById: createSelector2(
                    selectEntities,
                    selectId,
                    selectById,
                  ),
                };
              }
              const selectGlobalizedEntities = createSelector2(
                selectState,
                selectEntities,
              );
              return {
                selectIds: createSelector2(selectState, selectIds),
                selectEntities: selectGlobalizedEntities,
                selectAll: createSelector2(selectState, selectAll),
                selectTotal: createSelector2(selectState, selectTotal),
                selectById: createSelector2(
                  selectGlobalizedEntities,
                  selectId,
                  selectById,
                ),
              };
            }
            return {
              getSelectors,
            };
          }
          var isDraftTyped =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "isDraft"
            ];
          function createSingleArgumentStateOperator(mutator) {
            const operator = createStateOperator((_, state) => mutator(state));
            return function operation(state) {
              return operator(state, void 0);
            };
          }
          function createStateOperator(mutator) {
            return function operation(state, arg) {
              function isPayloadActionArgument(arg2) {
                return isFSA(arg2);
              }
              const runMutator = (draft) => {
                if (isPayloadActionArgument(arg)) {
                  mutator(arg.payload, draft);
                } else {
                  mutator(arg, draft);
                }
              };
              if (isDraftTyped(state)) {
                runMutator(state);
                return state;
              }
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "produce"
              ])(state, runMutator);
            };
          }
          function selectIdValue(entity, selectId) {
            const key = selectId(entity);
            if (
              ("TURBOPACK compile-time value", "development") !==
                "production" &&
              key === void 0
            ) {
              console.warn(
                "The entity passed to the `selectId` implementation returned undefined.",
                "You should probably provide your own `selectId` implementation.",
                "The entity that was passed:",
                entity,
                "The `selectId` implementation:",
                selectId.toString(),
              );
            }
            return key;
          }
          function ensureEntitiesArray(entities) {
            if (!Array.isArray(entities)) {
              entities = Object.values(entities);
            }
            return entities;
          }
          function getCurrent(value) {
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "isDraft"
            ])(value)
              ? (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                  "current"
                ])(value)
              : value;
          }
          function splitAddedUpdatedEntities(newEntities, selectId, state) {
            newEntities = ensureEntitiesArray(newEntities);
            const existingIdsArray = getCurrent(state.ids);
            const existingIds = new Set(existingIdsArray);
            const added = [];
            const addedIds = /* @__PURE__ */ new Set([]);
            const updated = [];
            for (const entity of newEntities) {
              const id = selectIdValue(entity, selectId);
              if (existingIds.has(id) || addedIds.has(id)) {
                updated.push({
                  id,
                  changes: entity,
                });
              } else {
                addedIds.add(id);
                added.push(entity);
              }
            }
            return [added, updated, existingIdsArray];
          }
          // src/entities/unsorted_state_adapter.ts
          function createUnsortedStateAdapter(selectId) {
            function addOneMutably(entity, state) {
              const key = selectIdValue(entity, selectId);
              if (key in state.entities) {
                return;
              }
              state.ids.push(key);
              state.entities[key] = entity;
            }
            function addManyMutably(newEntities, state) {
              newEntities = ensureEntitiesArray(newEntities);
              for (const entity of newEntities) {
                addOneMutably(entity, state);
              }
            }
            function setOneMutably(entity, state) {
              const key = selectIdValue(entity, selectId);
              if (!(key in state.entities)) {
                state.ids.push(key);
              }
              state.entities[key] = entity;
            }
            function setManyMutably(newEntities, state) {
              newEntities = ensureEntitiesArray(newEntities);
              for (const entity of newEntities) {
                setOneMutably(entity, state);
              }
            }
            function setAllMutably(newEntities, state) {
              newEntities = ensureEntitiesArray(newEntities);
              state.ids = [];
              state.entities = {};
              addManyMutably(newEntities, state);
            }
            function removeOneMutably(key, state) {
              return removeManyMutably([key], state);
            }
            function removeManyMutably(keys, state) {
              let didMutate = false;
              keys.forEach((key) => {
                if (key in state.entities) {
                  delete state.entities[key];
                  didMutate = true;
                }
              });
              if (didMutate) {
                state.ids = state.ids.filter((id) => id in state.entities);
              }
            }
            function removeAllMutably(state) {
              Object.assign(state, {
                ids: [],
                entities: {},
              });
            }
            function takeNewKey(keys, update, state) {
              const original3 = state.entities[update.id];
              if (original3 === void 0) {
                return false;
              }
              const updated = Object.assign({}, original3, update.changes);
              const newKey = selectIdValue(updated, selectId);
              const hasNewKey = newKey !== update.id;
              if (hasNewKey) {
                keys[update.id] = newKey;
                delete state.entities[update.id];
              }
              state.entities[newKey] = updated;
              return hasNewKey;
            }
            function updateOneMutably(update, state) {
              return updateManyMutably([update], state);
            }
            function updateManyMutably(updates, state) {
              const newKeys = {};
              const updatesPerEntity = {};
              updates.forEach((update) => {
                if (update.id in state.entities) {
                  updatesPerEntity[update.id] = {
                    id: update.id,
                    // Spreads ignore falsy values, so this works even if there isn't
                    // an existing update already at this key
                    changes: {
                      ...updatesPerEntity[update.id]?.changes,
                      ...update.changes,
                    },
                  };
                }
              });
              updates = Object.values(updatesPerEntity);
              const didMutateEntities = updates.length > 0;
              if (didMutateEntities) {
                const didMutateIds =
                  updates.filter((update) => takeNewKey(newKeys, update, state))
                    .length > 0;
                if (didMutateIds) {
                  state.ids = Object.values(state.entities).map((e) =>
                    selectIdValue(e, selectId),
                  );
                }
              }
            }
            function upsertOneMutably(entity, state) {
              return upsertManyMutably([entity], state);
            }
            function upsertManyMutably(newEntities, state) {
              const [added, updated] = splitAddedUpdatedEntities(
                newEntities,
                selectId,
                state,
              );
              addManyMutably(added, state);
              updateManyMutably(updated, state);
            }
            return {
              removeAll: createSingleArgumentStateOperator(removeAllMutably),
              addOne: createStateOperator(addOneMutably),
              addMany: createStateOperator(addManyMutably),
              setOne: createStateOperator(setOneMutably),
              setMany: createStateOperator(setManyMutably),
              setAll: createStateOperator(setAllMutably),
              updateOne: createStateOperator(updateOneMutably),
              updateMany: createStateOperator(updateManyMutably),
              upsertOne: createStateOperator(upsertOneMutably),
              upsertMany: createStateOperator(upsertManyMutably),
              removeOne: createStateOperator(removeOneMutably),
              removeMany: createStateOperator(removeManyMutably),
            };
          }
          // src/entities/sorted_state_adapter.ts
          function findInsertIndex(sortedItems, item, comparisonFunction) {
            let lowIndex = 0;
            let highIndex = sortedItems.length;
            while (lowIndex < highIndex) {
              let middleIndex = (lowIndex + highIndex) >>> 1;
              const currentItem = sortedItems[middleIndex];
              const res = comparisonFunction(item, currentItem);
              if (res >= 0) {
                lowIndex = middleIndex + 1;
              } else {
                highIndex = middleIndex;
              }
            }
            return lowIndex;
          }
          function insert(sortedItems, item, comparisonFunction) {
            const insertAtIndex = findInsertIndex(
              sortedItems,
              item,
              comparisonFunction,
            );
            sortedItems.splice(insertAtIndex, 0, item);
            return sortedItems;
          }
          function createSortedStateAdapter(selectId, comparer) {
            const { removeOne, removeMany, removeAll } =
              createUnsortedStateAdapter(selectId);
            function addOneMutably(entity, state) {
              return addManyMutably([entity], state);
            }
            function addManyMutably(newEntities, state, existingIds) {
              newEntities = ensureEntitiesArray(newEntities);
              const existingKeys = new Set(
                existingIds ?? getCurrent(state.ids),
              );
              const models = newEntities.filter(
                (model) => !existingKeys.has(selectIdValue(model, selectId)),
              );
              if (models.length !== 0) {
                mergeFunction(state, models);
              }
            }
            function setOneMutably(entity, state) {
              return setManyMutably([entity], state);
            }
            function setManyMutably(newEntities, state) {
              newEntities = ensureEntitiesArray(newEntities);
              if (newEntities.length !== 0) {
                for (const item of newEntities) {
                  delete state.entities[selectId(item)];
                }
                mergeFunction(state, newEntities);
              }
            }
            function setAllMutably(newEntities, state) {
              newEntities = ensureEntitiesArray(newEntities);
              state.entities = {};
              state.ids = [];
              addManyMutably(newEntities, state, []);
            }
            function updateOneMutably(update, state) {
              return updateManyMutably([update], state);
            }
            function updateManyMutably(updates, state) {
              let appliedUpdates = false;
              let replacedIds = false;
              for (let update of updates) {
                const entity = state.entities[update.id];
                if (!entity) {
                  continue;
                }
                appliedUpdates = true;
                Object.assign(entity, update.changes);
                const newId = selectId(entity);
                if (update.id !== newId) {
                  replacedIds = true;
                  delete state.entities[update.id];
                  const oldIndex = state.ids.indexOf(update.id);
                  state.ids[oldIndex] = newId;
                  state.entities[newId] = entity;
                }
              }
              if (appliedUpdates) {
                mergeFunction(state, [], appliedUpdates, replacedIds);
              }
            }
            function upsertOneMutably(entity, state) {
              return upsertManyMutably([entity], state);
            }
            function upsertManyMutably(newEntities, state) {
              const [added, updated, existingIdsArray] =
                splitAddedUpdatedEntities(newEntities, selectId, state);
              if (added.length) {
                addManyMutably(added, state, existingIdsArray);
              }
              if (updated.length) {
                updateManyMutably(updated, state);
              }
            }
            function areArraysEqual(a, b) {
              if (a.length !== b.length) {
                return false;
              }
              for (let i = 0; i < a.length; i++) {
                if (a[i] === b[i]) {
                  continue;
                }
                return false;
              }
              return true;
            }
            const mergeFunction = (
              state,
              addedItems,
              appliedUpdates,
              replacedIds,
            ) => {
              const currentEntities = getCurrent(state.entities);
              const currentIds = getCurrent(state.ids);
              const stateEntities = state.entities;
              let ids = currentIds;
              if (replacedIds) {
                ids = new Set(currentIds);
              }
              let sortedEntities = [];
              for (const id of ids) {
                const entity = currentEntities[id];
                if (entity) {
                  sortedEntities.push(entity);
                }
              }
              const wasPreviouslyEmpty = sortedEntities.length === 0;
              for (const item of addedItems) {
                stateEntities[selectId(item)] = item;
                if (!wasPreviouslyEmpty) {
                  insert(sortedEntities, item, comparer);
                }
              }
              if (wasPreviouslyEmpty) {
                sortedEntities = addedItems.slice().sort(comparer);
              } else if (appliedUpdates) {
                sortedEntities.sort(comparer);
              }
              const newSortedIds = sortedEntities.map(selectId);
              if (!areArraysEqual(currentIds, newSortedIds)) {
                state.ids = newSortedIds;
              }
            };
            return {
              removeOne,
              removeMany,
              removeAll,
              addOne: createStateOperator(addOneMutably),
              updateOne: createStateOperator(updateOneMutably),
              upsertOne: createStateOperator(upsertOneMutably),
              setOne: createStateOperator(setOneMutably),
              setMany: createStateOperator(setManyMutably),
              setAll: createStateOperator(setAllMutably),
              addMany: createStateOperator(addManyMutably),
              updateMany: createStateOperator(updateManyMutably),
              upsertMany: createStateOperator(upsertManyMutably),
            };
          }
          // src/entities/create_adapter.ts
          function createEntityAdapter(options = {}) {
            const { selectId, sortComparer } = {
              sortComparer: false,
              selectId: (instance) => instance.id,
              ...options,
            };
            const stateAdapter = sortComparer
              ? createSortedStateAdapter(selectId, sortComparer)
              : createUnsortedStateAdapter(selectId);
            const stateFactory = createInitialStateFactory(stateAdapter);
            const selectorsFactory = createSelectorsFactory();
            return {
              selectId,
              sortComparer,
              ...stateFactory,
              ...selectorsFactory,
              ...stateAdapter,
            };
          }
          // src/listenerMiddleware/exceptions.ts
          var task = "task";
          var listener = "listener";
          var completed = "completed";
          var cancelled = "cancelled";
          var taskCancelled = `task-${cancelled}`;
          var taskCompleted = `task-${completed}`;
          var listenerCancelled = `${listener}-${cancelled}`;
          var listenerCompleted = `${listener}-${completed}`;
          var TaskAbortError = class {
            constructor(code) {
              this.code = code;
              this.message = `${task} ${cancelled} (reason: ${code})`;
            }
            name = "TaskAbortError";
            message;
          };
          // src/listenerMiddleware/utils.ts
          var assertFunction = (func, expected) => {
            if (typeof func !== "function") {
              throw new TypeError(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : `${expected} is not a function`,
              );
            }
          };
          var noop2 = () => {};
          var catchRejection = (promise, onError = noop2) => {
            promise.catch(onError);
            return promise;
          };
          var addAbortSignalListener = (abortSignal, callback) => {
            abortSignal.addEventListener("abort", callback, {
              once: true,
            });
            return () => abortSignal.removeEventListener("abort", callback);
          };
          var abortControllerWithReason = (abortController, reason) => {
            const signal = abortController.signal;
            if (signal.aborted) {
              return;
            }
            if (!("reason" in signal)) {
              Object.defineProperty(signal, "reason", {
                enumerable: true,
                value: reason,
                configurable: true,
                writable: true,
              });
            }
            abortController.abort(reason);
          };
          // src/listenerMiddleware/task.ts
          var validateActive = (signal) => {
            if (signal.aborted) {
              const { reason } = signal;
              throw new TaskAbortError(reason);
            }
          };
          function raceWithSignal(signal, promise) {
            let cleanup = noop2;
            return new Promise((resolve, reject) => {
              const notifyRejection = () =>
                reject(new TaskAbortError(signal.reason));
              if (signal.aborted) {
                notifyRejection();
                return;
              }
              cleanup = addAbortSignalListener(signal, notifyRejection);
              promise.finally(() => cleanup()).then(resolve, reject);
            }).finally(() => {
              cleanup = noop2;
            });
          }
          var runTask = async (task2, cleanUp) => {
            try {
              await Promise.resolve();
              const value = await task2();
              return {
                status: "ok",
                value,
              };
            } catch (error) {
              return {
                status:
                  error instanceof TaskAbortError ? "cancelled" : "rejected",
                error,
              };
            } finally {
              cleanUp?.();
            }
          };
          var createPause = (signal) => {
            return (promise) => {
              return catchRejection(
                raceWithSignal(signal, promise).then((output) => {
                  validateActive(signal);
                  return output;
                }),
              );
            };
          };
          var createDelay = (signal) => {
            const pause = createPause(signal);
            return (timeoutMs) => {
              return pause(
                new Promise((resolve) => setTimeout(resolve, timeoutMs)),
              );
            };
          };
          // src/listenerMiddleware/index.ts
          var { assign } = Object;
          var INTERNAL_NIL_TOKEN = {};
          var alm = "listenerMiddleware";
          var createFork = (parentAbortSignal, parentBlockingPromises) => {
            const linkControllers = (controller) =>
              addAbortSignalListener(parentAbortSignal, () =>
                abortControllerWithReason(controller, parentAbortSignal.reason),
              );
            return (taskExecutor, opts) => {
              assertFunction(taskExecutor, "taskExecutor");
              const childAbortController = new AbortController();
              linkControllers(childAbortController);
              const result = runTask(
                async () => {
                  validateActive(parentAbortSignal);
                  validateActive(childAbortController.signal);
                  const result2 = await taskExecutor({
                    pause: createPause(childAbortController.signal),
                    delay: createDelay(childAbortController.signal),
                    signal: childAbortController.signal,
                  });
                  validateActive(childAbortController.signal);
                  return result2;
                },
                () =>
                  abortControllerWithReason(
                    childAbortController,
                    taskCompleted,
                  ),
              );
              if (opts?.autoJoin) {
                parentBlockingPromises.push(result.catch(noop2));
              }
              return {
                result: createPause(parentAbortSignal)(result),
                cancel() {
                  abortControllerWithReason(
                    childAbortController,
                    taskCancelled,
                  );
                },
              };
            };
          };
          var createTakePattern = (startListening, signal) => {
            const take = async (predicate, timeout) => {
              validateActive(signal);
              let unsubscribe = () => {};
              const tuplePromise = new Promise((resolve, reject) => {
                let stopListening = startListening({
                  predicate,
                  effect: (action, listenerApi) => {
                    listenerApi.unsubscribe();
                    resolve([
                      action,
                      listenerApi.getState(),
                      listenerApi.getOriginalState(),
                    ]);
                  },
                });
                unsubscribe = () => {
                  stopListening();
                  reject();
                };
              });
              const promises = [tuplePromise];
              if (timeout != null) {
                promises.push(
                  new Promise((resolve) => setTimeout(resolve, timeout, null)),
                );
              }
              try {
                const output = await raceWithSignal(
                  signal,
                  Promise.race(promises),
                );
                validateActive(signal);
                return output;
              } finally {
                unsubscribe();
              }
            };
            return (predicate, timeout) =>
              catchRejection(take(predicate, timeout));
          };
          var getListenerEntryPropsFrom = (options) => {
            let { type, actionCreator, matcher, predicate, effect } = options;
            if (type) {
              predicate = createAction(type).match;
            } else if (actionCreator) {
              type = actionCreator.type;
              predicate = actionCreator.match;
            } else if (matcher) {
              predicate = matcher;
            } else if (predicate) {
            } else {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "Creating or removing a listener requires one of the known fields for matching an action",
              );
            }
            assertFunction(effect, "options.listener");
            return {
              predicate,
              type,
              effect,
            };
          };
          var createListenerEntry = /* @__PURE__ */ assign(
            (options) => {
              const { type, predicate, effect } =
                getListenerEntryPropsFrom(options);
              const entry = {
                id: nanoid(),
                effect,
                type,
                predicate,
                pending: /* @__PURE__ */ new Set(),
                unsubscribe: () => {
                  throw new Error(
                    ("TURBOPACK compile-time falsy", 0)
                      ? ("TURBOPACK unreachable", undefined)
                      : "Unsubscribe not initialized",
                  );
                },
              };
              return entry;
            },
            {
              withTypes: () => createListenerEntry,
            },
          );
          var findListenerEntry = (listenerMap, options) => {
            const { type, effect, predicate } =
              getListenerEntryPropsFrom(options);
            return Array.from(listenerMap.values()).find((entry) => {
              const matchPredicateOrType =
                typeof type === "string"
                  ? entry.type === type
                  : entry.predicate === predicate;
              return matchPredicateOrType && entry.effect === effect;
            });
          };
          var cancelActiveListeners = (entry) => {
            entry.pending.forEach((controller) => {
              abortControllerWithReason(controller, listenerCancelled);
            });
          };
          var createClearListenerMiddleware = (listenerMap) => {
            return () => {
              listenerMap.forEach(cancelActiveListeners);
              listenerMap.clear();
            };
          };
          var safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {
            try {
              errorHandler(errorToNotify, errorInfo);
            } catch (errorHandlerError) {
              setTimeout(() => {
                throw errorHandlerError;
              }, 0);
            }
          };
          var addListener = /* @__PURE__ */ assign(
            /* @__PURE__ */ createAction(`${alm}/add`),
            {
              withTypes: () => addListener,
            },
          );
          var clearAllListeners = /* @__PURE__ */ createAction(
            `${alm}/removeAll`,
          );
          var removeListener = /* @__PURE__ */ assign(
            /* @__PURE__ */ createAction(`${alm}/remove`),
            {
              withTypes: () => removeListener,
            },
          );
          var defaultErrorHandler = (...args) => {
            console.error(`${alm}/error`, ...args);
          };
          var createListenerMiddleware = (middlewareOptions = {}) => {
            const listenerMap = /* @__PURE__ */ new Map();
            const { extra, onError = defaultErrorHandler } = middlewareOptions;
            assertFunction(onError, "onError");
            const insertEntry = (entry) => {
              entry.unsubscribe = () => listenerMap.delete(entry.id);
              listenerMap.set(entry.id, entry);
              return (cancelOptions) => {
                entry.unsubscribe();
                if (cancelOptions?.cancelActive) {
                  cancelActiveListeners(entry);
                }
              };
            };
            const startListening = (options) => {
              const entry =
                findListenerEntry(listenerMap, options) ??
                createListenerEntry(options);
              return insertEntry(entry);
            };
            assign(startListening, {
              withTypes: () => startListening,
            });
            const stopListening = (options) => {
              const entry = findListenerEntry(listenerMap, options);
              if (entry) {
                entry.unsubscribe();
                if (options.cancelActive) {
                  cancelActiveListeners(entry);
                }
              }
              return !!entry;
            };
            assign(stopListening, {
              withTypes: () => stopListening,
            });
            const notifyListener = async (
              entry,
              action,
              api,
              getOriginalState,
            ) => {
              const internalTaskController = new AbortController();
              const take = createTakePattern(
                startListening,
                internalTaskController.signal,
              );
              const autoJoinPromises = [];
              try {
                entry.pending.add(internalTaskController);
                await Promise.resolve(
                  entry.effect(
                    action, // Use assign() rather than ... to avoid extra helper functions added to bundle
                    assign({}, api, {
                      getOriginalState,
                      condition: (predicate, timeout) =>
                        take(predicate, timeout).then(Boolean),
                      take,
                      delay: createDelay(internalTaskController.signal),
                      pause: createPause(internalTaskController.signal),
                      extra,
                      signal: internalTaskController.signal,
                      fork: createFork(
                        internalTaskController.signal,
                        autoJoinPromises,
                      ),
                      unsubscribe: entry.unsubscribe,
                      subscribe: () => {
                        listenerMap.set(entry.id, entry);
                      },
                      cancelActiveListeners: () => {
                        entry.pending.forEach((controller, _, set) => {
                          if (controller !== internalTaskController) {
                            abortControllerWithReason(
                              controller,
                              listenerCancelled,
                            );
                            set.delete(controller);
                          }
                        });
                      },
                      cancel: () => {
                        abortControllerWithReason(
                          internalTaskController,
                          listenerCancelled,
                        );
                        entry.pending.delete(internalTaskController);
                      },
                      throwIfCancelled: () => {
                        validateActive(internalTaskController.signal);
                      },
                    }),
                  ),
                );
              } catch (listenerError) {
                if (!(listenerError instanceof TaskAbortError)) {
                  safelyNotifyError(onError, listenerError, {
                    raisedBy: "effect",
                  });
                }
              } finally {
                await Promise.all(autoJoinPromises);
                abortControllerWithReason(
                  internalTaskController,
                  listenerCompleted,
                );
                entry.pending.delete(internalTaskController);
              }
            };
            const clearListenerMiddleware =
              createClearListenerMiddleware(listenerMap);
            const middleware = (api) => (next) => (action) => {
              if (
                !(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                  "isAction"
                ])(action)
              ) {
                return next(action);
              }
              if (addListener.match(action)) {
                return startListening(action.payload);
              }
              if (clearAllListeners.match(action)) {
                clearListenerMiddleware();
                return;
              }
              if (removeListener.match(action)) {
                return stopListening(action.payload);
              }
              let originalState = api.getState();
              const getOriginalState = () => {
                if (originalState === INTERNAL_NIL_TOKEN) {
                  throw new Error(
                    ("TURBOPACK compile-time falsy", 0)
                      ? ("TURBOPACK unreachable", undefined)
                      : `${alm}: getOriginalState can only be called synchronously`,
                  );
                }
                return originalState;
              };
              let result;
              try {
                result = next(action);
                if (listenerMap.size > 0) {
                  const currentState = api.getState();
                  const listenerEntries = Array.from(listenerMap.values());
                  for (const entry of listenerEntries) {
                    let runListener = false;
                    try {
                      runListener = entry.predicate(
                        action,
                        currentState,
                        originalState,
                      );
                    } catch (predicateError) {
                      runListener = false;
                      safelyNotifyError(onError, predicateError, {
                        raisedBy: "predicate",
                      });
                    }
                    if (!runListener) {
                      continue;
                    }
                    notifyListener(entry, action, api, getOriginalState);
                  }
                }
              } finally {
                originalState = INTERNAL_NIL_TOKEN;
              }
              return result;
            };
            return {
              middleware,
              startListening,
              stopListening,
              clearListeners: clearListenerMiddleware,
            };
          };
          var createMiddlewareEntry = (middleware) => ({
            middleware,
            applied: /* @__PURE__ */ new Map(),
          });
          var matchInstance = (instanceId) => (action) =>
            action?.meta?.instanceId === instanceId;
          var createDynamicMiddleware = () => {
            const instanceId = nanoid();
            const middlewareMap = /* @__PURE__ */ new Map();
            const withMiddleware = Object.assign(
              createAction("dynamicMiddleware/add", (...middlewares) => ({
                payload: middlewares,
                meta: {
                  instanceId,
                },
              })),
              {
                withTypes: () => withMiddleware,
              },
            );
            const addMiddleware = Object.assign(
              function addMiddleware2(...middlewares) {
                middlewares.forEach((middleware2) => {
                  getOrInsertComputed(
                    middlewareMap,
                    middleware2,
                    createMiddlewareEntry,
                  );
                });
              },
              {
                withTypes: () => addMiddleware,
              },
            );
            const getFinalMiddleware = (api) => {
              const appliedMiddleware = Array.from(middlewareMap.values()).map(
                (entry) =>
                  getOrInsertComputed(entry.applied, api, entry.middleware),
              );
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "compose"
              ])(...appliedMiddleware);
            };
            const isWithMiddleware = isAllOf(
              withMiddleware,
              matchInstance(instanceId),
            );
            const middleware = (api) => (next) => (action) => {
              if (isWithMiddleware(action)) {
                addMiddleware(...action.payload);
                return api.dispatch;
              }
              return getFinalMiddleware(api)(next)(action);
            };
            return {
              middleware,
              addMiddleware,
              withMiddleware,
              instanceId,
            };
          };
          var isSliceLike = (maybeSliceLike) =>
            "reducerPath" in maybeSliceLike &&
            typeof maybeSliceLike.reducerPath === "string";
          var getReducers = (slices) =>
            slices.flatMap((sliceOrMap) =>
              isSliceLike(sliceOrMap)
                ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]]
                : Object.entries(sliceOrMap),
            );
          var ORIGINAL_STATE = Symbol.for("rtk-state-proxy-original");
          var isStateProxy = (value) => !!value && !!value[ORIGINAL_STATE];
          var stateProxyMap = /* @__PURE__ */ new WeakMap();
          var createStateProxy = (state, reducerMap, initialStateCache) =>
            getOrInsertComputed(
              stateProxyMap,
              state,
              () =>
                new Proxy(state, {
                  get: (target, prop, receiver) => {
                    if (prop === ORIGINAL_STATE) return target;
                    const result = Reflect.get(target, prop, receiver);
                    if (typeof result === "undefined") {
                      const cached = initialStateCache[prop];
                      if (typeof cached !== "undefined") return cached;
                      const reducer = reducerMap[prop];
                      if (reducer) {
                        const reducerResult = reducer(void 0, {
                          type: nanoid(),
                        });
                        if (typeof reducerResult === "undefined") {
                          throw new Error(
                            ("TURBOPACK compile-time falsy", 0)
                              ? ("TURBOPACK unreachable", undefined)
                              : `The slice reducer for key "${prop.toString()}" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`,
                          );
                        }
                        initialStateCache[prop] = reducerResult;
                        return reducerResult;
                      }
                    }
                    return result;
                  },
                }),
            );
          var original = (state) => {
            if (!isStateProxy(state)) {
              throw new Error(
                ("TURBOPACK compile-time falsy", 0)
                  ? ("TURBOPACK unreachable", undefined)
                  : "original must be used on state Proxy",
              );
            }
            return state[ORIGINAL_STATE];
          };
          var emptyObject = {};
          var noopReducer = (state = emptyObject) => state;
          function combineSlices(...slices) {
            const reducerMap = Object.fromEntries(getReducers(slices));
            const getReducer = () =>
              Object.keys(reducerMap).length
                ? (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                    "combineReducers"
                  ])(reducerMap)
                : noopReducer;
            let reducer = getReducer();
            function combinedReducer(state, action) {
              return reducer(state, action);
            }
            combinedReducer.withLazyLoadedSlices = () => combinedReducer;
            const initialStateCache = {};
            const inject = (slice, config = {}) => {
              const { reducerPath, reducer: reducerToInject } = slice;
              const currentReducer = reducerMap[reducerPath];
              if (
                !config.overrideExisting &&
                currentReducer &&
                currentReducer !== reducerToInject
              ) {
                if (
                  typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "default"
                  ] !== "undefined" &&
                  ("TURBOPACK compile-time value", "development") ===
                    "development"
                ) {
                  console.error(
                    `called \`inject\` to override already-existing reducer ${reducerPath} without specifying \`overrideExisting: true\``,
                  );
                }
                return combinedReducer;
              }
              if (
                config.overrideExisting &&
                currentReducer !== reducerToInject
              ) {
                delete initialStateCache[reducerPath];
              }
              reducerMap[reducerPath] = reducerToInject;
              reducer = getReducer();
              return combinedReducer;
            };
            const selector = Object.assign(
              function makeSelector(selectorFn, selectState) {
                return function selector2(state, ...args) {
                  return selectorFn(
                    createStateProxy(
                      selectState ? selectState(state, ...args) : state,
                      reducerMap,
                      initialStateCache,
                    ),
                    ...args,
                  );
                };
              },
              {
                original,
              },
            );
            return Object.assign(combinedReducer, {
              inject,
              selector,
            });
          }
          // src/formatProdErrorMessage.ts
          function formatProdErrorMessage(code) {
            return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
          }
          //# sourceMappingURL=redux-toolkit.modern.mjs.map
        }
      },
    "[project]/node_modules/stylis/src/Utility.js [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        /**
         * @param {number}
         * @return {number}
         */ __turbopack_context__.s({
          abs: () => abs,
          append: () => append,
          assign: () => assign,
          charat: () => charat,
          combine: () => combine,
          from: () => from,
          hash: () => hash,
          indexof: () => indexof,
          match: () => match,
          replace: () => replace,
          sizeof: () => sizeof,
          strlen: () => strlen,
          substr: () => substr,
          trim: () => trim,
        });
        var abs = Math.abs;
        var from = String.fromCharCode;
        var assign = Object.assign;
        function hash(value, length) {
          return charat(value, 0) ^ 45
            ? (((((((length << 2) ^ charat(value, 0)) << 2) ^
                charat(value, 1)) <<
                2) ^
                charat(value, 2)) <<
                2) ^
                charat(value, 3)
            : 0;
        }
        function trim(value) {
          return value.trim();
        }
        function match(value, pattern) {
          return (value = pattern.exec(value)) ? value[0] : value;
        }
        function replace(value, pattern, replacement) {
          return value.replace(pattern, replacement);
        }
        function indexof(value, search) {
          return value.indexOf(search);
        }
        function charat(value, index) {
          return value.charCodeAt(index) | 0;
        }
        function substr(value, begin, end) {
          return value.slice(begin, end);
        }
        function strlen(value) {
          return value.length;
        }
        function sizeof(value) {
          return value.length;
        }
        function append(value, array) {
          return array.push(value), value;
        }
        function combine(array, callback) {
          return array.map(callback).join("");
        }
      }
    },
    "[project]/node_modules/stylis/src/Tokenizer.js [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        __turbopack_context__.s({
          alloc: () => alloc,
          caret: () => caret,
          char: () => char,
          character: () => character,
          characters: () => characters,
          column: () => column,
          commenter: () => commenter,
          copy: () => copy,
          dealloc: () => dealloc,
          delimit: () => delimit,
          delimiter: () => delimiter,
          escaping: () => escaping,
          identifier: () => identifier,
          length: () => length,
          line: () => line,
          next: () => next,
          node: () => node,
          peek: () => peek,
          position: () => position,
          prev: () => prev,
          slice: () => slice,
          token: () => token,
          tokenize: () => tokenize,
          tokenizer: () => tokenizer,
          whitespace: () => whitespace,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Utility.js [client] (ecmascript)",
          );
        var line = 1;
        var column = 1;
        var length = 0;
        var position = 0;
        var character = 0;
        var characters = "";
        function node(value, root, parent, type, props, children, length) {
          return {
            value: value,
            root: root,
            parent: parent,
            type: type,
            props: props,
            children: children,
            line: line,
            column: column,
            length: length,
            return: "",
          };
        }
        function copy(root, props) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "assign"
          ])(
            node("", null, null, "", null, null, 0),
            root,
            {
              length: -root.length,
            },
            props,
          );
        }
        function char() {
          return character;
        }
        function prev() {
          character =
            position > 0
              ? (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "charat"
                ])(characters, --position)
              : 0;
          if ((column--, character === 10)) (column = 1), line--;
          return character;
        }
        function next() {
          character =
            position < length
              ? (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "charat"
                ])(characters, position++)
              : 0;
          if ((column++, character === 10)) (column = 1), line++;
          return character;
        }
        function peek() {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "charat"
          ])(characters, position);
        }
        function caret() {
          return position;
        }
        function slice(begin, end) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "substr"
          ])(characters, begin, end);
        }
        function token(type) {
          switch (type) {
            // \0 \t \n \r \s whitespace token
            case 0:
            case 9:
            case 10:
            case 13:
            case 32:
              return 5;
            // ! + , / > @ ~ isolate token
            case 33:
            case 43:
            case 44:
            case 47:
            case 62:
            case 64:
            case 126:
            // ; { } breakpoint token
            case 59:
            case 123:
            case 125:
              return 4;
            // : accompanied token
            case 58:
              return 3;
            // " ' ( [ opening delimit token
            case 34:
            case 39:
            case 40:
            case 91:
              return 2;
            // ) ] closing delimit token
            case 41:
            case 93:
              return 1;
          }
          return 0;
        }
        function alloc(value) {
          return (
            (line = column = 1),
            (length = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "strlen"
            ])((characters = value))),
            (position = 0),
            []
          );
        }
        function dealloc(value) {
          return (characters = ""), value;
        }
        function delimit(type) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "trim"
          ])(
            slice(
              position - 1,
              delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type),
            ),
          );
        }
        function tokenize(value) {
          return dealloc(tokenizer(alloc(value)));
        }
        function whitespace(type) {
          while ((character = peek()))
            if (character < 33) next();
            else break;
          return token(type) > 2 || token(character) > 3 ? "" : " ";
        }
        function tokenizer(children) {
          while (next())
            switch (token(character)) {
              case 0:
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "append"
                ])(identifier(position - 1), children);
                break;
              case 2:
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "append"
                ])(delimit(character), children);
                break;
              default:
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "append"
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "from"
                  ])(character),
                  children,
                );
            }
          return children;
        }
        function escaping(index, count) {
          while (--count && next())
            // not 0-9 A-F a-f
            if (
              character < 48 ||
              character > 102 ||
              (character > 57 && character < 65) ||
              (character > 70 && character < 97)
            )
              break;
          return slice(
            index,
            caret() + (count < 6 && peek() == 32 && next() == 32),
          );
        }
        function delimiter(type) {
          while (next())
            switch (character) {
              // ] ) " '
              case type:
                return position;
              // " '
              case 34:
              case 39:
                if (type !== 34 && type !== 39) delimiter(character);
                break;
              // (
              case 40:
                if (type === 41) delimiter(type);
                break;
              // \
              case 92:
                next();
                break;
            }
          return position;
        }
        function commenter(type, index) {
          while (next())
            // //
            if (type + character === 47 + 10) break;
            else if (type + character === 42 + 42 && peek() === 47) break;
          return (
            "/*" +
            slice(index, position - 1) +
            "*" +
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "from"
            ])(type === 47 ? type : next())
          );
        }
        function identifier(index) {
          while (!token(peek())) next();
          return slice(index, position);
        }
      }
    },
    "[project]/node_modules/stylis/src/Enum.js [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        __turbopack_context__.s({
          CHARSET: () => CHARSET,
          COMMENT: () => COMMENT,
          COUNTER_STYLE: () => COUNTER_STYLE,
          DECLARATION: () => DECLARATION,
          DOCUMENT: () => DOCUMENT,
          FONT_FACE: () => FONT_FACE,
          FONT_FEATURE_VALUES: () => FONT_FEATURE_VALUES,
          IMPORT: () => IMPORT,
          KEYFRAMES: () => KEYFRAMES,
          LAYER: () => LAYER,
          MEDIA: () => MEDIA,
          MOZ: () => MOZ,
          MS: () => MS,
          NAMESPACE: () => NAMESPACE,
          PAGE: () => PAGE,
          RULESET: () => RULESET,
          SUPPORTS: () => SUPPORTS,
          VIEWPORT: () => VIEWPORT,
          WEBKIT: () => WEBKIT,
        });
        var MS = "-ms-";
        var MOZ = "-moz-";
        var WEBKIT = "-webkit-";
        var COMMENT = "comm";
        var RULESET = "rule";
        var DECLARATION = "decl";
        var PAGE = "@page";
        var MEDIA = "@media";
        var IMPORT = "@import";
        var CHARSET = "@charset";
        var VIEWPORT = "@viewport";
        var SUPPORTS = "@supports";
        var DOCUMENT = "@document";
        var NAMESPACE = "@namespace";
        var KEYFRAMES = "@keyframes";
        var FONT_FACE = "@font-face";
        var COUNTER_STYLE = "@counter-style";
        var FONT_FEATURE_VALUES = "@font-feature-values";
        var LAYER = "@layer";
      }
    },
    "[project]/node_modules/stylis/src/Serializer.js [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        __turbopack_context__.s({
          serialize: () => serialize,
          stringify: () => stringify,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Enum.js [client] (ecmascript)",
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Utility.js [client] (ecmascript)",
          );
        function serialize(children, callback) {
          var output = "";
          var length = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "sizeof"
          ])(children);
          for (var i = 0; i < length; i++)
            output += callback(children[i], i, children, callback) || "";
          return output;
        }
        function stringify(element, index, children, callback) {
          switch (element.type) {
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "LAYER"
            ]:
              if (element.children.length) break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "IMPORT"
            ]:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "DECLARATION"
            ]:
              return (element.return = element.return || element.value);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "COMMENT"
            ]:
              return "";
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "KEYFRAMES"
            ]:
              return (element.return =
                element.value +
                "{" +
                serialize(element.children, callback) +
                "}");
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "RULESET"
            ]:
              element.value = element.props.join(",");
          }
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "strlen"
          ])((children = serialize(element.children, callback)))
            ? (element.return = element.value + "{" + children + "}")
            : "";
        }
      }
    },
    "[project]/node_modules/stylis/src/Prefixer.js [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        __turbopack_context__.s({
          prefix: () => prefix,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Enum.js [client] (ecmascript)",
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Utility.js [client] (ecmascript)",
          );
        function prefix(value, length, children) {
          switch (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "hash"
            ])(value, length)
          ) {
            // color-adjust
            case 5103:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                "print-" +
                value +
                value
              );
            // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
            case 5737:
            case 4201:
            case 3177:
            case 3433:
            case 1641:
            case 4457:
            case 2921:
            // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
            case 5572:
            case 6356:
            case 5844:
            case 3191:
            case 6645:
            case 3005:
            // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
            case 6391:
            case 5879:
            case 5623:
            case 6135:
            case 4599:
            case 4855:
            // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
            case 4215:
            case 6389:
            case 5109:
            case 5365:
            case 5621:
            case 3829:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                value
              );
            // tab-size
            case 4789:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MOZ"
                ] +
                value +
                value
              );
            // appearance, user-select, transform, hyphens, text-size-adjust
            case 5349:
            case 4246:
            case 4810:
            case 6968:
            case 2756:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MOZ"
                ] +
                value +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                value +
                value
              );
            // writing-mode
            case 5936:
              switch (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "charat"
                ])(value, length + 11)
              ) {
                // vertical-l(r)
                case 114:
                  return (
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "WEBKIT"
                    ] +
                    value +
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "MS"
                    ] +
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "replace"
                    ])(value, /[svh]\w+-[tblr]{2}/, "tb") +
                    value
                  );
                // vertical-r(l)
                case 108:
                  return (
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "WEBKIT"
                    ] +
                    value +
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "MS"
                    ] +
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "replace"
                    ])(value, /[svh]\w+-[tblr]{2}/, "tb-rl") +
                    value
                  );
                // horizontal(-)tb
                case 45:
                  return (
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "WEBKIT"
                    ] +
                    value +
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "MS"
                    ] +
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "replace"
                    ])(value, /[svh]\w+-[tblr]{2}/, "lr") +
                    value
                  );
              }
            // flex, flex-direction, scroll-snap-type, writing-mode
            case 6828:
            case 4268:
            case 2903:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                value +
                value
              );
            // order
            case 6165:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                "flex-" +
                value +
                value
              );
            // align-items
            case 5187:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(
                  value,
                  /(\w+).+(:[^]+)/,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "WEBKIT"
                  ] +
                    "box-$1$2" +
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "MS"
                    ] +
                    "flex-$1$2",
                ) +
                value
              );
            // align-self
            case 5443:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                "flex-item-" +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(value, /flex-|-self/g, "") +
                (!(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "match"
                ])(value, /flex-|baseline/)
                  ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "MS"
                    ] +
                    "grid-row-" +
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "replace"
                    ])(value, /flex-|-self/g, "")
                  : "") +
                value
              );
            // align-content
            case 4675:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                "flex-line-pack" +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(value, /align-content|flex-|-self/g, "") +
                value
              );
            // flex-shrink
            case 5548:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(value, "shrink", "negative") +
                value
              );
            // flex-basis
            case 5292:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(value, "basis", "preferred-size") +
                value
              );
            // flex-grow
            case 6060:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                "box-" +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(value, "-grow", "") +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(value, "grow", "positive") +
                value
              );
            // transition
            case 4554:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(
                  value,
                  /([^-])(transform)/g,
                  "$1" +
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "WEBKIT"
                    ] +
                    "$2",
                ) +
                value
              );
            // cursor
            case 6187:
              return (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "replace"
                  ])(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "replace"
                    ])(
                      value,
                      /(zoom-|grab)/,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "WEBKIT"
                      ] + "$1",
                    ),
                    /(image-set)/,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "WEBKIT"
                    ] + "$1",
                  ),
                  value,
                  "",
                ) + value
              );
            // background, background-image
            case 5495:
            case 3959:
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "replace"
              ])(
                value,
                /(image-set\([^]*)/,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                  "$1" +
                  "$`$1",
              );
            // justify-content
            case 4968:
              return (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "replace"
                  ])(
                    value,
                    /(.+:)(flex-)?(.*)/,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "WEBKIT"
                    ] +
                      "box-pack:$3" +
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "MS"
                      ] +
                      "flex-pack:$3",
                  ),
                  /s.+-b[^;]+/,
                  "justify",
                ) +
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "WEBKIT"
                ] +
                value +
                value
              );
            // justify-self
            case 4200:
              if (
                !(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "match"
                ])(value, /flex-|baseline/)
              )
                return (
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "MS"
                  ] +
                  "grid-column-align" +
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "substr"
                  ])(value, length) +
                  value
                );
              break;
            // grid-template-(columns|rows)
            case 2592:
            case 3360:
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(value, "template-", "") +
                value
              );
            // grid-(row|column)-start
            case 4384:
            case 3616:
              if (
                children &&
                children.some(function (element, index) {
                  return (
                    (length = index),
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "match"
                    ])(element.props, /grid-\w+-end/)
                  );
                })
              ) {
                return ~(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "indexof"
                ])(value + (children = children[length].value), "span")
                  ? value
                  : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "MS"
                    ] +
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "replace"
                      ])(value, "-start", "") +
                      value +
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "MS"
                      ] +
                      "grid-row-span:" +
                      (~(0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "indexof"
                      ])(children, "span")
                        ? (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "match"
                          ])(children, /\d+/)
                        : +(0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "match"
                          ])(children, /\d+/) -
                          +(0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "match"
                          ])(value, /\d+/)) +
                      ";";
              }
              return (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "MS"
                ] +
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(value, "-start", "") +
                value
              );
            // grid-(row|column)-end
            case 4896:
            case 4128:
              return children &&
                children.some(function (element) {
                  return (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "match"
                  ])(element.props, /grid-\w+-start/);
                })
                ? value
                : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "MS"
                  ] +
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "replace"
                    ])(
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "replace"
                      ])(value, "-end", "-span"),
                      "span ",
                      "",
                    ) +
                    value;
            // (margin|padding)-inline-(start|end)
            case 4095:
            case 3583:
            case 4068:
            case 2532:
              return (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(
                  value,
                  /(.+)-inline(.+)/,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "WEBKIT"
                  ] + "$1$2",
                ) + value
              );
            // (min|max)?(width|height|inline-size|block-size)
            case 8116:
            case 7059:
            case 5753:
            case 5535:
            case 5445:
            case 5701:
            case 4933:
            case 4677:
            case 5533:
            case 5789:
            case 5021:
            case 4765:
              // stretch, max-content, min-content, fill-available
              if (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "strlen"
                ])(value) -
                  1 -
                  length >
                6
              )
                switch (
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "charat"
                  ])(value, length + 1)
                ) {
                  // (m)ax-content, (m)in-content
                  case 109:
                    // -
                    if (
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "charat"
                      ])(value, length + 4) !== 45
                    )
                      break;
                  // (f)ill-available, (f)it-content
                  case 102:
                    return (
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "replace"
                      ])(
                        value,
                        /(.+:)(.+)-([^]+)/,
                        "$1" +
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "WEBKIT"
                          ] +
                          "$2-$3" +
                          "$1" +
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "MOZ"
                          ] +
                          ((0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "charat"
                          ])(value, length + 3) == 108
                            ? "$3"
                            : "$2-$3"),
                      ) + value
                    );
                  // (s)tretch
                  case 115:
                    return ~(0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "indexof"
                    ])(value, "stretch")
                      ? prefix(
                          (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "replace"
                          ])(value, "stretch", "fill-available"),
                          length,
                          children,
                        ) + value
                      : value;
                }
              break;
            // grid-(column|row)
            case 5152:
            case 5920:
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "replace"
              ])(
                value,
                /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,
                function (_, a, b, c, d, e, f) {
                  return (
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "MS"
                    ] +
                    a +
                    ":" +
                    b +
                    f +
                    (c
                      ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "MS"
                        ] +
                        a +
                        "-span:" +
                        (d ? e : +e - +b) +
                        f
                      : "") +
                    value
                  );
                },
              );
            // position: sticky
            case 4949:
              // stick(y)?
              if (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "charat"
                ])(value, length + 6) === 121
              )
                return (
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "replace"
                  ])(
                    value,
                    ":",
                    ":" +
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "WEBKIT"
                      ],
                  ) + value
                );
              break;
            // display: (flex|inline-flex|grid|inline-grid)
            case 6444:
              switch (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "charat"
                ])(
                  value,
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "charat"
                  ])(value, 14) === 45
                    ? 18
                    : 11,
                )
              ) {
                // (inline-)?fle(x)
                case 120:
                  return (
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "replace"
                    ])(
                      value,
                      /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,
                      "$1" +
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "WEBKIT"
                        ] +
                        ((0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "charat"
                        ])(value, 14) === 45
                          ? "inline-"
                          : "") +
                        "box$3" +
                        "$1" +
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "WEBKIT"
                        ] +
                        "$2$3" +
                        "$1" +
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "MS"
                        ] +
                        "$2box$3",
                    ) + value
                  );
                // (inline-)?gri(d)
                case 100:
                  return (
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "replace"
                    ])(
                      value,
                      ":",
                      ":" +
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "MS"
                        ],
                    ) + value
                  );
              }
              break;
            // scroll-margin, scroll-margin-(top|right|bottom|left)
            case 5719:
            case 2647:
            case 2135:
            case 3927:
            case 2391:
              return (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "replace"
                ])(value, "scroll-", "scroll-snap-") + value
              );
          }
          return value;
        }
      }
    },
    "[project]/node_modules/stylis/src/Middleware.js [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        __turbopack_context__.s({
          middleware: () => middleware,
          namespace: () => namespace,
          prefixer: () => prefixer,
          rulesheet: () => rulesheet,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Enum.js [client] (ecmascript)",
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Utility.js [client] (ecmascript)",
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Tokenizer.js [client] (ecmascript)",
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Serializer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Serializer.js [client] (ecmascript)",
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Prefixer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Prefixer.js [client] (ecmascript)",
          );
        function middleware(collection) {
          var length = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "sizeof"
          ])(collection);
          return function (element, index, children, callback) {
            var output = "";
            for (var i = 0; i < length; i++)
              output += collection[i](element, index, children, callback) || "";
            return output;
          };
        }
        function rulesheet(callback) {
          return function (element) {
            if (!element.root) {
              if ((element = element.return)) callback(element);
            }
          };
        }
        function prefixer(element, index, children, callback) {
          if (element.length > -1) {
            if (!element.return)
              switch (element.type) {
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "DECLARATION"
                ]:
                  element.return = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Prefixer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "prefix"
                  ])(element.value, element.length, children);
                  return;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "KEYFRAMES"
                ]:
                  return (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Serializer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "serialize"
                  ])(
                    [
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "copy"
                      ])(element, {
                        value: (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "replace"
                        ])(
                          element.value,
                          "@",
                          "@" +
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                              "WEBKIT"
                            ],
                        ),
                      }),
                    ],
                    callback,
                  );
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "RULESET"
                ]:
                  if (element.length)
                    return (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "combine"
                    ])(element.props, function (value) {
                      switch (
                        (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "match"
                        ])(value, /(::plac\w+|:read-\w+)/)
                      ) {
                        // :read-(only|write)
                        case ":read-only":
                        case ":read-write":
                          return (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Serializer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "serialize"
                          ])(
                            [
                              (0,
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                "copy"
                              ])(element, {
                                props: [
                                  (0,
                                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                    "replace"
                                  ])(
                                    value,
                                    /:(read-\w+)/,
                                    ":" +
                                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                        "MOZ"
                                      ] +
                                      "$1",
                                  ),
                                ],
                              }),
                            ],
                            callback,
                          );
                        // :placeholder
                        case "::placeholder":
                          return (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Serializer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "serialize"
                          ])(
                            [
                              (0,
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                "copy"
                              ])(element, {
                                props: [
                                  (0,
                                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                    "replace"
                                  ])(
                                    value,
                                    /:(plac\w+)/,
                                    ":" +
                                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                        "WEBKIT"
                                      ] +
                                      "input-$1",
                                  ),
                                ],
                              }),
                              (0,
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                "copy"
                              ])(element, {
                                props: [
                                  (0,
                                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                    "replace"
                                  ])(
                                    value,
                                    /:(plac\w+)/,
                                    ":" +
                                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                        "MOZ"
                                      ] +
                                      "$1",
                                  ),
                                ],
                              }),
                              (0,
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                "copy"
                              ])(element, {
                                props: [
                                  (0,
                                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                    "replace"
                                  ])(
                                    value,
                                    /:(plac\w+)/,
                                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                      "MS"
                                    ] + "input-$1",
                                  ),
                                ],
                              }),
                            ],
                            callback,
                          );
                      }
                      return "";
                    });
              }
          }
        }
        function namespace(element) {
          switch (element.type) {
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "RULESET"
            ]:
              element.props = element.props.map(function (value) {
                return (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "combine"
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "tokenize"
                  ])(value),
                  function (value, index, children) {
                    switch (
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "charat"
                      ])(value, 0)
                    ) {
                      // \f
                      case 12:
                        return (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "substr"
                        ])(
                          value,
                          1,
                          (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "strlen"
                          ])(value),
                        );
                      // \0 ( + > ~
                      case 0:
                      case 40:
                      case 43:
                      case 62:
                      case 126:
                        return value;
                      // :
                      case 58:
                        if (children[++index] === "global")
                          (children[index] = ""),
                            (children[++index] =
                              "\f" +
                              (0,
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                "substr"
                              ])(children[index], (index = 1), -1));
                      // \s
                      case 32:
                        return index === 1 ? "" : value;
                      default:
                        switch (index) {
                          case 0:
                            element = value;
                            return (0,
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                              "sizeof"
                            ])(children) > 1
                              ? ""
                              : value;
                          case (index =
                            (0,
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                              "sizeof"
                            ])(children) - 1):
                          case 2:
                            return index === 2
                              ? value + element + element
                              : value + element;
                          default:
                            return value;
                        }
                    }
                  },
                );
              });
          }
        }
      }
    },
    "[project]/node_modules/stylis/src/Parser.js [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        __turbopack_context__.s({
          comment: () => comment,
          compile: () => compile,
          declaration: () => declaration,
          parse: () => parse,
          ruleset: () => ruleset,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Enum.js [client] (ecmascript)",
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Utility.js [client] (ecmascript)",
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/stylis/src/Tokenizer.js [client] (ecmascript)",
          );
        function compile(value) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "dealloc"
          ])(
            parse(
              "",
              null,
              null,
              null,
              [""],
              (value = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "alloc"
              ])(value)),
              0,
              [0],
              value,
            ),
          );
        }
        function parse(
          value,
          root,
          parent,
          rule,
          rules,
          rulesets,
          pseudo,
          points,
          declarations,
        ) {
          var index = 0;
          var offset = 0;
          var length = pseudo;
          var atrule = 0;
          var property = 0;
          var previous = 0;
          var variable = 1;
          var scanning = 1;
          var ampersand = 1;
          var character = 0;
          var type = "";
          var props = rules;
          var children = rulesets;
          var reference = rule;
          var characters = type;
          while (scanning)
            switch (
              ((previous = character),
              (character = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "next"
              ])()))
            ) {
              // (
              case 40:
                if (
                  previous != 108 &&
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "charat"
                  ])(characters, length - 1) == 58
                ) {
                  if (
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "indexof"
                    ])(
                      (characters += (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "replace"
                      ])(
                        (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "delimit"
                        ])(character),
                        "&",
                        "&\f",
                      )),
                      "&\f",
                    ) != -1
                  )
                    ampersand = -1;
                  break;
                }
              // " ' [
              case 34:
              case 39:
              case 91:
                characters += (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "delimit"
                ])(character);
                break;
              // \t \n \r \s
              case 9:
              case 10:
              case 13:
              case 32:
                characters += (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "whitespace"
                ])(previous);
                break;
              // \
              case 92:
                characters += (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "escaping"
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "caret"
                  ])() - 1,
                  7,
                );
                continue;
              // /
              case 47:
                switch (
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "peek"
                  ])()
                ) {
                  case 42:
                  case 47:
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "append"
                    ])(
                      comment(
                        (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "commenter"
                        ])(
                          (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "next"
                          ])(),
                          (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "caret"
                          ])(),
                        ),
                        root,
                        parent,
                      ),
                      declarations,
                    );
                    break;
                  default:
                    characters += "/";
                }
                break;
              // {
              case 123 * variable:
                points[index++] =
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "strlen"
                  ])(characters) * ampersand;
              // } ; \0
              case 125 * variable:
              case 59:
              case 0:
                switch (character) {
                  // \0 }
                  case 0:
                  case 125:
                    scanning = 0;
                  // ;
                  case 59 + offset:
                    if (ampersand == -1)
                      characters = (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "replace"
                      ])(characters, /\f/g, "");
                    if (
                      property > 0 &&
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "strlen"
                      ])(characters) - length
                    )
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "append"
                      ])(
                        property > 32
                          ? declaration(
                              characters + ";",
                              rule,
                              parent,
                              length - 1,
                            )
                          : declaration(
                              (0,
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                "replace"
                              ])(characters, " ", "") + ";",
                              rule,
                              parent,
                              length - 2,
                            ),
                        declarations,
                      );
                    break;
                  // @ ;
                  case 59:
                    characters += ";";
                  // { rule/at-rule
                  default:
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "append"
                    ])(
                      (reference = ruleset(
                        characters,
                        root,
                        parent,
                        index,
                        offset,
                        rules,
                        points,
                        type,
                        (props = []),
                        (children = []),
                        length,
                      )),
                      rulesets,
                    );
                    if (character === 123)
                      if (offset === 0)
                        parse(
                          characters,
                          root,
                          reference,
                          reference,
                          props,
                          rulesets,
                          length,
                          points,
                          children,
                        );
                      else
                        switch (
                          atrule === 99 &&
                          (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "charat"
                          ])(characters, 3) === 110
                            ? 100
                            : atrule
                        ) {
                          // d l m s
                          case 100:
                          case 108:
                          case 109:
                          case 115:
                            parse(
                              value,
                              reference,
                              reference,
                              rule &&
                                (0,
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                  "append"
                                ])(
                                  ruleset(
                                    value,
                                    reference,
                                    reference,
                                    0,
                                    0,
                                    rules,
                                    points,
                                    type,
                                    rules,
                                    (props = []),
                                    length,
                                  ),
                                  children,
                                ),
                              rules,
                              children,
                              length,
                              points,
                              rule ? props : children,
                            );
                            break;
                          default:
                            parse(
                              characters,
                              reference,
                              reference,
                              reference,
                              [""],
                              children,
                              0,
                              points,
                              children,
                            );
                        }
                }
                (index = offset = property = 0),
                  (variable = ampersand = 1),
                  (type = characters = ""),
                  (length = pseudo);
                break;
              // :
              case 58:
                (length =
                  1 +
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "strlen"
                  ])(characters)),
                  (property = previous);
              default:
                if (variable < 1) {
                  if (character == 123) --variable;
                  else if (
                    character == 125 &&
                    variable++ == 0 &&
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "prev"
                    ])() == 125
                  )
                    continue;
                }
                switch (
                  ((characters += (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "from"
                  ])(character)),
                  character * variable)
                ) {
                  // &
                  case 38:
                    ampersand = offset > 0 ? 1 : ((characters += "\f"), -1);
                    break;
                  // ,
                  case 44:
                    (points[index++] =
                      ((0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "strlen"
                      ])(characters) -
                        1) *
                      ampersand),
                      (ampersand = 1);
                    break;
                  // @
                  case 64:
                    // -
                    if (
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "peek"
                      ])() === 45
                    )
                      characters += (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "delimit"
                      ])(
                        (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "next"
                        ])(),
                      );
                    (atrule = (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                      "peek"
                    ])()),
                      (offset = length =
                        (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                          "strlen"
                        ])(
                          (type = characters +=
                            (0,
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                              "identifier"
                            ])(
                              (0,
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                                "caret"
                              ])(),
                            )),
                        )),
                      character++;
                    break;
                  // -
                  case 45:
                    if (
                      previous === 45 &&
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "strlen"
                      ])(characters) == 2
                    )
                      variable = 0;
                }
            }
          return rulesets;
        }
        function ruleset(
          value,
          root,
          parent,
          index,
          offset,
          rules,
          points,
          type,
          props,
          children,
          length,
        ) {
          var post = offset - 1;
          var rule = offset === 0 ? rules : [""];
          var size = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "sizeof"
          ])(rule);
          for (var i = 0, j = 0, k = 0; i < index; ++i)
            for (
              var x = 0,
                y = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "substr"
                ])(
                  value,
                  post + 1,
                  (post = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "abs"
                  ])((j = points[i]))),
                ),
                z = value;
              x < size;
              ++x
            )
              if (
                (z = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "trim"
                ])(
                  j > 0
                    ? rule[x] + " " + y
                    : (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                        "replace"
                      ])(y, /&\f/g, rule[x]),
                ))
              )
                props[k++] = z;
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "node"
          ])(
            value,
            root,
            parent,
            offset === 0
              ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "RULESET"
                ]
              : type,
            props,
            children,
            length,
          );
        }
        function comment(value, root, parent) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "node"
          ])(
            value,
            root,
            parent,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "COMMENT"
            ],
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "from"
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "char"
              ])(),
            ),
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "substr"
            ])(value, 2, -2),
            0,
          );
        }
        function declaration(value, root, parent, length) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "node"
          ])(
            value,
            root,
            parent,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "DECLARATION"
            ],
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "substr"
            ])(value, 0, length),
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "substr"
            ])(value, length + 1, -1),
            length,
          );
        }
      }
    },
    "[project]/node_modules/@babel/runtime/helpers/esm/extends.js [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({
            default: () => _extends,
          });
          function _extends() {
            return (
              (_extends = ("TURBOPACK compile-time truthy", 1)
                ? Object.assign.bind()
                : ("TURBOPACK unreachable", undefined)),
              _extends.apply(null, arguments)
            );
          }
        }
      },
    "[project]/node_modules/react-is/cjs/react-is.development.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          /** @license React v16.13.1
           * react-is.development.js
           *
           * Copyright (c) Facebook, Inc. and its affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          if (("TURBOPACK compile-time truthy", 1)) {
            (function () {
              "use strict";
              // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
              // nor polyfill, then a plain number is used for performance.
              var hasSymbol = typeof Symbol === "function" && Symbol.for;
              var REACT_ELEMENT_TYPE = hasSymbol
                ? Symbol.for("react.element")
                : 0xeac7;
              var REACT_PORTAL_TYPE = hasSymbol
                ? Symbol.for("react.portal")
                : 0xeaca;
              var REACT_FRAGMENT_TYPE = hasSymbol
                ? Symbol.for("react.fragment")
                : 0xeacb;
              var REACT_STRICT_MODE_TYPE = hasSymbol
                ? Symbol.for("react.strict_mode")
                : 0xeacc;
              var REACT_PROFILER_TYPE = hasSymbol
                ? Symbol.for("react.profiler")
                : 0xead2;
              var REACT_PROVIDER_TYPE = hasSymbol
                ? Symbol.for("react.provider")
                : 0xeacd;
              var REACT_CONTEXT_TYPE = hasSymbol
                ? Symbol.for("react.context")
                : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
              // (unstable) APIs that have been removed. Can we remove the symbols?
              var REACT_ASYNC_MODE_TYPE = hasSymbol
                ? Symbol.for("react.async_mode")
                : 0xeacf;
              var REACT_CONCURRENT_MODE_TYPE = hasSymbol
                ? Symbol.for("react.concurrent_mode")
                : 0xeacf;
              var REACT_FORWARD_REF_TYPE = hasSymbol
                ? Symbol.for("react.forward_ref")
                : 0xead0;
              var REACT_SUSPENSE_TYPE = hasSymbol
                ? Symbol.for("react.suspense")
                : 0xead1;
              var REACT_SUSPENSE_LIST_TYPE = hasSymbol
                ? Symbol.for("react.suspense_list")
                : 0xead8;
              var REACT_MEMO_TYPE = hasSymbol
                ? Symbol.for("react.memo")
                : 0xead3;
              var REACT_LAZY_TYPE = hasSymbol
                ? Symbol.for("react.lazy")
                : 0xead4;
              var REACT_BLOCK_TYPE = hasSymbol
                ? Symbol.for("react.block")
                : 0xead9;
              var REACT_FUNDAMENTAL_TYPE = hasSymbol
                ? Symbol.for("react.fundamental")
                : 0xead5;
              var REACT_RESPONDER_TYPE = hasSymbol
                ? Symbol.for("react.responder")
                : 0xead6;
              var REACT_SCOPE_TYPE = hasSymbol
                ? Symbol.for("react.scope")
                : 0xead7;
              function isValidElementType(type) {
                return (
                  typeof type === "string" ||
                  typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                  type === REACT_FRAGMENT_TYPE ||
                  type === REACT_CONCURRENT_MODE_TYPE ||
                  type === REACT_PROFILER_TYPE ||
                  type === REACT_STRICT_MODE_TYPE ||
                  type === REACT_SUSPENSE_TYPE ||
                  type === REACT_SUSPENSE_LIST_TYPE ||
                  (typeof type === "object" &&
                    type !== null &&
                    (type.$$typeof === REACT_LAZY_TYPE ||
                      type.$$typeof === REACT_MEMO_TYPE ||
                      type.$$typeof === REACT_PROVIDER_TYPE ||
                      type.$$typeof === REACT_CONTEXT_TYPE ||
                      type.$$typeof === REACT_FORWARD_REF_TYPE ||
                      type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                      type.$$typeof === REACT_RESPONDER_TYPE ||
                      type.$$typeof === REACT_SCOPE_TYPE ||
                      type.$$typeof === REACT_BLOCK_TYPE))
                );
              }
              function typeOf(object) {
                if (typeof object === "object" && object !== null) {
                  var $$typeof = object.$$typeof;
                  switch ($$typeof) {
                    case REACT_ELEMENT_TYPE:
                      var type = object.type;
                      switch (type) {
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                          return type;
                        default:
                          var $$typeofType = type && type.$$typeof;
                          switch ($$typeofType) {
                            case REACT_CONTEXT_TYPE:
                            case REACT_FORWARD_REF_TYPE:
                            case REACT_LAZY_TYPE:
                            case REACT_MEMO_TYPE:
                            case REACT_PROVIDER_TYPE:
                              return $$typeofType;
                            default:
                              return $$typeof;
                          }
                      }
                    case REACT_PORTAL_TYPE:
                      return $$typeof;
                  }
                }
                return undefined;
              } // AsyncMode is deprecated along with isAsyncMode
              var AsyncMode = REACT_ASYNC_MODE_TYPE;
              var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
              var ContextConsumer = REACT_CONTEXT_TYPE;
              var ContextProvider = REACT_PROVIDER_TYPE;
              var Element = REACT_ELEMENT_TYPE;
              var ForwardRef = REACT_FORWARD_REF_TYPE;
              var Fragment = REACT_FRAGMENT_TYPE;
              var Lazy = REACT_LAZY_TYPE;
              var Memo = REACT_MEMO_TYPE;
              var Portal = REACT_PORTAL_TYPE;
              var Profiler = REACT_PROFILER_TYPE;
              var StrictMode = REACT_STRICT_MODE_TYPE;
              var Suspense = REACT_SUSPENSE_TYPE;
              var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
              function isAsyncMode(object) {
                {
                  if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                    hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
                    console["warn"](
                      "The ReactIs.isAsyncMode() alias has been deprecated, " +
                        "and will be removed in React 17+. Update your code to use " +
                        "ReactIs.isConcurrentMode() instead. It has the exact same API.",
                    );
                  }
                }
                return (
                  isConcurrentMode(object) ||
                  typeOf(object) === REACT_ASYNC_MODE_TYPE
                );
              }
              function isConcurrentMode(object) {
                return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
              }
              function isContextConsumer(object) {
                return typeOf(object) === REACT_CONTEXT_TYPE;
              }
              function isContextProvider(object) {
                return typeOf(object) === REACT_PROVIDER_TYPE;
              }
              function isElement(object) {
                return (
                  typeof object === "object" &&
                  object !== null &&
                  object.$$typeof === REACT_ELEMENT_TYPE
                );
              }
              function isForwardRef(object) {
                return typeOf(object) === REACT_FORWARD_REF_TYPE;
              }
              function isFragment(object) {
                return typeOf(object) === REACT_FRAGMENT_TYPE;
              }
              function isLazy(object) {
                return typeOf(object) === REACT_LAZY_TYPE;
              }
              function isMemo(object) {
                return typeOf(object) === REACT_MEMO_TYPE;
              }
              function isPortal(object) {
                return typeOf(object) === REACT_PORTAL_TYPE;
              }
              function isProfiler(object) {
                return typeOf(object) === REACT_PROFILER_TYPE;
              }
              function isStrictMode(object) {
                return typeOf(object) === REACT_STRICT_MODE_TYPE;
              }
              function isSuspense(object) {
                return typeOf(object) === REACT_SUSPENSE_TYPE;
              }
              exports.AsyncMode = AsyncMode;
              exports.ConcurrentMode = ConcurrentMode;
              exports.ContextConsumer = ContextConsumer;
              exports.ContextProvider = ContextProvider;
              exports.Element = Element;
              exports.ForwardRef = ForwardRef;
              exports.Fragment = Fragment;
              exports.Lazy = Lazy;
              exports.Memo = Memo;
              exports.Portal = Portal;
              exports.Profiler = Profiler;
              exports.StrictMode = StrictMode;
              exports.Suspense = Suspense;
              exports.isAsyncMode = isAsyncMode;
              exports.isConcurrentMode = isConcurrentMode;
              exports.isContextConsumer = isContextConsumer;
              exports.isContextProvider = isContextProvider;
              exports.isElement = isElement;
              exports.isForwardRef = isForwardRef;
              exports.isFragment = isFragment;
              exports.isLazy = isLazy;
              exports.isMemo = isMemo;
              exports.isPortal = isPortal;
              exports.isProfiler = isProfiler;
              exports.isStrictMode = isStrictMode;
              exports.isSuspense = isSuspense;
              exports.isValidElementType = isValidElementType;
              exports.typeOf = typeOf;
            })();
          }
        }
      },
    "[project]/node_modules/react-is/index.js [client] (ecmascript)": function (
      __turbopack_context__,
    ) {
      var {
        g: global,
        __dirname,
        m: module,
        e: exports,
      } = __turbopack_context__;
      {
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
          );
        ("use strict");
        if (("TURBOPACK compile-time falsy", 0)) {
          ("TURBOPACK unreachable");
        } else {
          module.exports = __turbopack_context__.r(
            "[project]/node_modules/react-is/cjs/react-is.development.js [client] (ecmascript)",
          );
        }
      }
    },
    "[project]/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          var reactIs = __turbopack_context__.r(
            "[project]/node_modules/react-is/index.js [client] (ecmascript)",
          );
          /**
           * Copyright 2015, Yahoo! Inc.
           * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
           */ var REACT_STATICS = {
            childContextTypes: true,
            contextType: true,
            contextTypes: true,
            defaultProps: true,
            displayName: true,
            getDefaultProps: true,
            getDerivedStateFromError: true,
            getDerivedStateFromProps: true,
            mixins: true,
            propTypes: true,
            type: true,
          };
          var KNOWN_STATICS = {
            name: true,
            length: true,
            prototype: true,
            caller: true,
            callee: true,
            arguments: true,
            arity: true,
          };
          var FORWARD_REF_STATICS = {
            $$typeof: true,
            render: true,
            defaultProps: true,
            displayName: true,
            propTypes: true,
          };
          var MEMO_STATICS = {
            $$typeof: true,
            compare: true,
            defaultProps: true,
            displayName: true,
            propTypes: true,
            type: true,
          };
          var TYPE_STATICS = {};
          TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
          TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
          function getStatics(component) {
            // React v16.11 and below
            if (reactIs.isMemo(component)) {
              return MEMO_STATICS;
            } // React v16.12 and above
            return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
          }
          var defineProperty = Object.defineProperty;
          var getOwnPropertyNames = Object.getOwnPropertyNames;
          var getOwnPropertySymbols = Object.getOwnPropertySymbols;
          var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
          var getPrototypeOf = Object.getPrototypeOf;
          var objectPrototype = Object.prototype;
          function hoistNonReactStatics(
            targetComponent,
            sourceComponent,
            blacklist,
          ) {
            if (typeof sourceComponent !== "string") {
              // don't hoist over string (html) components
              if (objectPrototype) {
                var inheritedComponent = getPrototypeOf(sourceComponent);
                if (
                  inheritedComponent &&
                  inheritedComponent !== objectPrototype
                ) {
                  hoistNonReactStatics(
                    targetComponent,
                    inheritedComponent,
                    blacklist,
                  );
                }
              }
              var keys = getOwnPropertyNames(sourceComponent);
              if (getOwnPropertySymbols) {
                keys = keys.concat(getOwnPropertySymbols(sourceComponent));
              }
              var targetStatics = getStatics(targetComponent);
              var sourceStatics = getStatics(sourceComponent);
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (
                  !KNOWN_STATICS[key] &&
                  !(blacklist && blacklist[key]) &&
                  !(sourceStatics && sourceStatics[key]) &&
                  !(targetStatics && targetStatics[key])
                ) {
                  var descriptor = getOwnPropertyDescriptor(
                    sourceComponent,
                    key,
                  );
                  try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                  } catch (e) {}
                }
              }
            }
            return targetComponent;
          }
          module.exports = hoistNonReactStatics;
        }
      },
    "[project]/node_modules/@pandacss/is-valid-prop/dist/index.mjs [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          // src/index.ts
          __turbopack_context__.s({
            allCssProperties: () => allCssProperties,
            isCssProperty: () => isCssProperty,
          });
          var userGeneratedStr = "";
          var userGenerated = userGeneratedStr.split(",");
          var cssPropertiesStr =
            "WebkitAppearance,WebkitBorderBefore,WebkitBorderBeforeColor,WebkitBorderBeforeStyle,WebkitBorderBeforeWidth,WebkitBoxReflect,WebkitLineClamp,WebkitMask,WebkitMaskAttachment,WebkitMaskClip,WebkitMaskComposite,WebkitMaskImage,WebkitMaskOrigin,WebkitMaskPosition,WebkitMaskPositionX,WebkitMaskPositionY,WebkitMaskRepeat,WebkitMaskRepeatX,WebkitMaskRepeatY,WebkitMaskSize,WebkitOverflowScrolling,WebkitTapHighlightColor,WebkitTextFillColor,WebkitTextStroke,WebkitTextStrokeColor,WebkitTextStrokeWidth,WebkitTouchCallout,WebkitUserModify,accentColor,alignContent,alignItems,alignSelf,alignTracks,all,animation,animationComposition,animationDelay,animationDirection,animationDuration,animationFillMode,animationIterationCount,animationName,animationPlayState,animationRange,animationRangeEnd,animationRangeStart,animationTimingFunction,animationTimeline,appearance,aspectRatio,azimuth,backdropFilter,backfaceVisibility,background,backgroundAttachment,backgroundBlendMode,backgroundClip,backgroundColor,backgroundImage,backgroundOrigin,backgroundPosition,backgroundPositionX,backgroundPositionY,backgroundRepeat,backgroundSize,blockSize,border,borderBlock,borderBlockColor,borderBlockStyle,borderBlockWidth,borderBlockEnd,borderBlockEndColor,borderBlockEndStyle,borderBlockEndWidth,borderBlockStart,borderBlockStartColor,borderBlockStartStyle,borderBlockStartWidth,borderBottom,borderBottomColor,borderBottomLeftRadius,borderBottomRightRadius,borderBottomStyle,borderBottomWidth,borderCollapse,borderColor,borderEndEndRadius,borderEndStartRadius,borderImage,borderImageOutset,borderImageRepeat,borderImageSlice,borderImageSource,borderImageWidth,borderInline,borderInlineEnd,borderInlineColor,borderInlineStyle,borderInlineWidth,borderInlineEndColor,borderInlineEndStyle,borderInlineEndWidth,borderInlineStart,borderInlineStartColor,borderInlineStartStyle,borderInlineStartWidth,borderLeft,borderLeftColor,borderLeftStyle,borderLeftWidth,borderRadius,borderRight,borderRightColor,borderRightStyle,borderRightWidth,borderSpacing,borderStartEndRadius,borderStartStartRadius,borderStyle,borderTop,borderTopColor,borderTopLeftRadius,borderTopRightRadius,borderTopStyle,borderTopWidth,borderWidth,bottom,boxAlign,boxDecorationBreak,boxDirection,boxFlex,boxFlexGroup,boxLines,boxOrdinalGroup,boxOrient,boxPack,boxShadow,boxSizing,breakAfter,breakBefore,breakInside,captionSide,caret,caretColor,caretShape,clear,clip,clipPath,color,colorScheme,columnCount,columnFill,columnGap,columnRule,columnRuleColor,columnRuleStyle,columnRuleWidth,columnSpan,columnWidth,columns,contain,containIntrinsicSize,containIntrinsicBlockSize,containIntrinsicHeight,containIntrinsicInlineSize,containIntrinsicWidth,container,containerName,containerType,content,contentVisibility,counterIncrement,counterReset,counterSet,cursor,direction,display,emptyCells,filter,flex,flexBasis,flexDirection,flexFlow,flexGrow,flexShrink,flexWrap,float,font,fontFamily,fontFeatureSettings,fontKerning,fontLanguageOverride,fontOpticalSizing,fontPalette,fontVariationSettings,fontSize,fontSizeAdjust,fontSmooth,fontStretch,fontStyle,fontSynthesis,fontSynthesisPosition,fontSynthesisSmallCaps,fontSynthesisStyle,fontSynthesisWeight,fontVariant,fontVariantAlternates,fontVariantCaps,fontVariantEastAsian,fontVariantEmoji,fontVariantLigatures,fontVariantNumeric,fontVariantPosition,fontWeight,forcedColorAdjust,gap,grid,gridArea,gridAutoColumns,gridAutoFlow,gridAutoRows,gridColumn,gridColumnEnd,gridColumnGap,gridColumnStart,gridGap,gridRow,gridRowEnd,gridRowGap,gridRowStart,gridTemplate,gridTemplateAreas,gridTemplateColumns,gridTemplateRows,hangingPunctuation,height,hyphenateCharacter,hyphenateLimitChars,hyphens,imageOrientation,imageRendering,imageResolution,imeMode,initialLetter,initialLetterAlign,inlineSize,inputSecurity,inset,insetBlock,insetBlockEnd,insetBlockStart,insetInline,insetInlineEnd,insetInlineStart,isolation,justifyContent,justifyItems,justifySelf,justifyTracks,left,letterSpacing,lineBreak,lineClamp,lineHeight,lineHeightStep,listStyle,listStyleImage,listStylePosition,listStyleType,margin,marginBlock,marginBlockEnd,marginBlockStart,marginBottom,marginInline,marginInlineEnd,marginInlineStart,marginLeft,marginRight,marginTop,marginTrim,mask,maskBorder,maskBorderMode,maskBorderOutset,maskBorderRepeat,maskBorderSlice,maskBorderSource,maskBorderWidth,maskClip,maskComposite,maskImage,maskMode,maskOrigin,maskPosition,maskRepeat,maskSize,maskType,masonryAutoFlow,mathDepth,mathShift,mathStyle,maxBlockSize,maxHeight,maxInlineSize,maxLines,maxWidth,minBlockSize,minHeight,minInlineSize,minWidth,mixBlendMode,objectFit,objectPosition,offset,offsetAnchor,offsetDistance,offsetPath,offsetPosition,offsetRotate,opacity,order,orphans,outline,outlineColor,outlineOffset,outlineStyle,outlineWidth,overflow,overflowAnchor,overflowBlock,overflowClipBox,overflowClipMargin,overflowInline,overflowWrap,overflowX,overflowY,overlay,overscrollBehavior,overscrollBehaviorBlock,overscrollBehaviorInline,overscrollBehaviorX,overscrollBehaviorY,padding,paddingBlock,paddingBlockEnd,paddingBlockStart,paddingBottom,paddingInline,paddingInlineEnd,paddingInlineStart,paddingLeft,paddingRight,paddingTop,page,pageBreakAfter,pageBreakBefore,pageBreakInside,paintOrder,perspective,perspectiveOrigin,placeContent,placeItems,placeSelf,pointerEvents,position,printColorAdjust,quotes,resize,right,rotate,rowGap,rubyAlign,rubyMerge,rubyPosition,scale,scrollbarColor,scrollbarGutter,scrollbarWidth,scrollBehavior,scrollMargin,scrollMarginBlock,scrollMarginBlockStart,scrollMarginBlockEnd,scrollMarginBottom,scrollMarginInline,scrollMarginInlineStart,scrollMarginInlineEnd,scrollMarginLeft,scrollMarginRight,scrollMarginTop,scrollPadding,scrollPaddingBlock,scrollPaddingBlockStart,scrollPaddingBlockEnd,scrollPaddingBottom,scrollPaddingInline,scrollPaddingInlineStart,scrollPaddingInlineEnd,scrollPaddingLeft,scrollPaddingRight,scrollPaddingTop,scrollSnapAlign,scrollSnapCoordinate,scrollSnapDestination,scrollSnapPointsX,scrollSnapPointsY,scrollSnapStop,scrollSnapType,scrollSnapTypeX,scrollSnapTypeY,scrollTimeline,scrollTimelineAxis,scrollTimelineName,shapeImageThreshold,shapeMargin,shapeOutside,tabSize,tableLayout,textAlign,textAlignLast,textCombineUpright,textDecoration,textDecorationColor,textDecorationLine,textDecorationSkip,textDecorationSkipInk,textDecorationStyle,textDecorationThickness,textEmphasis,textEmphasisColor,textEmphasisPosition,textEmphasisStyle,textIndent,textJustify,textOrientation,textOverflow,textRendering,textShadow,textSizeAdjust,textTransform,textUnderlineOffset,textUnderlinePosition,textWrap,timelineScope,top,touchAction,transform,transformBox,transformOrigin,transformStyle,transition,transitionBehavior,transitionDelay,transitionDuration,transitionProperty,transitionTimingFunction,translate,unicodeBidi,userSelect,verticalAlign,viewTimeline,viewTimelineAxis,viewTimelineInset,viewTimelineName,viewTransitionName,visibility,whiteSpace,whiteSpaceCollapse,widows,width,willChange,wordBreak,wordSpacing,wordWrap,writingMode,zIndex,zoom,alignmentBaseline,baselineShift,clipRule,colorInterpolation,colorRendering,dominantBaseline,fill,fillOpacity,fillRule,floodColor,floodOpacity,glyphOrientationVertical,lightingColor,marker,markerEnd,markerMid,markerStart,shapeRendering,stopColor,stopOpacity,stroke,strokeDasharray,strokeDashoffset,strokeLinecap,strokeLinejoin,strokeMiterlimit,strokeOpacity,strokeWidth,textAnchor,vectorEffect";
          var allCssProperties = cssPropertiesStr
            .split(",")
            .concat(userGenerated);
          var properties = new Map(
            allCssProperties.map((prop) => [prop, true]),
          );
          function memo(fn) {
            const cache = /* @__PURE__ */ Object.create(null);
            return (arg) => {
              if (cache[arg] === void 0) cache[arg] = fn(arg);
              return cache[arg];
            };
          }
          var cssPropertySelectorRegex = /&|@/;
          var isCssProperty = /* @__PURE__ */ memo((prop) => {
            return (
              properties.has(prop) ||
              prop.startsWith("--") ||
              cssPropertySelectorRegex.test(prop)
            );
          });
        }
      },
    "[project]/node_modules/fast-safe-stringify/index.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          module.exports = stringify;
          stringify.default = stringify;
          stringify.stable = deterministicStringify;
          stringify.stableStringify = deterministicStringify;
          var LIMIT_REPLACE_NODE = "[...]";
          var CIRCULAR_REPLACE_NODE = "[Circular]";
          var arr = [];
          var replacerStack = [];
          function defaultOptions() {
            return {
              depthLimit: Number.MAX_SAFE_INTEGER,
              edgesLimit: Number.MAX_SAFE_INTEGER,
            };
          }
          // Regular stringify
          function stringify(obj, replacer, spacer, options) {
            if (typeof options === "undefined") {
              options = defaultOptions();
            }
            decirc(obj, "", 0, [], undefined, 0, options);
            var res;
            try {
              if (replacerStack.length === 0) {
                res = JSON.stringify(obj, replacer, spacer);
              } else {
                res = JSON.stringify(
                  obj,
                  replaceGetterValues(replacer),
                  spacer,
                );
              }
            } catch (_) {
              return JSON.stringify(
                "[unable to serialize, circular reference is too complex to analyze]",
              );
            } finally {
              while (arr.length !== 0) {
                var part = arr.pop();
                if (part.length === 4) {
                  Object.defineProperty(part[0], part[1], part[3]);
                } else {
                  part[0][part[1]] = part[2];
                }
              }
            }
            return res;
          }
          function setReplace(replace, val, k, parent) {
            var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
            if (propertyDescriptor.get !== undefined) {
              if (propertyDescriptor.configurable) {
                Object.defineProperty(parent, k, {
                  value: replace,
                });
                arr.push([parent, k, val, propertyDescriptor]);
              } else {
                replacerStack.push([val, k, replace]);
              }
            } else {
              parent[k] = replace;
              arr.push([parent, k, val]);
            }
          }
          function decirc(val, k, edgeIndex, stack, parent, depth, options) {
            depth += 1;
            var i;
            if (typeof val === "object" && val !== null) {
              for (i = 0; i < stack.length; i++) {
                if (stack[i] === val) {
                  setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
                  return;
                }
              }
              if (
                typeof options.depthLimit !== "undefined" &&
                depth > options.depthLimit
              ) {
                setReplace(LIMIT_REPLACE_NODE, val, k, parent);
                return;
              }
              if (
                typeof options.edgesLimit !== "undefined" &&
                edgeIndex + 1 > options.edgesLimit
              ) {
                setReplace(LIMIT_REPLACE_NODE, val, k, parent);
                return;
              }
              stack.push(val);
              // Optimize for Arrays. Big arrays could kill the performance otherwise!
              if (Array.isArray(val)) {
                for (i = 0; i < val.length; i++) {
                  decirc(val[i], i, i, stack, val, depth, options);
                }
              } else {
                var keys = Object.keys(val);
                for (i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  decirc(val[key], key, i, stack, val, depth, options);
                }
              }
              stack.pop();
            }
          }
          // Stable-stringify
          function compareFunction(a, b) {
            if (a < b) {
              return -1;
            }
            if (a > b) {
              return 1;
            }
            return 0;
          }
          function deterministicStringify(obj, replacer, spacer, options) {
            if (typeof options === "undefined") {
              options = defaultOptions();
            }
            var tmp =
              deterministicDecirc(obj, "", 0, [], undefined, 0, options) || obj;
            var res;
            try {
              if (replacerStack.length === 0) {
                res = JSON.stringify(tmp, replacer, spacer);
              } else {
                res = JSON.stringify(
                  tmp,
                  replaceGetterValues(replacer),
                  spacer,
                );
              }
            } catch (_) {
              return JSON.stringify(
                "[unable to serialize, circular reference is too complex to analyze]",
              );
            } finally {
              // Ensure that we restore the object as it was.
              while (arr.length !== 0) {
                var part = arr.pop();
                if (part.length === 4) {
                  Object.defineProperty(part[0], part[1], part[3]);
                } else {
                  part[0][part[1]] = part[2];
                }
              }
            }
            return res;
          }
          function deterministicDecirc(
            val,
            k,
            edgeIndex,
            stack,
            parent,
            depth,
            options,
          ) {
            depth += 1;
            var i;
            if (typeof val === "object" && val !== null) {
              for (i = 0; i < stack.length; i++) {
                if (stack[i] === val) {
                  setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
                  return;
                }
              }
              try {
                if (typeof val.toJSON === "function") {
                  return;
                }
              } catch (_) {
                return;
              }
              if (
                typeof options.depthLimit !== "undefined" &&
                depth > options.depthLimit
              ) {
                setReplace(LIMIT_REPLACE_NODE, val, k, parent);
                return;
              }
              if (
                typeof options.edgesLimit !== "undefined" &&
                edgeIndex + 1 > options.edgesLimit
              ) {
                setReplace(LIMIT_REPLACE_NODE, val, k, parent);
                return;
              }
              stack.push(val);
              // Optimize for Arrays. Big arrays could kill the performance otherwise!
              if (Array.isArray(val)) {
                for (i = 0; i < val.length; i++) {
                  deterministicDecirc(val[i], i, i, stack, val, depth, options);
                }
              } else {
                // Create a temporary object in the required way
                var tmp = {};
                var keys = Object.keys(val).sort(compareFunction);
                for (i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  deterministicDecirc(
                    val[key],
                    key,
                    i,
                    stack,
                    val,
                    depth,
                    options,
                  );
                  tmp[key] = val[key];
                }
                if (typeof parent !== "undefined") {
                  arr.push([parent, k, val]);
                  parent[k] = tmp;
                } else {
                  return tmp;
                }
              }
              stack.pop();
            }
          }
          // wraps replacer function to handle values we couldn't replace
          // and mark them as replaced value
          function replaceGetterValues(replacer) {
            replacer =
              typeof replacer !== "undefined"
                ? replacer
                : function (k, v) {
                    return v;
                  };
            return function (key, val) {
              if (replacerStack.length > 0) {
                for (var i = 0; i < replacerStack.length; i++) {
                  var part = replacerStack[i];
                  if (part[1] === key && part[0] === val) {
                    val = part[2];
                    replacerStack.splice(i, 1);
                    break;
                  }
                }
              }
              return replacer.call(this, key, val);
            };
          }
        }
      },
    "[project]/node_modules/@ark-ui/react/dist/components/color-picker/color-picker.anatomy.js [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({
            colorPickerAnatomy: () => colorPickerAnatomy,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$picker$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@zag-js/color-picker/dist/index.mjs [client] (ecmascript)",
            );
          ("use client");
          const colorPickerAnatomy =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$picker$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "anatomy"
            ].extendWith("view");
        }
      },
    "[project]/node_modules/@ark-ui/react/dist/components/field/field.anatomy.js [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({
            fieldAnatomy: () => fieldAnatomy,
            parts: () => parts,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@zag-js/anatomy/dist/index.mjs [client] (ecmascript)",
            );
          ("use client");
          const fieldAnatomy = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
            "createAnatomy"
          ])("field").parts(
            "root",
            "errorText",
            "helperText",
            "input",
            "label",
            "select",
            "textarea",
            "requiredIndicator",
          );
          const parts = fieldAnatomy.build();
        }
      },
    "[project]/node_modules/@ark-ui/react/dist/components/fieldset/fieldset.anatomy.js [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({
            fieldsetAnatomy: () => fieldsetAnatomy,
            parts: () => parts,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@zag-js/anatomy/dist/index.mjs [client] (ecmascript)",
            );
          ("use client");
          const fieldsetAnatomy = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
            "createAnatomy"
          ])("fieldset").parts("root", "errorText", "helperText", "legend");
          const parts = fieldsetAnatomy.build();
        }
      },
    "[project]/node_modules/@ark-ui/react/dist/components/checkbox/checkbox.anatomy.js [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({
            checkboxAnatomy: () => checkboxAnatomy,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$checkbox$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@zag-js/checkbox/dist/index.mjs [client] (ecmascript)",
            );
          ("use client");
          const checkboxAnatomy =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$checkbox$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "anatomy"
            ].extendWith("group");
        }
      },
    "[project]/node_modules/@ark-ui/react/dist/components/segment-group/segment-group.anatomy.js [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({
            parts: () => parts,
            segmentGroupAnatomy: () => segmentGroupAnatomy,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$radio$2d$group$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@zag-js/radio-group/dist/index.mjs [client] (ecmascript)",
            );
          ("use client");
          const segmentGroupAnatomy =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$radio$2d$group$2f$dist$2f$index$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "anatomy"
            ].rename("segment-group");
          const parts = segmentGroupAnatomy.build();
        }
      },
    "[project]/node_modules/@internationalized/number/dist/NumberFormatter.mjs [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          /*
           * Copyright 2020 Adobe. All rights reserved.
           * This file is licensed to you under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License. You may obtain a copy
           * of the License at http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software distributed under
           * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
           * OF ANY KIND, either express or implied. See the License for the specific language
           * governing permissions and limitations under the License.
           */ __turbopack_context__.s({
            NumberFormatter: () => $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5,
            numberFormatSignDisplayPolyfill: () =>
              $488c6ddbf4ef74c2$export$711b50b3c525e0f2,
          });
          let $488c6ddbf4ef74c2$var$formatterCache = new Map();
          let $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
          try {
            $488c6ddbf4ef74c2$var$supportsSignDisplay =
              new Intl.NumberFormat("de-DE", {
                signDisplay: "exceptZero",
              }).resolvedOptions().signDisplay === "exceptZero";
            // eslint-disable-next-line no-empty
          } catch {}
          let $488c6ddbf4ef74c2$var$supportsUnit = false;
          try {
            $488c6ddbf4ef74c2$var$supportsUnit =
              new Intl.NumberFormat("de-DE", {
                style: "unit",
                unit: "degree",
              }).resolvedOptions().style === "unit";
            // eslint-disable-next-line no-empty
          } catch {}
          // Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.
          // Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.
          // Values were determined by switching to each locale manually in Chrome.
          const $488c6ddbf4ef74c2$var$UNITS = {
            degree: {
              narrow: {
                default: "\xb0",
                "ja-JP": " \u5EA6",
                "zh-TW": "\u5EA6",
                "sl-SI": " \xb0",
              },
            },
          };
          class $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {
            /** Formats a number value as a string, according to the locale and options provided to the constructor. */ format(
              value,
            ) {
              let res = "";
              if (
                !$488c6ddbf4ef74c2$var$supportsSignDisplay &&
                this.options.signDisplay != null
              )
                res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(
                  this.numberFormatter,
                  this.options.signDisplay,
                  value,
                );
              else res = this.numberFormatter.format(value);
              if (
                this.options.style === "unit" &&
                !$488c6ddbf4ef74c2$var$supportsUnit
              ) {
                var _UNITS_unit;
                let {
                  unit: unit,
                  unitDisplay: unitDisplay = "short",
                  locale: locale,
                } = this.resolvedOptions();
                if (!unit) return res;
                let values =
                  (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null ||
                  _UNITS_unit === void 0
                    ? void 0
                    : _UNITS_unit[unitDisplay];
                res += values[locale] || values.default;
              }
              return res;
            }
            /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */ formatToParts(
              value,
            ) {
              // TODO: implement signDisplay for formatToParts
              return this.numberFormatter.formatToParts(value);
            }
            /** Formats a number range as a string. */ formatRange(start, end) {
              if (typeof this.numberFormatter.formatRange === "function")
                return this.numberFormatter.formatRange(start, end);
              if (end < start)
                throw new RangeError("End date must be >= start date");
              // Very basic fallback for old browsers.
              return `${this.format(start)} \u{2013} ${this.format(end)}`;
            }
            /** Formats a number range as an array of parts. */ formatRangeToParts(
              start,
              end,
            ) {
              if (typeof this.numberFormatter.formatRangeToParts === "function")
                return this.numberFormatter.formatRangeToParts(start, end);
              if (end < start)
                throw new RangeError("End date must be >= start date");
              let startParts = this.numberFormatter.formatToParts(start);
              let endParts = this.numberFormatter.formatToParts(end);
              return [
                ...startParts.map((p) => ({
                  ...p,
                  source: "startRange",
                })),
                {
                  type: "literal",
                  value: " \u2013 ",
                  source: "shared",
                },
                ...endParts.map((p) => ({
                  ...p,
                  source: "endRange",
                })),
              ];
            }
            /** Returns the resolved formatting options based on the values passed to the constructor. */ resolvedOptions() {
              let options = this.numberFormatter.resolvedOptions();
              if (
                !$488c6ddbf4ef74c2$var$supportsSignDisplay &&
                this.options.signDisplay != null
              )
                options = {
                  ...options,
                  signDisplay: this.options.signDisplay,
                };
              if (
                !$488c6ddbf4ef74c2$var$supportsUnit &&
                this.options.style === "unit"
              )
                options = {
                  ...options,
                  style: "unit",
                  unit: this.options.unit,
                  unitDisplay: this.options.unitDisplay,
                };
              return options;
            }
            constructor(locale, options = {}) {
              this.numberFormatter =
                $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);
              this.options = options;
            }
          }
          function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(
            locale,
            options = {},
          ) {
            let { numberingSystem: numberingSystem } = options;
            if (numberingSystem && locale.includes("-nu-")) {
              if (!locale.includes("-u-")) locale += "-u-";
              locale += `-nu-${numberingSystem}`;
            }
            if (
              options.style === "unit" &&
              !$488c6ddbf4ef74c2$var$supportsUnit
            ) {
              var _UNITS_unit;
              let { unit: unit, unitDisplay: unitDisplay = "short" } = options;
              if (!unit)
                throw new Error(
                  'unit option must be provided with style: "unit"',
                );
              if (
                !((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null ||
                _UNITS_unit === void 0
                  ? void 0
                  : _UNITS_unit[unitDisplay])
              )
                throw new Error(
                  `Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`,
                );
              options = {
                ...options,
                style: "decimal",
              };
            }
            let cacheKey =
              locale +
              (options
                ? Object.entries(options)
                    .sort((a, b) => (a[0] < b[0] ? -1 : 1))
                    .join()
                : "");
            if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey))
              return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
            let numberFormatter = new Intl.NumberFormat(locale, options);
            $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
            return numberFormatter;
          }
          function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(
            numberFormat,
            signDisplay,
            num,
          ) {
            if (signDisplay === "auto") return numberFormat.format(num);
            else if (signDisplay === "never")
              return numberFormat.format(Math.abs(num));
            else {
              let needsPositiveSign = false;
              if (signDisplay === "always")
                needsPositiveSign = num > 0 || Object.is(num, 0);
              else if (signDisplay === "exceptZero") {
                if (Object.is(num, -0) || Object.is(num, 0))
                  num = Math.abs(num);
                else needsPositiveSign = num > 0;
              }
              if (needsPositiveSign) {
                let negative = numberFormat.format(-num);
                let noSign = numberFormat.format(num);
                // ignore RTL/LTR marker character
                let minus = negative
                  .replace(noSign, "")
                  .replace(/\u200e|\u061C/, "");
                if ([...minus].length !== 1)
                  console.warn(
                    "@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case",
                  );
                let positive = negative
                  .replace(noSign, "!!!")
                  .replace(minus, "+")
                  .replace("!!!", noSign);
                return positive;
              } else return numberFormat.format(num);
            }
          }
          //# sourceMappingURL=NumberFormatter.module.js.map
        }
      },
    "[project]/node_modules/@internationalized/number/dist/NumberParser.mjs [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({
            NumberParser: () => $6c7bd7858deea686$export$cd11ab140839f11d,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$internationalized$2f$number$2f$dist$2f$NumberFormatter$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@internationalized/number/dist/NumberFormatter.mjs [client] (ecmascript)",
            );
          /*
           * Copyright 2020 Adobe. All rights reserved.
           * This file is licensed to you under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License. You may obtain a copy
           * of the License at http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software distributed under
           * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
           * OF ANY KIND, either express or implied. See the License for the specific language
           * governing permissions and limitations under the License.
           */ const $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp(
            "^.*\\(.*\\).*$",
          );
          const $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [
            "latn",
            "arab",
            "hanidec",
            "deva",
            "beng",
          ];
          class $6c7bd7858deea686$export$cd11ab140839f11d {
            /**
             * Parses the given string to a number. Returns NaN if a valid number could not be parsed.
             */ parse(value) {
              return $6c7bd7858deea686$var$getNumberParserImpl(
                this.locale,
                this.options,
                value,
              ).parse(value);
            }
            /**
             * Returns whether the given string could potentially be a valid number. This should be used to
             * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity
             * of the minus/plus sign characters can be checked.
             */ isValidPartialNumber(value, minValue, maxValue) {
              return $6c7bd7858deea686$var$getNumberParserImpl(
                this.locale,
                this.options,
                value,
              ).isValidPartialNumber(value, minValue, maxValue);
            }
            /**
             * Returns a numbering system for which the given string is valid in the current locale.
             * If no numbering system could be detected, the default numbering system for the current
             * locale is returned.
             */ getNumberingSystem(value) {
              return $6c7bd7858deea686$var$getNumberParserImpl(
                this.locale,
                this.options,
                value,
              ).options.numberingSystem;
            }
            constructor(locale, options = {}) {
              this.locale = locale;
              this.options = options;
            }
          }
          const $6c7bd7858deea686$var$numberParserCache = new Map();
          function $6c7bd7858deea686$var$getNumberParserImpl(
            locale,
            options,
            value,
          ) {
            // First try the default numbering system for the provided locale
            let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(
              locale,
              options,
            );
            // If that doesn't match, and the locale doesn't include a hard coded numbering system,
            // try each of the other supported numbering systems until we find one that matches.
            if (
              !locale.includes("-nu-") &&
              !defaultParser.isValidPartialNumber(value)
            ) {
              for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS)
                if (numberingSystem !== defaultParser.options.numberingSystem) {
                  let parser = $6c7bd7858deea686$var$getCachedNumberParser(
                    locale +
                      (locale.includes("-u-") ? "-nu-" : "-u-nu-") +
                      numberingSystem,
                    options,
                  );
                  if (parser.isValidPartialNumber(value)) return parser;
                }
            }
            return defaultParser;
          }
          function $6c7bd7858deea686$var$getCachedNumberParser(
            locale,
            options,
          ) {
            let cacheKey =
              locale +
              (options
                ? Object.entries(options)
                    .sort((a, b) => (a[0] < b[0] ? -1 : 1))
                    .join()
                : "");
            let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);
            if (!parser) {
              parser = new $6c7bd7858deea686$var$NumberParserImpl(
                locale,
                options,
              );
              $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);
            }
            return parser;
          }
          // The actual number parser implementation. Instances of this class are cached
          // based on the locale, options, and detected numbering system.
          class $6c7bd7858deea686$var$NumberParserImpl {
            parse(value) {
              // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'
              let fullySanitizedValue = this.sanitize(value);
              if (this.symbols.group)
                fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(
                  fullySanitizedValue,
                  this.symbols.group,
                  "",
                );
              if (this.symbols.decimal)
                fullySanitizedValue = fullySanitizedValue.replace(
                  this.symbols.decimal,
                  ".",
                );
              if (this.symbols.minusSign)
                fullySanitizedValue = fullySanitizedValue.replace(
                  this.symbols.minusSign,
                  "-",
                );
              fullySanitizedValue = fullySanitizedValue.replace(
                this.symbols.numeral,
                this.symbols.index,
              );
              if (this.options.style === "percent") {
                // javascript is bad at dividing by 100 and maintaining the same significant figures, so perform it on the string before parsing
                let isNegative = fullySanitizedValue.indexOf("-");
                fullySanitizedValue = fullySanitizedValue.replace("-", "");
                let index = fullySanitizedValue.indexOf(".");
                if (index === -1) index = fullySanitizedValue.length;
                fullySanitizedValue = fullySanitizedValue.replace(".", "");
                if (index - 2 === 0)
                  fullySanitizedValue = `0.${fullySanitizedValue}`;
                else if (index - 2 === -1)
                  fullySanitizedValue = `0.0${fullySanitizedValue}`;
                else if (index - 2 === -2) fullySanitizedValue = "0.00";
                else
                  fullySanitizedValue = `${fullySanitizedValue.slice(0, index - 2)}.${fullySanitizedValue.slice(index - 2)}`;
                if (isNegative > -1)
                  fullySanitizedValue = `-${fullySanitizedValue}`;
              }
              let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
              if (isNaN(newValue)) return NaN;
              if (this.options.style === "percent") {
                var _this_options_minimumFractionDigits,
                  _this_options_maximumFractionDigits;
                // extra step for rounding percents to what our formatter would output
                let options = {
                  ...this.options,
                  style: "decimal",
                  minimumFractionDigits: Math.min(
                    ((_this_options_minimumFractionDigits =
                      this.options.minimumFractionDigits) !== null &&
                    _this_options_minimumFractionDigits !== void 0
                      ? _this_options_minimumFractionDigits
                      : 0) + 2,
                    20,
                  ),
                  maximumFractionDigits: Math.min(
                    ((_this_options_maximumFractionDigits =
                      this.options.maximumFractionDigits) !== null &&
                    _this_options_maximumFractionDigits !== void 0
                      ? _this_options_maximumFractionDigits
                      : 0) + 2,
                    20,
                  ),
                };
                return new $6c7bd7858deea686$export$cd11ab140839f11d(
                  this.locale,
                  options,
                ).parse(
                  new (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$internationalized$2f$number$2f$dist$2f$NumberFormatter$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                    "NumberFormatter"
                  ])(this.locale, options).format(newValue),
                );
              }
              // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again
              if (
                this.options.currencySign === "accounting" &&
                $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)
              )
                newValue = -1 * newValue;
              return newValue;
            }
            sanitize(value) {
              // Remove literals and whitespace, which are allowed anywhere in the string
              value = value.replace(this.symbols.literals, "");
              // Replace the ASCII minus sign with the minus sign used in the current locale
              // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.
              if (this.symbols.minusSign)
                value = value.replace("-", this.symbols.minusSign);
              // In arab numeral system, their decimal character is 1643, but most keyboards don't type that
              // instead they use the , (44) character or apparently the (1548) character.
              if (this.options.numberingSystem === "arab") {
                if (this.symbols.decimal) {
                  value = value.replace(",", this.symbols.decimal);
                  value = value.replace(
                    String.fromCharCode(1548),
                    this.symbols.decimal,
                  );
                }
                if (this.symbols.group)
                  value = $6c7bd7858deea686$var$replaceAll(
                    value,
                    ".",
                    this.symbols.group,
                  );
              }
              // fr-FR group character is char code 8239, but that's not a key on the french keyboard,
              // so allow 'period' as a group char and replace it with a space
              if (this.options.locale === "fr-FR")
                value = $6c7bd7858deea686$var$replaceAll(
                  value,
                  ".",
                  String.fromCharCode(8239),
                );
              return value;
            }
            isValidPartialNumber(
              value,
              minValue = -Infinity,
              maxValue = Infinity,
            ) {
              value = this.sanitize(value);
              // Remove minus or plus sign, which must be at the start of the string.
              if (
                this.symbols.minusSign &&
                value.startsWith(this.symbols.minusSign) &&
                minValue < 0
              )
                value = value.slice(this.symbols.minusSign.length);
              else if (
                this.symbols.plusSign &&
                value.startsWith(this.symbols.plusSign) &&
                maxValue > 0
              )
                value = value.slice(this.symbols.plusSign.length);
              // Numbers cannot start with a group separator
              if (this.symbols.group && value.startsWith(this.symbols.group))
                return false;
              // Numbers that can't have any decimal values fail if a decimal character is typed
              if (
                this.symbols.decimal &&
                value.indexOf(this.symbols.decimal) > -1 &&
                this.options.maximumFractionDigits === 0
              )
                return false;
              // Remove numerals, groups, and decimals
              if (this.symbols.group)
                value = $6c7bd7858deea686$var$replaceAll(
                  value,
                  this.symbols.group,
                  "",
                );
              value = value.replace(this.symbols.numeral, "");
              if (this.symbols.decimal)
                value = value.replace(this.symbols.decimal, "");
              // The number is valid if there are no remaining characters
              return value.length === 0;
            }
            constructor(locale, options = {}) {
              this.locale = locale;
              this.formatter = new Intl.NumberFormat(locale, options);
              this.options = this.formatter.resolvedOptions();
              this.symbols = $6c7bd7858deea686$var$getSymbols(
                locale,
                this.formatter,
                this.options,
                options,
              );
              var _this_options_minimumFractionDigits,
                _this_options_maximumFractionDigits;
              if (
                this.options.style === "percent" &&
                (((_this_options_minimumFractionDigits =
                  this.options.minimumFractionDigits) !== null &&
                _this_options_minimumFractionDigits !== void 0
                  ? _this_options_minimumFractionDigits
                  : 0) > 18 ||
                  ((_this_options_maximumFractionDigits =
                    this.options.maximumFractionDigits) !== null &&
                  _this_options_maximumFractionDigits !== void 0
                    ? _this_options_maximumFractionDigits
                    : 0) > 18)
              )
                console.warn(
                  "NumberParser cannot handle percentages with greater than 18 decimal places, please reduce the number in your options.",
                );
            }
          }
          const $6c7bd7858deea686$var$nonLiteralParts = new Set([
            "decimal",
            "fraction",
            "integer",
            "minusSign",
            "plusSign",
            "group",
          ]);
          // This list is derived from https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html#comparison and includes
          // all unique numbers which we need to check in order to determine all the plural forms for a given locale.
          // See: https://github.com/adobe/react-spectrum/pull/5134/files#r1337037855 for used script
          const $6c7bd7858deea686$var$pluralNumbers = [
            0, 4, 2, 1, 11, 20, 3, 7, 100, 21, 0.1, 1.1,
          ];
          function $6c7bd7858deea686$var$getSymbols(
            locale,
            formatter,
            intlOptions,
            originalOptions,
          ) {
            var _allParts_find,
              _posAllParts_find,
              _decimalParts_find,
              _allParts_find1;
            // formatter needs access to all decimal places in order to generate the correct literal strings for the plural set
            let symbolFormatter = new Intl.NumberFormat(locale, {
              ...intlOptions,
              // Resets so we get the full range of symbols
              minimumSignificantDigits: 1,
              maximumSignificantDigits: 21,
              roundingIncrement: 1,
              roundingPriority: "auto",
              roundingMode: "halfExpand",
            });
            // Note: some locale's don't add a group symbol until there is a ten thousands place
            let allParts = symbolFormatter.formatToParts(-10000.111);
            let posAllParts = symbolFormatter.formatToParts(10000.111);
            let pluralParts = $6c7bd7858deea686$var$pluralNumbers.map((n) =>
              symbolFormatter.formatToParts(n),
            );
            var _allParts_find_value;
            let minusSign =
              (_allParts_find_value =
                (_allParts_find = allParts.find(
                  (p) => p.type === "minusSign",
                )) === null || _allParts_find === void 0
                  ? void 0
                  : _allParts_find.value) !== null &&
              _allParts_find_value !== void 0
                ? _allParts_find_value
                : "-";
            let plusSign =
              (_posAllParts_find = posAllParts.find(
                (p) => p.type === "plusSign",
              )) === null || _posAllParts_find === void 0
                ? void 0
                : _posAllParts_find.value;
            // Safari does not support the signDisplay option, but our number parser polyfills it.
            // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.
            if (
              !plusSign &&
              ((originalOptions === null || originalOptions === void 0
                ? void 0
                : originalOptions.signDisplay) === "exceptZero" ||
                (originalOptions === null || originalOptions === void 0
                  ? void 0
                  : originalOptions.signDisplay) === "always")
            )
              plusSign = "+";
            // If maximumSignificantDigits is 1 (the minimum) then we won't get decimal characters out of the above formatters
            // Percent also defaults to 0 fractionDigits, so we need to make a new one that isn't percent to get an accurate decimal
            let decimalParts = new Intl.NumberFormat(locale, {
              ...intlOptions,
              minimumFractionDigits: 2,
              maximumFractionDigits: 2,
            }).formatToParts(0.001);
            let decimal =
              (_decimalParts_find = decimalParts.find(
                (p) => p.type === "decimal",
              )) === null || _decimalParts_find === void 0
                ? void 0
                : _decimalParts_find.value;
            let group =
              (_allParts_find1 = allParts.find((p) => p.type === "group")) ===
                null || _allParts_find1 === void 0
                ? void 0
                : _allParts_find1.value;
            // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that
            // don't contribute to the numerical value
            let allPartsLiterals = allParts
              .filter((p) => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type))
              .map((p) => $6c7bd7858deea686$var$escapeRegex(p.value));
            let pluralPartsLiterals = pluralParts.flatMap((p) =>
              p
                .filter(
                  (p) => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type),
                )
                .map((p) => $6c7bd7858deea686$var$escapeRegex(p.value)),
            );
            let sortedLiterals = [
              ...new Set([...allPartsLiterals, ...pluralPartsLiterals]),
            ].sort((a, b) => b.length - a.length);
            let literals =
              sortedLiterals.length === 0
                ? new RegExp("[\\p{White_Space}]", "gu")
                : new RegExp(
                    `${sortedLiterals.join("|")}|[\\p{White_Space}]`,
                    "gu",
                  );
            // These are for replacing non-latn characters with the latn equivalent
            let numerals = [
              ...new Intl.NumberFormat(intlOptions.locale, {
                useGrouping: false,
              }).format(9876543210),
            ].reverse();
            let indexes = new Map(numerals.map((d, i) => [d, i]));
            let numeral = new RegExp(`[${numerals.join("")}]`, "g");
            let index = (d) => String(indexes.get(d));
            return {
              minusSign: minusSign,
              plusSign: plusSign,
              decimal: decimal,
              group: group,
              literals: literals,
              numeral: numeral,
              index: index,
            };
          }
          function $6c7bd7858deea686$var$replaceAll(str, find, replace) {
            if (str.replaceAll) return str.replaceAll(find, replace);
            return str.split(find).join(replace);
          }
          function $6c7bd7858deea686$var$escapeRegex(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
          }
          //# sourceMappingURL=NumberParser.module.js.map
        }
      },
    "[project]/node_modules/uqr/dist/index.mjs [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        __turbopack_context__.s({
          QrCodeDataType: () => QrCodeDataType,
          encode: () => encode,
          renderANSI: () => renderANSI,
          renderSVG: () => renderSVG,
          renderUnicode: () => renderUnicode,
          renderUnicodeCompact: () => renderUnicodeCompact,
        });
        var QrCodeDataType = /* @__PURE__ */ ((QrCodeDataType2) => {
          QrCodeDataType2[(QrCodeDataType2["Border"] = -1)] = "Border";
          QrCodeDataType2[(QrCodeDataType2["Data"] = 0)] = "Data";
          QrCodeDataType2[(QrCodeDataType2["Function"] = 1)] = "Function";
          QrCodeDataType2[(QrCodeDataType2["Position"] = 2)] = "Position";
          QrCodeDataType2[(QrCodeDataType2["Timing"] = 3)] = "Timing";
          QrCodeDataType2[(QrCodeDataType2["Alignment"] = 4)] = "Alignment";
          return QrCodeDataType2;
        })(QrCodeDataType || {});
        var __defProp = Object.defineProperty;
        var __defNormalProp = (obj, key, value) =>
          key in obj
            ? __defProp(obj, key, {
                enumerable: true,
                configurable: true,
                writable: true,
                value,
              })
            : (obj[key] = value);
        var __publicField = (obj, key, value) => {
          __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
          return value;
        };
        const LOW = [0, 1];
        const MEDIUM = [1, 0];
        const QUARTILE = [2, 3];
        const HIGH = [3, 2];
        const EccMap = {
          L: LOW,
          M: MEDIUM,
          Q: QUARTILE,
          H: HIGH,
        };
        const NUMERIC_REGEX = /^[0-9]*$/;
        const ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\/:-]*$/;
        const ALPHANUMERIC_CHARSET =
          "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:";
        const MIN_VERSION = 1;
        const MAX_VERSION = 40;
        const PENALTY_N1 = 3;
        const PENALTY_N2 = 3;
        const PENALTY_N3 = 40;
        const PENALTY_N4 = 10;
        const ECC_CODEWORDS_PER_BLOCK = [
          // Version: (note that index 0 is for padding, and is set to an illegal value)
          // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level
          [
            -1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24,
            28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30,
            30, 30, 30, 30, 30, 30, 30,
          ],
          // Low
          [
            -1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28,
            28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
            28, 28, 28, 28, 28, 28, 28,
          ],
          // Medium
          [
            -1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24,
            28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30,
            30, 30, 30, 30, 30, 30, 30,
          ],
          // Quartile
          [
            -1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30,
            28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
            30, 30, 30, 30, 30, 30, 30,
          ],
        ];
        const NUM_ERROR_CORRECTION_BLOCKS = [
          // Version: (note that index 0 is for padding, and is set to an illegal value)
          // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level
          [
            -1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8,
            9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22,
            24, 25,
          ],
          // Low
          [
            -1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14,
            16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40,
            43, 45, 47, 49,
          ],
          // Medium
          [
            -1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21,
            20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56,
            59, 62, 65, 68,
          ],
          // Quartile
          [
            -1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21,
            25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63,
            66, 70, 74, 77, 81,
          ],
        ];
        class QrCode {
          /* -- Constructor (low level) and fields -- */ // Creates a new QR Code with the given version number,
          // error correction level, data codeword bytes, and mask number.
          // This is a low-level API that most users should not use directly.
          // A mid-level API is the encodeSegments() function.
          constructor(version, ecc, dataCodewords, msk) {
            this.version = version;
            this.ecc = ecc;
            /* -- Fields -- */ // The width and height of this QR Code, measured in modules, between
            // 21 and 177 (inclusive). This is equal to version * 4 + 17.
            __publicField(this, "size");
            // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).
            // Even if a QR Code is created with automatic masking requested (mask = -1),
            // the resulting object still has a mask value between 0 and 7.
            __publicField(this, "mask");
            // The modules of this QR Code (false = light, true = dark).
            // Immutable after constructor finishes. Accessed through getModule().
            __publicField(this, "modules", []);
            __publicField(this, "types", []);
            if (version < MIN_VERSION || version > MAX_VERSION)
              throw new RangeError("Version value out of range");
            if (msk < -1 || msk > 7)
              throw new RangeError("Mask value out of range");
            this.size = version * 4 + 17;
            const row = Array.from(
              {
                length: this.size,
              },
              () => false,
            );
            for (let i = 0; i < this.size; i++) {
              this.modules.push(row.slice());
              this.types.push(row.map(() => 0));
            }
            this.drawFunctionPatterns();
            const allCodewords = this.addEccAndInterleave(dataCodewords);
            this.drawCodewords(allCodewords);
            if (msk === -1) {
              let minPenalty = 1e9;
              for (let i = 0; i < 8; i++) {
                this.applyMask(i);
                this.drawFormatBits(i);
                const penalty = this.getPenaltyScore();
                if (penalty < minPenalty) {
                  msk = i;
                  minPenalty = penalty;
                }
                this.applyMask(i);
              }
            }
            this.mask = msk;
            this.applyMask(msk);
            this.drawFormatBits(msk);
          }
          /* -- Accessor methods -- */ // Returns the color of the module (pixel) at the given coordinates, which is false
          // for light or true for dark. The top left corner has the coordinates (x=0, y=0).
          // If the given coordinates are out of bounds, then false (light) is returned.
          getModule(x, y) {
            return (
              x >= 0 &&
              x < this.size &&
              y >= 0 &&
              y < this.size &&
              this.modules[y][x]
            );
          }
          /* -- Private helper methods for constructor: Drawing function modules -- */ // Reads this object's version field, and draws and marks all function modules.
          drawFunctionPatterns() {
            for (let i = 0; i < this.size; i++) {
              this.setFunctionModule(6, i, i % 2 === 0, QrCodeDataType.Timing);
              this.setFunctionModule(i, 6, i % 2 === 0, QrCodeDataType.Timing);
            }
            this.drawFinderPattern(3, 3);
            this.drawFinderPattern(this.size - 4, 3);
            this.drawFinderPattern(3, this.size - 4);
            const alignPatPos = this.getAlignmentPatternPositions();
            const numAlign = alignPatPos.length;
            for (let i = 0; i < numAlign; i++) {
              for (let j = 0; j < numAlign; j++) {
                if (
                  !(
                    (i === 0 && j === 0) ||
                    (i === 0 && j === numAlign - 1) ||
                    (i === numAlign - 1 && j === 0)
                  )
                )
                  this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);
              }
            }
            this.drawFormatBits(0);
            this.drawVersion();
          }
          // Draws two copies of the format bits (with its own error correction code)
          // based on the given mask and this object's error correction level field.
          drawFormatBits(mask) {
            const data = (this.ecc[1] << 3) | mask;
            let rem = data;
            for (let i = 0; i < 10; i++)
              rem = (rem << 1) ^ ((rem >>> 9) * 1335);
            const bits = ((data << 10) | rem) ^ 21522;
            for (let i = 0; i <= 5; i++)
              this.setFunctionModule(8, i, getBit(bits, i));
            this.setFunctionModule(8, 7, getBit(bits, 6));
            this.setFunctionModule(8, 8, getBit(bits, 7));
            this.setFunctionModule(7, 8, getBit(bits, 8));
            for (let i = 9; i < 15; i++)
              this.setFunctionModule(14 - i, 8, getBit(bits, i));
            for (let i = 0; i < 8; i++)
              this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));
            for (let i = 8; i < 15; i++)
              this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));
            this.setFunctionModule(8, this.size - 8, true);
          }
          // Draws two copies of the version bits (with its own error correction code),
          // based on this object's version field, iff 7 <= version <= 40.
          drawVersion() {
            if (this.version < 7) return;
            let rem = this.version;
            for (let i = 0; i < 12; i++)
              rem = (rem << 1) ^ ((rem >>> 11) * 7973);
            const bits = (this.version << 12) | rem;
            for (let i = 0; i < 18; i++) {
              const color = getBit(bits, i);
              const a = this.size - 11 + (i % 3);
              const b = Math.floor(i / 3);
              this.setFunctionModule(a, b, color);
              this.setFunctionModule(b, a, color);
            }
          }
          // Draws a 9*9 finder pattern including the border separator,
          // with the center module at (x, y). Modules can be out of bounds.
          drawFinderPattern(x, y) {
            for (let dy = -4; dy <= 4; dy++) {
              for (let dx = -4; dx <= 4; dx++) {
                const dist = Math.max(Math.abs(dx), Math.abs(dy));
                const xx = x + dx;
                const yy = y + dy;
                if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size)
                  this.setFunctionModule(
                    xx,
                    yy,
                    dist !== 2 && dist !== 4,
                    QrCodeDataType.Position,
                  );
              }
            }
          }
          // Draws a 5*5 alignment pattern, with the center module
          // at (x, y). All modules must be in bounds.
          drawAlignmentPattern(x, y) {
            for (let dy = -2; dy <= 2; dy++) {
              for (let dx = -2; dx <= 2; dx++) {
                this.setFunctionModule(
                  x + dx,
                  y + dy,
                  Math.max(Math.abs(dx), Math.abs(dy)) !== 1,
                  QrCodeDataType.Alignment,
                );
              }
            }
          }
          // Sets the color of a module and marks it as a function module.
          // Only used by the constructor. Coordinates must be in bounds.
          setFunctionModule(x, y, isDark, type = QrCodeDataType.Function) {
            this.modules[y][x] = isDark;
            this.types[y][x] = type;
          }
          /* -- Private helper methods for constructor: Codewords and masking -- */ // Returns a new byte string representing the given data with the appropriate error correction
          // codewords appended to it, based on this object's version and error correction level.
          addEccAndInterleave(data) {
            const ver = this.version;
            const ecl = this.ecc;
            if (data.length !== getNumDataCodewords(ver, ecl))
              throw new RangeError("Invalid argument");
            const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];
            const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];
            const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);
            const numShortBlocks = numBlocks - (rawCodewords % numBlocks);
            const shortBlockLen = Math.floor(rawCodewords / numBlocks);
            const blocks = [];
            const rsDiv = reedSolomonComputeDivisor(blockEccLen);
            for (let i = 0, k = 0; i < numBlocks; i++) {
              const dat = data.slice(
                k,
                k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1),
              );
              k += dat.length;
              const ecc = reedSolomonComputeRemainder(dat, rsDiv);
              if (i < numShortBlocks) dat.push(0);
              blocks.push(dat.concat(ecc));
            }
            const result = [];
            for (let i = 0; i < blocks[0].length; i++) {
              blocks.forEach((block, j) => {
                if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks)
                  result.push(block[i]);
              });
            }
            return result;
          }
          // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire
          // data area of this QR Code. Function modules need to be marked off before this is called.
          drawCodewords(data) {
            if (
              data.length !== Math.floor(getNumRawDataModules(this.version) / 8)
            )
              throw new RangeError("Invalid argument");
            let i = 0;
            for (let right = this.size - 1; right >= 1; right -= 2) {
              if (right === 6) right = 5;
              for (let vert = 0; vert < this.size; vert++) {
                for (let j = 0; j < 2; j++) {
                  const x = right - j;
                  const upward = ((right + 1) & 2) === 0;
                  const y = upward ? this.size - 1 - vert : vert;
                  if (!this.types[y][x] && i < data.length * 8) {
                    this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));
                    i++;
                  }
                }
              }
            }
          }
          // XORs the codeword modules in this QR Code with the given mask pattern.
          // The function modules must be marked and the codeword bits must be drawn
          // before masking. Due to the arithmetic of XOR, calling applyMask() with
          // the same mask value a second time will undo the mask. A final well-formed
          // QR Code needs exactly one (not zero, two, etc.) mask applied.
          applyMask(mask) {
            if (mask < 0 || mask > 7)
              throw new RangeError("Mask value out of range");
            for (let y = 0; y < this.size; y++) {
              for (let x = 0; x < this.size; x++) {
                let invert;
                switch (mask) {
                  case 0:
                    invert = (x + y) % 2 === 0;
                    break;
                  case 1:
                    invert = y % 2 === 0;
                    break;
                  case 2:
                    invert = x % 3 === 0;
                    break;
                  case 3:
                    invert = (x + y) % 3 === 0;
                    break;
                  case 4:
                    invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;
                    break;
                  case 5:
                    invert = ((x * y) % 2) + ((x * y) % 3) === 0;
                    break;
                  case 6:
                    invert = (((x * y) % 2) + ((x * y) % 3)) % 2 === 0;
                    break;
                  case 7:
                    invert = (((x + y) % 2) + ((x * y) % 3)) % 2 === 0;
                    break;
                  default:
                    throw new Error("Unreachable");
                }
                if (!this.types[y][x] && invert)
                  this.modules[y][x] = !this.modules[y][x];
              }
            }
          }
          // Calculates and returns the penalty score based on state of this QR Code's current modules.
          // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.
          getPenaltyScore() {
            let result = 0;
            for (let y = 0; y < this.size; y++) {
              let runColor = false;
              let runX = 0;
              const runHistory = [0, 0, 0, 0, 0, 0, 0];
              for (let x = 0; x < this.size; x++) {
                if (this.modules[y][x] === runColor) {
                  runX++;
                  if (runX === 5) result += PENALTY_N1;
                  else if (runX > 5) result++;
                } else {
                  this.finderPenaltyAddHistory(runX, runHistory);
                  if (!runColor)
                    result +=
                      this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;
                  runColor = this.modules[y][x];
                  runX = 1;
                }
              }
              result +=
                this.finderPenaltyTerminateAndCount(
                  runColor,
                  runX,
                  runHistory,
                ) * PENALTY_N3;
            }
            for (let x = 0; x < this.size; x++) {
              let runColor = false;
              let runY = 0;
              const runHistory = [0, 0, 0, 0, 0, 0, 0];
              for (let y = 0; y < this.size; y++) {
                if (this.modules[y][x] === runColor) {
                  runY++;
                  if (runY === 5) result += PENALTY_N1;
                  else if (runY > 5) result++;
                } else {
                  this.finderPenaltyAddHistory(runY, runHistory);
                  if (!runColor)
                    result +=
                      this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;
                  runColor = this.modules[y][x];
                  runY = 1;
                }
              }
              result +=
                this.finderPenaltyTerminateAndCount(
                  runColor,
                  runY,
                  runHistory,
                ) * PENALTY_N3;
            }
            for (let y = 0; y < this.size - 1; y++) {
              for (let x = 0; x < this.size - 1; x++) {
                const color = this.modules[y][x];
                if (
                  color === this.modules[y][x + 1] &&
                  color === this.modules[y + 1][x] &&
                  color === this.modules[y + 1][x + 1]
                )
                  result += PENALTY_N2;
              }
            }
            let dark = 0;
            for (const row of this.modules)
              dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);
            const total = this.size * this.size;
            const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;
            result += k * PENALTY_N4;
            return result;
          }
          /* -- Private helper functions -- */ // Returns an ascending list of positions of alignment patterns for this version number.
          // Each position is in the range [0,177), and are used on both the x and y axes.
          // This could be implemented as lookup table of 40 variable-length lists of integers.
          getAlignmentPatternPositions() {
            if (this.version === 1) {
              return [];
            } else {
              const numAlign = Math.floor(this.version / 7) + 2;
              const step =
                this.version === 32
                  ? 26
                  : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;
              const result = [6];
              for (
                let pos = this.size - 7;
                result.length < numAlign;
                pos -= step
              )
                result.splice(1, 0, pos);
              return result;
            }
          }
          // Can only be called immediately after a light run is added, and
          // returns either 0, 1, or 2. A helper function for getPenaltyScore().
          finderPenaltyCountPatterns(runHistory) {
            const n = runHistory[1];
            const core =
              n > 0 &&
              runHistory[2] === n &&
              runHistory[3] === n * 3 &&
              runHistory[4] === n &&
              runHistory[5] === n;
            return (
              (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) +
              (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0)
            );
          }
          // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().
          finderPenaltyTerminateAndCount(
            currentRunColor,
            currentRunLength,
            runHistory,
          ) {
            if (currentRunColor) {
              this.finderPenaltyAddHistory(currentRunLength, runHistory);
              currentRunLength = 0;
            }
            currentRunLength += this.size;
            this.finderPenaltyAddHistory(currentRunLength, runHistory);
            return this.finderPenaltyCountPatterns(runHistory);
          }
          // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().
          finderPenaltyAddHistory(currentRunLength, runHistory) {
            if (runHistory[0] === 0) currentRunLength += this.size;
            runHistory.pop();
            runHistory.unshift(currentRunLength);
          }
        }
        function appendBits(val, len, bb) {
          if (len < 0 || len > 31 || val >>> len !== 0)
            throw new RangeError("Value out of range");
          for (let i = len - 1; i >= 0; i--) bb.push((val >>> i) & 1);
        }
        function getBit(x, i) {
          return ((x >>> i) & 1) !== 0;
        }
        class QrSegment {
          // Creates a new QR Code segment with the given attributes and data.
          // The character count (numChars) must agree with the mode and the bit buffer length,
          // but the constraint isn't checked. The given bit buffer is cloned and stored.
          constructor(mode, numChars, bitData) {
            this.mode = mode;
            this.numChars = numChars;
            this.bitData = bitData;
            if (numChars < 0) throw new RangeError("Invalid argument");
            this.bitData = bitData.slice();
          }
          /* -- Methods -- */ // Returns a new copy of the data bits of this segment.
          getData() {
            return this.bitData.slice();
          }
        }
        const MODE_NUMERIC = [1, 10, 12, 14];
        const MODE_ALPHANUMERIC = [2, 9, 11, 13];
        const MODE_BYTE = [4, 8, 16, 16];
        function numCharCountBits(mode, ver) {
          return mode[Math.floor((ver + 7) / 17) + 1];
        }
        function makeBytes(data) {
          const bb = [];
          for (const b of data) appendBits(b, 8, bb);
          return new QrSegment(MODE_BYTE, data.length, bb);
        }
        function makeNumeric(digits) {
          if (!isNumeric(digits))
            throw new RangeError("String contains non-numeric characters");
          const bb = [];
          for (let i = 0; i < digits.length; ) {
            const n = Math.min(digits.length - i, 3);
            appendBits(
              Number.parseInt(digits.substring(i, i + n), 10),
              n * 3 + 1,
              bb,
            );
            i += n;
          }
          return new QrSegment(MODE_NUMERIC, digits.length, bb);
        }
        function makeAlphanumeric(text) {
          if (!isAlphanumeric(text))
            throw new RangeError(
              "String contains unencodable characters in alphanumeric mode",
            );
          const bb = [];
          let i;
          for (i = 0; i + 2 <= text.length; i += 2) {
            let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;
            temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));
            appendBits(temp, 11, bb);
          }
          if (i < text.length)
            appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);
          return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);
        }
        function makeSegments(text) {
          if (text === "") return [];
          else if (isNumeric(text)) return [makeNumeric(text)];
          else if (isAlphanumeric(text)) return [makeAlphanumeric(text)];
          else return [makeBytes(toUtf8ByteArray(text))];
        }
        function isNumeric(text) {
          return NUMERIC_REGEX.test(text);
        }
        function isAlphanumeric(text) {
          return ALPHANUMERIC_REGEX.test(text);
        }
        function getTotalBits(segs, version) {
          let result = 0;
          for (const seg of segs) {
            const ccbits = numCharCountBits(seg.mode, version);
            if (seg.numChars >= 1 << ccbits) return Number.POSITIVE_INFINITY;
            result += 4 + ccbits + seg.bitData.length;
          }
          return result;
        }
        function toUtf8ByteArray(str) {
          str = encodeURI(str);
          const result = [];
          for (let i = 0; i < str.length; i++) {
            if (str.charAt(i) !== "%") {
              result.push(str.charCodeAt(i));
            } else {
              result.push(Number.parseInt(str.substring(i + 1, i + 3), 16));
              i += 2;
            }
          }
          return result;
        }
        function getNumRawDataModules(ver) {
          if (ver < MIN_VERSION || ver > MAX_VERSION)
            throw new RangeError("Version number out of range");
          let result = (16 * ver + 128) * ver + 64;
          if (ver >= 2) {
            const numAlign = Math.floor(ver / 7) + 2;
            result -= (25 * numAlign - 10) * numAlign - 55;
            if (ver >= 7) result -= 36;
          }
          return result;
        }
        function getNumDataCodewords(ver, ecl) {
          return (
            Math.floor(getNumRawDataModules(ver) / 8) -
            ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] *
              NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver]
          );
        }
        function reedSolomonComputeDivisor(degree) {
          if (degree < 1 || degree > 255)
            throw new RangeError("Degree out of range");
          const result = [];
          for (let i = 0; i < degree - 1; i++) result.push(0);
          result.push(1);
          let root = 1;
          for (let i = 0; i < degree; i++) {
            for (let j = 0; j < result.length; j++) {
              result[j] = reedSolomonMultiply(result[j], root);
              if (j + 1 < result.length) result[j] ^= result[j + 1];
            }
            root = reedSolomonMultiply(root, 2);
          }
          return result;
        }
        function reedSolomonComputeRemainder(data, divisor) {
          const result = divisor.map((_) => 0);
          for (const b of data) {
            const factor = b ^ result.shift();
            result.push(0);
            divisor.forEach(
              (coef, i) => (result[i] ^= reedSolomonMultiply(coef, factor)),
            );
          }
          return result;
        }
        function reedSolomonMultiply(x, y) {
          if (x >>> 8 !== 0 || y >>> 8 !== 0)
            throw new RangeError("Byte out of range");
          let z = 0;
          for (let i = 7; i >= 0; i--) {
            z = (z << 1) ^ ((z >>> 7) * 285);
            z ^= ((y >>> i) & 1) * x;
          }
          return z;
        }
        function encodeSegments(
          segs,
          ecl,
          minVersion = 1,
          maxVersion = 40,
          mask = -1,
          boostEcl = true,
        ) {
          if (
            !(
              MIN_VERSION <= minVersion &&
              minVersion <= maxVersion &&
              maxVersion <= MAX_VERSION
            ) ||
            mask < -1 ||
            mask > 7
          )
            throw new RangeError("Invalid value");
          let version;
          let dataUsedBits;
          for (version = minVersion; ; version++) {
            const dataCapacityBits2 = getNumDataCodewords(version, ecl) * 8;
            const usedBits = getTotalBits(segs, version);
            if (usedBits <= dataCapacityBits2) {
              dataUsedBits = usedBits;
              break;
            }
            if (version >= maxVersion) throw new RangeError("Data too long");
          }
          for (const newEcl of [MEDIUM, QUARTILE, HIGH]) {
            if (
              boostEcl &&
              dataUsedBits <= getNumDataCodewords(version, newEcl) * 8
            )
              ecl = newEcl;
          }
          const bb = [];
          for (const seg of segs) {
            appendBits(seg.mode[0], 4, bb);
            appendBits(seg.numChars, numCharCountBits(seg.mode, version), bb);
            for (const b of seg.getData()) bb.push(b);
          }
          const dataCapacityBits = getNumDataCodewords(version, ecl) * 8;
          appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);
          appendBits(0, (8 - (bb.length % 8)) % 8, bb);
          for (
            let padByte = 236;
            bb.length < dataCapacityBits;
            padByte ^= 236 ^ 17
          )
            appendBits(padByte, 8, bb);
          const dataCodewords = Array.from(
            {
              length: Math.ceil(bb.length / 8),
            },
            () => 0,
          );
          bb.forEach((b, i) => (dataCodewords[i >>> 3] |= b << (7 - (i & 7))));
          return new QrCode(version, ecl, dataCodewords, mask);
        }
        function encode(data, options) {
          const {
            ecc = "L",
            boostEcc = false,
            minVersion = 1,
            maxVersion = 40,
            maskPattern = -1,
            border = 1,
          } = options || {};
          const segment =
            typeof data === "string"
              ? makeSegments(data)
              : Array.isArray(data)
                ? [makeBytes(data)]
                : void 0;
          if (!segment)
            throw new Error(
              `uqr only supports encoding string and binary data, but got: ${typeof data}`,
            );
          const qr = encodeSegments(
            segment,
            EccMap[ecc],
            minVersion,
            maxVersion,
            maskPattern,
            boostEcc,
          );
          const result = addBorder(
            {
              version: qr.version,
              maskPattern: qr.mask,
              size: qr.size,
              data: qr.modules,
              types: qr.types,
            },
            border,
          );
          if (options?.invert)
            result.data = result.data.map((row) => row.map((mod) => !mod));
          options?.onEncoded?.(result);
          return result;
        }
        function addBorder(input, border = 1) {
          if (!border) return input;
          const { size } = input;
          const newSize = size + border * 2;
          input.size = newSize;
          input.data.forEach((row) => {
            for (let i = 0; i < border; i++) {
              row.unshift(false);
              row.push(false);
            }
          });
          for (let i = 0; i < border; i++) {
            input.data.unshift(
              Array.from(
                {
                  length: newSize,
                },
                (_) => false,
              ),
            );
            input.data.push(
              Array.from(
                {
                  length: newSize,
                },
                (_) => false,
              ),
            );
          }
          const b = QrCodeDataType.Border;
          input.types.forEach((row) => {
            for (let i = 0; i < border; i++) {
              row.unshift(b);
              row.push(b);
            }
          });
          for (let i = 0; i < border; i++) {
            input.types.unshift(
              Array.from(
                {
                  length: newSize,
                },
                (_) => b,
              ),
            );
            input.types.push(
              Array.from(
                {
                  length: newSize,
                },
                (_) => b,
              ),
            );
          }
          return input;
        }
        function getDataAt(data, x, y, defaults = false) {
          if (x < 0 || y < 0 || x >= data.length || y >= data.length)
            return defaults;
          return data[y][x];
        }
        function renderUnicode(data, options = {}) {
          const { whiteChar = "\u2588", blackChar = "\u2591" } = options;
          const result = encode(data, options);
          return result.data
            .map((row) => {
              return row.map((mod) => (mod ? blackChar : whiteChar)).join("");
            })
            .join("\n");
        }
        function renderANSI(data, options = {}) {
          return renderUnicode(data, {
            ...options,
            blackChar: "\x1B[40m\u3000\x1B[0m",
            whiteChar: "\x1B[47m\u3000\x1B[0m",
          });
        }
        function renderUnicodeCompact(data, options = {}) {
          const platte = {
            WHITE_ALL: "\u2588",
            WHITE_BLACK: "\u2580",
            BLACK_WHITE: "\u2584",
            BLACK_ALL: " ",
          };
          const result = encode(data, options);
          const WHITE = false;
          const BLACK = true;
          const at = (x, y) => getDataAt(result.data, x, y, true);
          const lines = [];
          let line = "";
          for (let row = 0; row < result.size; row += 2) {
            for (let col = 0; col < result.size; col++) {
              if (at(col, row) === WHITE && at(col, row + 1) === WHITE)
                line += platte.WHITE_ALL;
              else if (at(col, row) === WHITE && at(col, row + 1) === BLACK)
                line += platte.WHITE_BLACK;
              else if (at(col, row) === BLACK && at(col, row + 1) === WHITE)
                line += platte.BLACK_WHITE;
              else line += platte.BLACK_ALL;
            }
            lines.push(line);
            line = "";
          }
          return lines.join("\n");
        }
        function renderSVG(data, options = {}) {
          const result = encode(data, options);
          const {
            pixelSize = 10,
            whiteColor = "white",
            blackColor = "black",
          } = options;
          const height = result.size * pixelSize;
          const width = result.size * pixelSize;
          let svg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${width} ${height}">`;
          const pathes = [];
          for (let row = 0; row < result.size; row++) {
            for (let col = 0; col < result.size; col++) {
              const x = col * pixelSize;
              const y = row * pixelSize;
              if (result.data[row][col])
                pathes.push(
                  `M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`,
                );
            }
          }
          svg += `<rect fill="${whiteColor}" width="${width}" height="${height}"/>`;
          svg += `<path fill="${blackColor}" d="${pathes.join("")}"/>`;
          svg += "</svg>";
          return svg;
        }
      }
    },
    "[project]/node_modules/proxy-compare/dist/index.js [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          /* eslint @typescript-eslint/no-explicit-any: off */ // symbols
          __turbopack_context__.s({
            affectedToPathList: () => affectedToPathList,
            createProxy: () => createProxy,
            getUntracked: () => getUntracked,
            isChanged: () => isChanged,
            markToTrack: () => markToTrack,
            replaceNewProxy: () => replaceNewProxy,
            trackMemo: () => trackMemo,
          });
          const TRACK_MEMO_SYMBOL = Symbol();
          const GET_ORIGINAL_SYMBOL = Symbol();
          // properties
          const AFFECTED_PROPERTY = "a";
          const IS_TARGET_COPIED_PROPERTY = "f";
          const PROXY_PROPERTY = "p";
          const PROXY_CACHE_PROPERTY = "c";
          const TARGET_CACHE_PROPERTY = "t";
          const HAS_KEY_PROPERTY = "h";
          const ALL_OWN_KEYS_PROPERTY = "w";
          const HAS_OWN_KEY_PROPERTY = "o";
          const KEYS_PROPERTY = "k";
          // function to create a new bare proxy
          let newProxy = (target, handler) => new Proxy(target, handler);
          // get object prototype
          const getProto = Object.getPrototypeOf;
          const objectsToTrack = new WeakMap();
          // check if obj is a plain object or an array
          const isObjectToTrack = (obj) =>
            obj &&
            (objectsToTrack.has(obj)
              ? objectsToTrack.get(obj)
              : getProto(obj) === Object.prototype ||
                getProto(obj) === Array.prototype);
          // check if it is object
          const isObject = (x) => typeof x === "object" && x !== null;
          // Properties that are both non-configurable and non-writable will break
          // the proxy get trap when we try to return a recursive/child compare proxy
          // from them. We can avoid this by making a copy of the target object with
          // all descriptors marked as configurable, see `copyTargetObject`.
          // See: https://github.com/dai-shi/proxy-compare/pull/8
          const needsToCopyTargetObject = (obj) =>
            Object.values(Object.getOwnPropertyDescriptors(obj)).some(
              (descriptor) => !descriptor.configurable && !descriptor.writable,
            );
          // Make a copy with all descriptors marked as configurable.
          const copyTargetObject = (obj) => {
            if (Array.isArray(obj)) {
              // Arrays need a special way to copy
              return Array.from(obj);
            }
            // For non-array objects, we create a new object keeping the prototype
            // with changing all configurable options (otherwise, proxies will complain)
            const descriptors = Object.getOwnPropertyDescriptors(obj);
            Object.values(descriptors).forEach((desc) => {
              desc.configurable = true;
            });
            return Object.create(getProto(obj), descriptors);
          };
          const createProxyHandler = (origObj, isTargetCopied) => {
            const state = {
              [IS_TARGET_COPIED_PROPERTY]: isTargetCopied,
            };
            let trackObject = false; // for trackMemo
            const recordUsage = (type, key) => {
              if (!trackObject) {
                let used = state[AFFECTED_PROPERTY].get(origObj);
                if (!used) {
                  used = {};
                  state[AFFECTED_PROPERTY].set(origObj, used);
                }
                if (type === ALL_OWN_KEYS_PROPERTY) {
                  used[ALL_OWN_KEYS_PROPERTY] = true;
                } else {
                  let set = used[type];
                  if (!set) {
                    set = new Set();
                    used[type] = set;
                  }
                  set.add(key);
                }
              }
            };
            const recordObjectAsUsed = () => {
              trackObject = true;
              state[AFFECTED_PROPERTY].delete(origObj);
            };
            const handler = {
              get(target, key) {
                if (key === GET_ORIGINAL_SYMBOL) {
                  return origObj;
                }
                recordUsage(KEYS_PROPERTY, key);
                return createProxy(
                  Reflect.get(target, key),
                  state[AFFECTED_PROPERTY],
                  state[PROXY_CACHE_PROPERTY],
                  state[TARGET_CACHE_PROPERTY],
                );
              },
              has(target, key) {
                if (key === TRACK_MEMO_SYMBOL) {
                  recordObjectAsUsed();
                  return true;
                }
                recordUsage(HAS_KEY_PROPERTY, key);
                return Reflect.has(target, key);
              },
              getOwnPropertyDescriptor(target, key) {
                recordUsage(HAS_OWN_KEY_PROPERTY, key);
                return Reflect.getOwnPropertyDescriptor(target, key);
              },
              ownKeys(target) {
                recordUsage(ALL_OWN_KEYS_PROPERTY);
                return Reflect.ownKeys(target);
              },
            };
            if (isTargetCopied) {
              handler.set = handler.deleteProperty = () => false;
            }
            return [handler, state];
          };
          const getOriginalObject = (
            obj, // unwrap proxy
          ) =>
            obj[GET_ORIGINAL_SYMBOL] || // otherwise
            obj;
          const createProxy = (obj, affected, proxyCache, targetCache) => {
            if (!isObjectToTrack(obj)) return obj;
            let targetAndCopied = targetCache && targetCache.get(obj);
            if (!targetAndCopied) {
              const target = getOriginalObject(obj);
              if (needsToCopyTargetObject(target)) {
                targetAndCopied = [target, copyTargetObject(target)];
              } else {
                targetAndCopied = [target];
              }
              targetCache === null || targetCache === void 0
                ? void 0
                : targetCache.set(obj, targetAndCopied);
            }
            const [target, copiedTarget] = targetAndCopied;
            let handlerAndState = proxyCache && proxyCache.get(target);
            if (
              !handlerAndState ||
              handlerAndState[1][IS_TARGET_COPIED_PROPERTY] !== !!copiedTarget
            ) {
              handlerAndState = createProxyHandler(target, !!copiedTarget);
              handlerAndState[1][PROXY_PROPERTY] = newProxy(
                copiedTarget || target,
                handlerAndState[0],
              );
              if (proxyCache) {
                proxyCache.set(target, handlerAndState);
              }
            }
            handlerAndState[1][AFFECTED_PROPERTY] = affected;
            handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache;
            handlerAndState[1][TARGET_CACHE_PROPERTY] = targetCache;
            return handlerAndState[1][PROXY_PROPERTY];
          };
          const isAllOwnKeysChanged = (prevObj, nextObj) => {
            const prevKeys = Reflect.ownKeys(prevObj);
            const nextKeys = Reflect.ownKeys(nextObj);
            return (
              prevKeys.length !== nextKeys.length ||
              prevKeys.some((k, i) => k !== nextKeys[i])
            );
          };
          const isChanged = (
            prevObj,
            nextObj,
            affected,
            cache,
            isEqual = Object.is,
          ) => {
            if (isEqual(prevObj, nextObj)) {
              return false;
            }
            if (!isObject(prevObj) || !isObject(nextObj)) return true;
            const used = affected.get(getOriginalObject(prevObj));
            if (!used) return true;
            if (cache) {
              const hit = cache.get(prevObj);
              if (hit === nextObj) {
                return false;
              }
              // for object with cycles
              cache.set(prevObj, nextObj);
            }
            let changed = null;
            for (const key of used[HAS_KEY_PROPERTY] || []) {
              changed = Reflect.has(prevObj, key) !== Reflect.has(nextObj, key);
              if (changed) return changed;
            }
            if (used[ALL_OWN_KEYS_PROPERTY] === true) {
              changed = isAllOwnKeysChanged(prevObj, nextObj);
              if (changed) return changed;
            } else {
              for (const key of used[HAS_OWN_KEY_PROPERTY] || []) {
                const hasPrev = !!Reflect.getOwnPropertyDescriptor(
                  prevObj,
                  key,
                );
                const hasNext = !!Reflect.getOwnPropertyDescriptor(
                  nextObj,
                  key,
                );
                changed = hasPrev !== hasNext;
                if (changed) return changed;
              }
            }
            for (const key of used[KEYS_PROPERTY] || []) {
              changed = isChanged(
                prevObj[key],
                nextObj[key],
                affected,
                cache,
                isEqual,
              );
              if (changed) return changed;
            }
            if (changed === null) throw new Error("invalid used");
            return changed;
          };
          const trackMemo = (obj) => {
            if (isObjectToTrack(obj)) {
              return TRACK_MEMO_SYMBOL in obj;
            }
            return false;
          };
          const getUntracked = (obj) => {
            if (isObjectToTrack(obj)) {
              return obj[GET_ORIGINAL_SYMBOL] || null;
            }
            return null;
          };
          const markToTrack = (obj, mark = true) => {
            objectsToTrack.set(obj, mark);
          };
          const affectedToPathList = (obj, affected, onlyWithValues) => {
            const list = [];
            const seen = new WeakSet();
            const walk = (x, path) => {
              var _a, _b, _c;
              if (seen.has(x)) {
                // for object with cycles
                return;
              }
              if (isObject(x)) {
                seen.add(x);
              }
              const used = isObject(x) && affected.get(getOriginalObject(x));
              if (used) {
                (_a = used[HAS_KEY_PROPERTY]) === null || _a === void 0
                  ? void 0
                  : _a.forEach((key) => {
                      const segment = `:has(${String(key)})`;
                      list.push(path ? [...path, segment] : [segment]);
                    });
                if (used[ALL_OWN_KEYS_PROPERTY] === true) {
                  const segment = ":ownKeys";
                  list.push(path ? [...path, segment] : [segment]);
                } else {
                  (_b = used[HAS_OWN_KEY_PROPERTY]) === null || _b === void 0
                    ? void 0
                    : _b.forEach((key) => {
                        const segment = `:hasOwn(${String(key)})`;
                        list.push(path ? [...path, segment] : [segment]);
                      });
                }
                (_c = used[KEYS_PROPERTY]) === null || _c === void 0
                  ? void 0
                  : _c.forEach((key) => {
                      if (
                        !onlyWithValues ||
                        "value" in
                          (Object.getOwnPropertyDescriptor(x, key) || {})
                      ) {
                        walk(x[key], path ? [...path, key] : [key]);
                      }
                    });
              } else if (path) {
                list.push(path);
              }
            };
            walk(obj);
            return list;
          };
          const replaceNewProxy = (fn) => {
            newProxy = fn;
          };
        }
      },
    "[project]/node_modules/next-themes/dist/index.mjs [client] (ecmascript)": (
      __turbopack_context__,
    ) => {
      "use strict";

      var { g: global, __dirname } = __turbopack_context__;
      {
        __turbopack_context__.s({
          ThemeProvider: () => J,
          useTheme: () => z,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/react/index.js [client] (ecmascript)",
          );
        ("use client");
        var M = (e, i, s, u, m, a, l, h) => {
          let d = document.documentElement,
            w = ["light", "dark"];
          function p(n) {
            (Array.isArray(e) ? e : [e]).forEach((y) => {
              let k = y === "class",
                S = k && a ? m.map((f) => a[f] || f) : m;
              k
                ? (d.classList.remove(...S),
                  d.classList.add(a && a[n] ? a[n] : n))
                : d.setAttribute(y, n);
            }),
              R(n);
          }
          function R(n) {
            h && w.includes(n) && (d.style.colorScheme = n);
          }
          function c() {
            return window.matchMedia("(prefers-color-scheme: dark)").matches
              ? "dark"
              : "light";
          }
          if (u) p(u);
          else
            try {
              let n = localStorage.getItem(i) || s,
                y = l && n === "system" ? c() : n;
              p(y);
            } catch (n) {}
        };
        var b = ["light", "dark"],
          I = "(prefers-color-scheme: dark)",
          O = typeof window == "undefined",
          x = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "createContext"
          ])(void 0),
          U = {
            setTheme: (e) => {},
            themes: [],
          },
          z = () => {
            var e;
            return (e = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useContext"
            ])(x)) != null
              ? e
              : U;
          },
          J = (e) =>
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useContext"
            ])(x)
              ? (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "createElement"
                ])(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                    "Fragment"
                  ],
                  null,
                  e.children,
                )
              : (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "createElement"
                ])(V, {
                  ...e,
                }),
          N = ["light", "dark"],
          V = ({
            forcedTheme: e,
            disableTransitionOnChange: i = !1,
            enableSystem: s = !0,
            enableColorScheme: u = !0,
            storageKey: m = "theme",
            themes: a = N,
            defaultTheme: l = s ? "system" : "light",
            attribute: h = "data-theme",
            value: d,
            children: w,
            nonce: p,
            scriptProps: R,
          }) => {
            let [c, n] = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useState"
              ])(
                {
                  "V.useState": () => H(m, l),
                }["V.useState"],
              ),
              [T, y] = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useState"
              ])(
                {
                  "V.useState": () => (c === "system" ? E() : c),
                }["V.useState"],
              ),
              k = d ? Object.values(d) : a,
              S = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useCallback"
              ])(
                {
                  "V.useCallback[S]": (o) => {
                    let r = o;
                    if (!r) return;
                    o === "system" && s && (r = E());
                    let v = d ? d[r] : r,
                      C = i ? W(p) : null,
                      P = document.documentElement,
                      L = {
                        "V.useCallback[S].L": (g) => {
                          g === "class"
                            ? (P.classList.remove(...k),
                              v && P.classList.add(v))
                            : g.startsWith("data-") &&
                              (v ? P.setAttribute(g, v) : P.removeAttribute(g));
                        },
                      }["V.useCallback[S].L"];
                    if ((Array.isArray(h) ? h.forEach(L) : L(h), u)) {
                      let g = b.includes(l) ? l : null,
                        D = b.includes(r) ? r : g;
                      P.style.colorScheme = D;
                    }
                    C == null || C();
                  },
                }["V.useCallback[S]"],
                [p],
              ),
              f = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useCallback"
              ])(
                {
                  "V.useCallback[f]": (o) => {
                    let r = typeof o == "function" ? o(c) : o;
                    n(r);
                    try {
                      localStorage.setItem(m, r);
                    } catch (v) {}
                  },
                }["V.useCallback[f]"],
                [c],
              ),
              A = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useCallback"
              ])(
                {
                  "V.useCallback[A]": (o) => {
                    let r = E(o);
                    y(r), c === "system" && s && !e && S("system");
                  },
                }["V.useCallback[A]"],
                [c, e],
              );
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useEffect"
            ])(
              {
                "V.useEffect": () => {
                  let o = window.matchMedia(I);
                  return (
                    o.addListener(A),
                    A(o),
                    {
                      "V.useEffect": () => o.removeListener(A),
                    }["V.useEffect"]
                  );
                },
              }["V.useEffect"],
              [A],
            ),
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useEffect"
              ])(
                {
                  "V.useEffect": () => {
                    let o = {
                      "V.useEffect.o": (r) => {
                        r.key === m && (r.newValue ? n(r.newValue) : f(l));
                      },
                    }["V.useEffect.o"];
                    return (
                      window.addEventListener("storage", o),
                      {
                        "V.useEffect": () =>
                          window.removeEventListener("storage", o),
                      }["V.useEffect"]
                    );
                  },
                }["V.useEffect"],
                [f],
              ),
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useEffect"
              ])(
                {
                  "V.useEffect": () => {
                    S(e != null ? e : c);
                  },
                }["V.useEffect"],
                [e, c],
              );
            let Q = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useMemo"
            ])(
              {
                "V.useMemo[Q]": () => ({
                  theme: c,
                  setTheme: f,
                  forcedTheme: e,
                  resolvedTheme: c === "system" ? T : c,
                  themes: s ? [...a, "system"] : a,
                  systemTheme: s ? T : void 0,
                }),
              }["V.useMemo[Q]"],
              [c, f, e, T, s, a],
            );
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "createElement"
            ])(
              x.Provider,
              {
                value: Q,
              },
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "createElement"
              ])(_, {
                forcedTheme: e,
                storageKey: m,
                attribute: h,
                enableSystem: s,
                enableColorScheme: u,
                defaultTheme: l,
                value: d,
                themes: a,
                nonce: p,
                scriptProps: R,
              }),
              w,
            );
          },
          _ = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
            "memo"
          ])(
            ({
              forcedTheme: e,
              storageKey: i,
              attribute: s,
              enableSystem: u,
              enableColorScheme: m,
              defaultTheme: a,
              value: l,
              themes: h,
              nonce: d,
              scriptProps: w,
            }) => {
              let p = JSON.stringify([s, i, a, e, h, l, u, m]).slice(1, -1);
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "createElement"
              ])("script", {
                ...w,
                suppressHydrationWarning: !0,
                nonce: typeof window == "undefined" ? d : "",
                dangerouslySetInnerHTML: {
                  __html: `(${M.toString()})(${p})`,
                },
              });
            },
          ),
          H = (e, i) => {
            if (O) return;
            let s;
            try {
              s = localStorage.getItem(e) || void 0;
            } catch (u) {}
            return s || i;
          },
          W = (e) => {
            let i = document.createElement("style");
            return (
              e && i.setAttribute("nonce", e),
              i.appendChild(
                document.createTextNode(
                  "*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}",
                ),
              ),
              document.head.appendChild(i),
              () => {
                window.getComputedStyle(document.body),
                  setTimeout(() => {
                    document.head.removeChild(i);
                  }, 1);
              }
            );
          },
          E = (e) => (
            e || (e = window.matchMedia(I)), e.matches ? "dark" : "light"
          );
      }
    },
  },
]);

//# sourceMappingURL=node_modules_628d090d._.js.map
